
out/project.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__text_start>:
       0:	10000f40 	.word	0x10000f40
       4:	00000101 	.word	0x00000101
	...
      7c:	00000815 	.word	0x00000815
      80:	000001f9 	.word	0x000001f9
	...
      94:	00000661 	.word	0x00000661
	...

000000a0 <__do_global_dtors_aux>:
      a0:	b510      	push	{r4, lr}
      a2:	4c06      	ldr	r4, [pc, #24]	; (bc <__do_global_dtors_aux+0x1c>)
      a4:	7823      	ldrb	r3, [r4, #0]
      a6:	2b00      	cmp	r3, #0
      a8:	d107      	bne.n	ba <__do_global_dtors_aux+0x1a>
      aa:	4805      	ldr	r0, [pc, #20]	; (c0 <__do_global_dtors_aux+0x20>)
      ac:	2800      	cmp	r0, #0
      ae:	d002      	beq.n	b6 <__do_global_dtors_aux+0x16>
      b0:	4804      	ldr	r0, [pc, #16]	; (c4 <__do_global_dtors_aux+0x24>)
      b2:	e000      	b.n	b6 <__do_global_dtors_aux+0x16>
      b4:	bf00      	nop
      b6:	2101      	movs	r1, #1
      b8:	7021      	strb	r1, [r4, #0]
      ba:	bd10      	pop	{r4, pc}
      bc:	10000848 	.word	0x10000848
      c0:	00000000 	.word	0x00000000
      c4:	00003770 	.word	0x00003770

000000c8 <frame_dummy>:
      c8:	b508      	push	{r3, lr}
      ca:	4b08      	ldr	r3, [pc, #32]	; (ec <frame_dummy+0x24>)
      cc:	2b00      	cmp	r3, #0
      ce:	d003      	beq.n	d8 <frame_dummy+0x10>
      d0:	4807      	ldr	r0, [pc, #28]	; (f0 <frame_dummy+0x28>)
      d2:	4908      	ldr	r1, [pc, #32]	; (f4 <frame_dummy+0x2c>)
      d4:	e000      	b.n	d8 <frame_dummy+0x10>
      d6:	bf00      	nop
      d8:	4807      	ldr	r0, [pc, #28]	; (f8 <frame_dummy+0x30>)
      da:	6801      	ldr	r1, [r0, #0]
      dc:	2900      	cmp	r1, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x20>
      e0:	4a06      	ldr	r2, [pc, #24]	; (fc <frame_dummy+0x34>)
      e2:	2a00      	cmp	r2, #0
      e4:	d000      	beq.n	e8 <frame_dummy+0x20>
      e6:	4790      	blx	r2
      e8:	bd08      	pop	{r3, pc}
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	00000000 	.word	0x00000000
      f0:	00003770 	.word	0x00003770
      f4:	1000084c 	.word	0x1000084c
      f8:	10000844 	.word	0x10000844
      fc:	00000000 	.word	0x00000000

00000100 <__startup>:
      0,          /* IRQ20 - SPI0    */
      UART_IRQHandler           /* IRQ21 - UART    */

};

void __startup(void){
     100:	b510      	push	{r4, lr}
   extern int __init_array_end;
   
	 int *s, *d, *e;

	 // clear .bss section 
	 d = & __bss_start;
     102:	4911      	ldr	r1, [pc, #68]	; (148 <__startup+0x48>)
	 e = & __bss_end;
	 while( d != e ){
     104:	4a11      	ldr	r2, [pc, #68]	; (14c <__startup+0x4c>)
     106:	4291      	cmp	r1, r2
     108:	d002      	beq.n	110 <__startup+0x10>
	    *d++ = 0;
     10a:	2200      	movs	r2, #0
     10c:	c104      	stmia	r1!, {r2}
     10e:	e7f9      	b.n	104 <__startup+0x4>
      0,          /* IRQ20 - SPI0    */
      UART_IRQHandler           /* IRQ21 - UART    */

};

void __startup(void){
     110:	490f      	ldr	r1, [pc, #60]	; (150 <__startup+0x50>)
     112:	4a10      	ldr	r2, [pc, #64]	; (154 <__startup+0x54>)
     114:	1a88      	subs	r0, r1, r2
     116:	0883      	lsrs	r3, r0, #2
     118:	3301      	adds	r3, #1
     11a:	0099      	lsls	r1, r3, #2
     11c:	2300      	movs	r3, #0
     11e:	3304      	adds	r3, #4
	 
	 // copy .data section from flash to ram
	 s = & __data_init_start;
	 d = & __data_start;
	 e = & __data_end;
	 while( d != e ){ 
     120:	428b      	cmp	r3, r1
     122:	d007      	beq.n	134 <__startup+0x34>
      0,          /* IRQ20 - SPI0    */
      UART_IRQHandler           /* IRQ21 - UART    */

};

void __startup(void){
     124:	4c0c      	ldr	r4, [pc, #48]	; (158 <__startup+0x58>)
     126:	18d0      	adds	r0, r2, r3
     128:	191c      	adds	r4, r3, r4
     12a:	3c04      	subs	r4, #4
	 // copy .data section from flash to ram
	 s = & __data_init_start;
	 d = & __data_start;
	 e = & __data_end;
	 while( d != e ){ 
	    *d++ = *s++;
     12c:	6824      	ldr	r4, [r4, #0]
      0,          /* IRQ20 - SPI0    */
      UART_IRQHandler           /* IRQ21 - UART    */

};

void __startup(void){
     12e:	3804      	subs	r0, #4
	 // copy .data section from flash to ram
	 s = & __data_init_start;
	 d = & __data_start;
	 e = & __data_end;
	 while( d != e ){ 
	    *d++ = *s++;
     130:	6004      	str	r4, [r0, #0]
     132:	e7f4      	b.n	11e <__startup+0x1e>
	 
	 // copy .data section from flash to ram
	 s = & __data_init_start;
	 d = & __data_start;
	 e = & __data_end;
	 while( d != e ){ 
     134:	4c09      	ldr	r4, [pc, #36]	; (15c <__startup+0x5c>)
	 } 
	 
	 // call the constructorts of global objects
	 s = & __init_array_start;
	 e = & __init_array_end;
	 while( s != e ){
     136:	4a0a      	ldr	r2, [pc, #40]	; (160 <__startup+0x60>)
     138:	4294      	cmp	r4, r2
     13a:	d002      	beq.n	142 <__startup+0x42>
	    (*((void(**)())s++))();
     13c:	cc02      	ldmia	r4!, {r1}
     13e:	4788      	blx	r1
     140:	e7f9      	b.n	136 <__startup+0x36>
	 }
  
   // call main   
   (void) main(); 
     142:	f000 fb5f 	bl	804 <main>
     146:	e7fe      	b.n	146 <__startup+0x46>
     148:	10000848 	.word	0x10000848
     14c:	10000b3c 	.word	0x10000b3c
     150:	10000844 	.word	0x10000844
     154:	10000000 	.word	0x10000000
     158:	00003798 	.word	0x00003798
     15c:	0000377c 	.word	0x0000377c
     160:	00003788 	.word	0x00003788

00000164 <_Z7pinModehh>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     164:	b510      	push	{r4, lr}
	uint32_t bit = digitalPinToBitMask(pin);
	uint32_t port = digitalPinToPort(pin);
     166:	4c12      	ldr	r4, [pc, #72]	; (1b0 <_Z7pinModehh+0x4c>)
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint32_t bit = digitalPinToBitMask(pin);
     168:	0042      	lsls	r2, r0, #1
     16a:	4b12      	ldr	r3, [pc, #72]	; (1b4 <_Z7pinModehh+0x50>)
	uint32_t port = digitalPinToPort(pin);
     16c:	5c20      	ldrb	r0, [r4, r0]
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint32_t bit = digitalPinToBitMask(pin);
     16e:	5ad2      	ldrh	r2, [r2, r3]
	uint32_t port = digitalPinToPort(pin);
	volatile uint32_t *reg, *out;

	if (port == NOT_A_PIN) return;
     170:	2800      	cmp	r0, #0
     172:	d01b      	beq.n	1ac <_Z7pinModehh+0x48>

	// JWS: can I let the optimizer do this?
	reg = (uint32_t *)portModeRegister(port);
     174:	4b10      	ldr	r3, [pc, #64]	; (1b8 <_Z7pinModehh+0x54>)
	out = (uint32_t *)portOutputRegister(port);
     176:	4c11      	ldr	r4, [pc, #68]	; (1bc <_Z7pinModehh+0x58>)
	volatile uint32_t *reg, *out;

	if (port == NOT_A_PIN) return;

	// JWS: can I let the optimizer do this?
	reg = (uint32_t *)portModeRegister(port);
     178:	0080      	lsls	r0, r0, #2
     17a:	581b      	ldr	r3, [r3, r0]
	out = (uint32_t *)portOutputRegister(port);
     17c:	5820      	ldr	r0, [r4, r0]

	if (mode == INPUT) { 
	        noInterrupts();
     17e:	b672      	cpsid	i

	// JWS: can I let the optimizer do this?
	reg = (uint32_t *)portModeRegister(port);
	out = (uint32_t *)portOutputRegister(port);

	if (mode == INPUT) { 
     180:	2900      	cmp	r1, #0
     182:	d106      	bne.n	192 <_Z7pinModehh+0x2e>
	        noInterrupts();
         	*reg &= ~bit;
     184:	6819      	ldr	r1, [r3, #0]
     186:	43d2      	mvns	r2, r2
     188:	4011      	ands	r1, r2
     18a:	6019      	str	r1, [r3, #0]
		*out &= ~bit;
     18c:	6804      	ldr	r4, [r0, #0]
     18e:	4022      	ands	r2, r4
     190:	e006      	b.n	1a0 <_Z7pinModehh+0x3c>
		interrupts();
	} else if (mode == INPUT_PULLUP) {
     192:	2902      	cmp	r1, #2
     194:	d106      	bne.n	1a4 <_Z7pinModehh+0x40>
	        noInterrupts();
		*reg &= ~bit;
     196:	681c      	ldr	r4, [r3, #0]
     198:	4394      	bics	r4, r2
     19a:	601c      	str	r4, [r3, #0]
		*out |= bit;
     19c:	6803      	ldr	r3, [r0, #0]
     19e:	431a      	orrs	r2, r3
     1a0:	6002      	str	r2, [r0, #0]
     1a2:	e002      	b.n	1aa <_Z7pinModehh+0x46>
		interrupts();
	} else {
	        noInterrupts();
		*reg |= bit;
     1a4:	6819      	ldr	r1, [r3, #0]
     1a6:	430a      	orrs	r2, r1
     1a8:	601a      	str	r2, [r3, #0]
		interrupts();
     1aa:	b662      	cpsie	i
	}
}
     1ac:	bd10      	pop	{r4, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	000035c4 	.word	0x000035c4
     1b4:	0000359c 	.word	0x0000359c
     1b8:	000035d8 	.word	0x000035d8
     1bc:	00003588 	.word	0x00003588

000001c0 <_Z12digitalWritehh>:
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint32_t timer = digitalPinToTimer(pin);
	uint32_t bit = digitalPinToBitMask(pin);
     1c0:	4b0a      	ldr	r3, [pc, #40]	; (1ec <_Z12digitalWritehh+0x2c>)
     1c2:	0042      	lsls	r2, r0, #1
     1c4:	5ad2      	ldrh	r2, [r2, r3]
	uint32_t port = digitalPinToPort(pin);
     1c6:	4b0a      	ldr	r3, [pc, #40]	; (1f0 <_Z12digitalWritehh+0x30>)
     1c8:	5c18      	ldrb	r0, [r3, r0]
	uint32_t *out;

	if (port == NOT_A_PIN) return;
     1ca:	2800      	cmp	r0, #0
     1cc:	d00c      	beq.n	1e8 <_Z12digitalWritehh+0x28>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = (uint32_t *)portOutputRegister(port);
     1ce:	0083      	lsls	r3, r0, #2
     1d0:	4808      	ldr	r0, [pc, #32]	; (1f4 <_Z12digitalWritehh+0x34>)
     1d2:	581b      	ldr	r3, [r3, r0]

	noInterrupts();
     1d4:	b672      	cpsid	i
     1d6:	6818      	ldr	r0, [r3, #0]

	if (val == LOW) {
     1d8:	2900      	cmp	r1, #0
     1da:	d102      	bne.n	1e2 <_Z12digitalWritehh+0x22>
		*out &= ~bit;
     1dc:	4390      	bics	r0, r2
     1de:	6018      	str	r0, [r3, #0]
     1e0:	e001      	b.n	1e6 <_Z12digitalWritehh+0x26>
	} else {
		*out |= bit;
     1e2:	4302      	orrs	r2, r0
     1e4:	601a      	str	r2, [r3, #0]
	}

	interrupts();
     1e6:	b662      	cpsie	i
}
     1e8:	4770      	bx	lr
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	0000359c 	.word	0x0000359c
     1f0:	000035c4 	.word	0x000035c4
     1f4:	00003588 	.word	0x00003588

000001f8 <_Z15TIMER0_OVF_vectv>:
void TIMER0_OVF_vect()
{
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;
     1f8:	490a      	ldr	r1, [pc, #40]	; (224 <_Z15TIMER0_OVF_vectv+0x2c>)

void TIMER0_OVF_vect()
{
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = timer0_millis;
     1fa:	480b      	ldr	r0, [pc, #44]	; (228 <_Z15TIMER0_OVF_vectv+0x30>)
  unsigned char f = timer0_fract;
     1fc:	780b      	ldrb	r3, [r1, #0]

void TIMER0_OVF_vect()
{
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = timer0_millis;
     1fe:	6802      	ldr	r2, [r0, #0]
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
     200:	2b7c      	cmp	r3, #124	; 0x7c
     202:	d801      	bhi.n	208 <_Z15TIMER0_OVF_vectv+0x10>
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
     204:	3201      	adds	r2, #1
     206:	e002      	b.n	20e <_Z15TIMER0_OVF_vectv+0x16>
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
     208:	3b7d      	subs	r3, #125	; 0x7d
     20a:	b2db      	uxtb	r3, r3
    m += 1;
     20c:	3202      	adds	r2, #2
  }

  timer0_fract = f;
  timer0_millis = m;
     20e:	6002      	str	r2, [r0, #0]
  timer0_overflow_count++;
     210:	4806      	ldr	r0, [pc, #24]	; (22c <_Z15TIMER0_OVF_vectv+0x34>)
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
     212:	700b      	strb	r3, [r1, #0]
  timer0_millis = m;
  timer0_overflow_count++;
     214:	6802      	ldr	r2, [r0, #0]

  //  Clear the interrupt flag
  TMR16B0IR     = 1;
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <_Z15TIMER0_OVF_vectv+0x38>)
    m += 1;
  }

  timer0_fract = f;
  timer0_millis = m;
  timer0_overflow_count++;
     218:	3201      	adds	r2, #1

  //  Clear the interrupt flag
  TMR16B0IR     = 1;
     21a:	2101      	movs	r1, #1
    m += 1;
  }

  timer0_fract = f;
  timer0_millis = m;
  timer0_overflow_count++;
     21c:	6002      	str	r2, [r0, #0]

  //  Clear the interrupt flag
  TMR16B0IR     = 1;
     21e:	6019      	str	r1, [r3, #0]
}
     220:	4770      	bx	lr
     222:	46c0      	nop			; (mov r8, r8)
     224:	10000868 	.word	0x10000868
     228:	1000086c 	.word	0x1000086c
     22c:	10000864 	.word	0x10000864
     230:	4000c000 	.word	0x4000c000

00000234 <_Z4initv>:
void init()
{
  uint32_t i;

  //  run the PLL at 48 mhz using the 12 mhz internal resonator as the source
  PDRUNCFG     &= ~(1 << 5);          // Power-up System Osc      
     234:	4a21      	ldr	r2, [pc, #132]	; (2bc <_Z4initv+0x88>)
     236:	2120      	movs	r1, #32
     238:	6813      	ldr	r3, [r2, #0]
  SYSOSCCTRL    = 0x00000000;
     23a:	2000      	movs	r0, #0
void init()
{
  uint32_t i;

  //  run the PLL at 48 mhz using the 12 mhz internal resonator as the source
  PDRUNCFG     &= ~(1 << 5);          // Power-up System Osc      
     23c:	438b      	bics	r3, r1
     23e:	6013      	str	r3, [r2, #0]
  SYSOSCCTRL    = 0x00000000;
     240:	4b1f      	ldr	r3, [pc, #124]	; (2c0 <_Z4initv+0x8c>)
     242:	1c11      	adds	r1, r2, #0
     244:	6018      	str	r0, [r3, #0]
     246:	23c8      	movs	r3, #200	; 0xc8
  for (i = 0; i < 200; i++) asm("nop");
     248:	46c0      	nop			; (mov r8, r8)
     24a:	3b01      	subs	r3, #1
     24c:	2b00      	cmp	r3, #0
     24e:	d1fb      	bne.n	248 <_Z4initv+0x14>
  SYSPLLCLKSEL  = 0x00000000;         // Select PLL Input         
     250:	4a1c      	ldr	r2, [pc, #112]	; (2c4 <_Z4initv+0x90>)
  SYSPLLCLKUEN  = 0x01;               // Update Clock Source      
     252:	2001      	movs	r0, #1

  //  run the PLL at 48 mhz using the 12 mhz internal resonator as the source
  PDRUNCFG     &= ~(1 << 5);          // Power-up System Osc      
  SYSOSCCTRL    = 0x00000000;
  for (i = 0; i < 200; i++) asm("nop");
  SYSPLLCLKSEL  = 0x00000000;         // Select PLL Input         
     254:	6013      	str	r3, [r2, #0]
  SYSPLLCLKUEN  = 0x01;               // Update Clock Source      
     256:	4a1c      	ldr	r2, [pc, #112]	; (2c8 <_Z4initv+0x94>)
     258:	6010      	str	r0, [r2, #0]
  SYSPLLCLKUEN  = 0x00;               // Toggle Update Register   
     25a:	6013      	str	r3, [r2, #0]
  SYSPLLCLKUEN  = 0x01;
     25c:	6010      	str	r0, [r2, #0]
  while (!(SYSPLLCLKUEN & 0x01));     // Wait Until Updated       
     25e:	6813      	ldr	r3, [r2, #0]
     260:	07d8      	lsls	r0, r3, #31
     262:	d5fc      	bpl.n	25e <_Z4initv+0x2a>
  SYSPLLCTRL    = 0x00000023;
     264:	4819      	ldr	r0, [pc, #100]	; (2cc <_Z4initv+0x98>)
     266:	2223      	movs	r2, #35	; 0x23
     268:	6002      	str	r2, [r0, #0]
  PDRUNCFG     &= ~(1 << 7);          // Power-up SYSPLL          
     26a:	680b      	ldr	r3, [r1, #0]
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	4393      	bics	r3, r2
     270:	600b      	str	r3, [r1, #0]
  while (!(SYSPLLSTAT & 0x01));       // Wait Until PLL Locked    
     272:	4917      	ldr	r1, [pc, #92]	; (2d0 <_Z4initv+0x9c>)
     274:	2201      	movs	r2, #1
     276:	6808      	ldr	r0, [r1, #0]
     278:	4210      	tst	r0, r2
     27a:	d0fa      	beq.n	272 <_Z4initv+0x3e>
  MAINCLKSEL    = 0x00000003;         // Select PLL Clock Output  
     27c:	4b15      	ldr	r3, [pc, #84]	; (2d4 <_Z4initv+0xa0>)
  MAINCLKUEN    = 0x01;               // Update MCLK Clock Source 
     27e:	4816      	ldr	r0, [pc, #88]	; (2d8 <_Z4initv+0xa4>)
  SYSPLLCLKUEN  = 0x01;
  while (!(SYSPLLCLKUEN & 0x01));     // Wait Until Updated       
  SYSPLLCTRL    = 0x00000023;
  PDRUNCFG     &= ~(1 << 7);          // Power-up SYSPLL          
  while (!(SYSPLLSTAT & 0x01));       // Wait Until PLL Locked    
  MAINCLKSEL    = 0x00000003;         // Select PLL Clock Output  
     280:	2103      	movs	r1, #3
     282:	6019      	str	r1, [r3, #0]
  MAINCLKUEN    = 0x01;               // Update MCLK Clock Source 
  MAINCLKUEN    = 0x00;               // Toggle Update Register   
     284:	2100      	movs	r1, #0
  while (!(SYSPLLCLKUEN & 0x01));     // Wait Until Updated       
  SYSPLLCTRL    = 0x00000023;
  PDRUNCFG     &= ~(1 << 7);          // Power-up SYSPLL          
  while (!(SYSPLLSTAT & 0x01));       // Wait Until PLL Locked    
  MAINCLKSEL    = 0x00000003;         // Select PLL Clock Output  
  MAINCLKUEN    = 0x01;               // Update MCLK Clock Source 
     286:	6002      	str	r2, [r0, #0]
  MAINCLKUEN    = 0x00;               // Toggle Update Register   
     288:	6001      	str	r1, [r0, #0]
  MAINCLKUEN    = 0x01;
     28a:	6002      	str	r2, [r0, #0]
  while (!(MAINCLKUEN & 0x01));       // Wait Until Updated       
     28c:	6803      	ldr	r3, [r0, #0]
     28e:	2201      	movs	r2, #1
     290:	4213      	tst	r3, r2
     292:	d0fb      	beq.n	28c <_Z4initv+0x58>
  
  //  enable clocks on advanced high-performance bus
  SYSAHBCLKCTRL = 0x3FFFF;
     294:	4811      	ldr	r0, [pc, #68]	; (2dc <_Z4initv+0xa8>)
     296:	4912      	ldr	r1, [pc, #72]	; (2e0 <_Z4initv+0xac>)

  //  configure timers
  //  the concept here is to run the TMR16B0 at 1 Mhz (tick per microsecond) 
  //  and run the ISR ever millisecond.
  TMR16B0PR     = 47;                  // divide the 48 Mhz clock by 48
     298:	4b12      	ldr	r3, [pc, #72]	; (2e4 <_Z4initv+0xb0>)
  MAINCLKUEN    = 0x00;               // Toggle Update Register   
  MAINCLKUEN    = 0x01;
  while (!(MAINCLKUEN & 0x01));       // Wait Until Updated       
  
  //  enable clocks on advanced high-performance bus
  SYSAHBCLKCTRL = 0x3FFFF;
     29a:	6008      	str	r0, [r1, #0]

  //  configure timers
  //  the concept here is to run the TMR16B0 at 1 Mhz (tick per microsecond) 
  //  and run the ISR ever millisecond.
  TMR16B0PR     = 47;                  // divide the 48 Mhz clock by 48
     29c:	202f      	movs	r0, #47	; 0x2f
     29e:	6018      	str	r0, [r3, #0]
  TMR16B0MCR    = 3;                   // reset and interrupt on match
     2a0:	4811      	ldr	r0, [pc, #68]	; (2e8 <_Z4initv+0xb4>)
     2a2:	2103      	movs	r1, #3
     2a4:	6001      	str	r1, [r0, #0]
  TMR16B0MR0    = 1000;                // matching on 1000
     2a6:	23fa      	movs	r3, #250	; 0xfa
     2a8:	4810      	ldr	r0, [pc, #64]	; (2ec <_Z4initv+0xb8>)
     2aa:	0099      	lsls	r1, r3, #2
  ISER          = 0x10000;             // enable timer0 interrupt
     2ac:	2380      	movs	r3, #128	; 0x80
  //  configure timers
  //  the concept here is to run the TMR16B0 at 1 Mhz (tick per microsecond) 
  //  and run the ISR ever millisecond.
  TMR16B0PR     = 47;                  // divide the 48 Mhz clock by 48
  TMR16B0MCR    = 3;                   // reset and interrupt on match
  TMR16B0MR0    = 1000;                // matching on 1000
     2ae:	6001      	str	r1, [r0, #0]
  ISER          = 0x10000;             // enable timer0 interrupt
     2b0:	0259      	lsls	r1, r3, #9
     2b2:	480f      	ldr	r0, [pc, #60]	; (2f0 <_Z4initv+0xbc>)
  TMR16B0TCR    = 0x1;                 // enable timer
     2b4:	4b0f      	ldr	r3, [pc, #60]	; (2f4 <_Z4initv+0xc0>)
  //  the concept here is to run the TMR16B0 at 1 Mhz (tick per microsecond) 
  //  and run the ISR ever millisecond.
  TMR16B0PR     = 47;                  // divide the 48 Mhz clock by 48
  TMR16B0MCR    = 3;                   // reset and interrupt on match
  TMR16B0MR0    = 1000;                // matching on 1000
  ISER          = 0x10000;             // enable timer0 interrupt
     2b6:	6001      	str	r1, [r0, #0]
  TMR16B0TCR    = 0x1;                 // enable timer
     2b8:	601a      	str	r2, [r3, #0]

}
     2ba:	4770      	bx	lr
     2bc:	40048238 	.word	0x40048238
     2c0:	40048020 	.word	0x40048020
     2c4:	40048040 	.word	0x40048040
     2c8:	40048044 	.word	0x40048044
     2cc:	40048008 	.word	0x40048008
     2d0:	4004800c 	.word	0x4004800c
     2d4:	40048070 	.word	0x40048070
     2d8:	40048074 	.word	0x40048074
     2dc:	0003ffff 	.word	0x0003ffff
     2e0:	40048080 	.word	0x40048080
     2e4:	4000c00c 	.word	0x4000c00c
     2e8:	4000c014 	.word	0x4000c014
     2ec:	4000c018 	.word	0x4000c018
     2f0:	e000e100 	.word	0xe000e100
     2f4:	4000c004 	.word	0x4000c004

000002f8 <_Z8mainmenuv>:
      mainmenu();
    }  
}

void mainmenu()
{
     2f8:	b510      	push	{r4, lr}
  Serial.println("Main Menu - Restrictor Plate v0.1");
     2fa:	4c0f      	ldr	r4, [pc, #60]	; (338 <_Z8mainmenuv+0x40>)
     2fc:	490f      	ldr	r1, [pc, #60]	; (33c <_Z8mainmenuv+0x44>)
     2fe:	1c20      	adds	r0, r4, #0
     300:	f000 fc30 	bl	b64 <_ZN5Print7printlnEPKc>
  Serial.println("1.  LED ON");
     304:	1c20      	adds	r0, r4, #0
     306:	490e      	ldr	r1, [pc, #56]	; (340 <_Z8mainmenuv+0x48>)
     308:	f000 fc2c 	bl	b64 <_ZN5Print7printlnEPKc>
  Serial.println("2.  LED OFF");
     30c:	1c20      	adds	r0, r4, #0
     30e:	490d      	ldr	r1, [pc, #52]	; (344 <_Z8mainmenuv+0x4c>)
     310:	f000 fc28 	bl	b64 <_ZN5Print7printlnEPKc>
  Serial.println("3.  MPU6050 WHO_AM_I");
     314:	1c20      	adds	r0, r4, #0
     316:	490c      	ldr	r1, [pc, #48]	; (348 <_Z8mainmenuv+0x50>)
     318:	f000 fc24 	bl	b64 <_ZN5Print7printlnEPKc>
  Serial.println("4.  Clear sleep");
     31c:	1c20      	adds	r0, r4, #0
     31e:	490b      	ldr	r1, [pc, #44]	; (34c <_Z8mainmenuv+0x54>)
     320:	f000 fc20 	bl	b64 <_ZN5Print7printlnEPKc>
  Serial.println("5.  Read X");
     324:	1c20      	adds	r0, r4, #0
     326:	490a      	ldr	r1, [pc, #40]	; (350 <_Z8mainmenuv+0x58>)
     328:	f000 fc1c 	bl	b64 <_ZN5Print7printlnEPKc>
  Serial.print("==> ");
     32c:	1c20      	adds	r0, r4, #0
     32e:	4909      	ldr	r1, [pc, #36]	; (354 <_Z8mainmenuv+0x5c>)
     330:	f000 fc03 	bl	b3a <_ZN5Print5printEPKc>
}
     334:	bd10      	pop	{r4, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	100008cc 	.word	0x100008cc
     33c:	000035ec 	.word	0x000035ec
     340:	0000360e 	.word	0x0000360e
     344:	00003619 	.word	0x00003619
     348:	00003625 	.word	0x00003625
     34c:	0000363a 	.word	0x0000363a
     350:	0000364a 	.word	0x0000364a
     354:	00003655 	.word	0x00003655

00000358 <_Z5setupv>:
#define MPU6050_TEMP_L           (uint8_t)0x42

void mainmenu();

void setup()
{
     358:	b508      	push	{r3, lr}
  Serial.begin(9600);
     35a:	2196      	movs	r1, #150	; 0x96
     35c:	0189      	lsls	r1, r1, #6
     35e:	4806      	ldr	r0, [pc, #24]	; (378 <_Z5setupv+0x20>)
     360:	f000 f9f0 	bl	744 <_ZN14HardwareSerial5beginEm>
  Wire.begin();
     364:	4805      	ldr	r0, [pc, #20]	; (37c <_Z5setupv+0x24>)
     366:	f000 fb75 	bl	a54 <_ZN7TwoWire5beginEv>
  pinMode(LEDPIN, OUTPUT);
     36a:	200e      	movs	r0, #14
     36c:	2101      	movs	r1, #1
     36e:	f7ff fef9 	bl	164 <_Z7pinModehh>
  mainmenu();
     372:	f7ff ffc1 	bl	2f8 <_Z8mainmenuv>
}
     376:	bd08      	pop	{r3, pc}
     378:	100008cc 	.word	0x100008cc
     37c:	10000a70 	.word	0x10000a70

00000380 <_Z4loopv>:

void loop()
{
     380:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(Serial.available())
     382:	4c71      	ldr	r4, [pc, #452]	; (548 <__main_stack_size+0x148>)
     384:	1c20      	adds	r0, r4, #0
     386:	f000 f903 	bl	590 <_ZN14HardwareSerial9availableEv>
     38a:	2800      	cmp	r0, #0
     38c:	d100      	bne.n	390 <_Z4loopv+0x10>
     38e:	e0c8      	b.n	522 <__main_stack_size+0x122>
    {
      ch = Serial.read();
     390:	1c20      	adds	r0, r4, #0
     392:	f000 f91b 	bl	5cc <_ZN14HardwareSerial4readEv>
     396:	4d6d      	ldr	r5, [pc, #436]	; (54c <__main_stack_size+0x14c>)
     398:	b2c1      	uxtb	r1, r0

      Serial.println(ch);
     39a:	1c20      	adds	r0, r4, #0

void loop()
{
  if(Serial.available())
    {
      ch = Serial.read();
     39c:	7029      	strb	r1, [r5, #0]

      Serial.println(ch);
     39e:	f000 fbeb 	bl	b78 <_ZN5Print7printlnEc>

      switch (ch)
     3a2:	7828      	ldrb	r0, [r5, #0]
     3a4:	3831      	subs	r0, #49	; 0x31
     3a6:	2805      	cmp	r0, #5
     3a8:	d900      	bls.n	3ac <_Z4loopv+0x2c>
     3aa:	e0b8      	b.n	51e <__main_stack_size+0x11e>
     3ac:	f001 f9d8 	bl	1760 <__gnu_thumb1_case_uqi>
     3b0:	37191003 	.word	0x37191003
     3b4:	6f4c      	.short	0x6f4c
	{
	case '1':
	  Serial.println("LED ON");
     3b6:	4966      	ldr	r1, [pc, #408]	; (550 <__main_stack_size+0x150>)
     3b8:	1c20      	adds	r0, r4, #0
     3ba:	f000 fbd3 	bl	b64 <_ZN5Print7printlnEPKc>
	  digitalWrite(LEDPIN, HIGH);
     3be:	2101      	movs	r1, #1
     3c0:	200e      	movs	r0, #14
     3c2:	f7ff fefd 	bl	1c0 <_Z12digitalWritehh>
	  Serial.println(float_test, 6);
     3c6:	4b63      	ldr	r3, [pc, #396]	; (554 <__main_stack_size+0x154>)
     3c8:	2106      	movs	r1, #6
     3ca:	681a      	ldr	r2, [r3, #0]
     3cc:	685b      	ldr	r3, [r3, #4]
     3ce:	e0a2      	b.n	516 <__main_stack_size+0x116>
	  break;
	case '2':
	  Serial.println("LED OFF");
     3d0:	1c20      	adds	r0, r4, #0
     3d2:	4961      	ldr	r1, [pc, #388]	; (558 <__main_stack_size+0x158>)
     3d4:	f000 fbc6 	bl	b64 <_ZN5Print7printlnEPKc>
	  digitalWrite(LEDPIN, LOW);
     3d8:	200e      	movs	r0, #14
     3da:	2100      	movs	r1, #0
     3dc:	f7ff fef0 	bl	1c0 <_Z12digitalWritehh>
	  break;
     3e0:	e09d      	b.n	51e <__main_stack_size+0x11e>
	case '3':
	  Serial.println("MPU6050 WHO_AM_I");
     3e2:	1c20      	adds	r0, r4, #0
     3e4:	495d      	ldr	r1, [pc, #372]	; (55c <__main_stack_size+0x15c>)
     3e6:	f000 fbbd 	bl	b64 <_ZN5Print7printlnEPKc>
	  Wire.beginTransmission(MPU6050_ADDRESS);
     3ea:	4d5d      	ldr	r5, [pc, #372]	; (560 <__main_stack_size+0x160>)
     3ec:	21d0      	movs	r1, #208	; 0xd0
     3ee:	1c28      	adds	r0, r5, #0
     3f0:	f000 fb52 	bl	a98 <_ZN7TwoWire17beginTransmissionEh>
	  Wire.requestFrom(MPU6050_WHO_AM_I,1);
     3f4:	2201      	movs	r2, #1
     3f6:	2175      	movs	r1, #117	; 0x75
     3f8:	1c28      	adds	r0, r5, #0
     3fa:	f000 fb45 	bl	a88 <_ZN7TwoWire11requestFromEii>
	  Wire.endTransmission();
     3fe:	1c28      	adds	r0, r5, #0
     400:	f000 fb5a 	bl	ab8 <_ZN7TwoWire15endTransmissionEv>
	  Serial.print("MPU6050 WHO_AM_I: 0x");
     404:	4957      	ldr	r1, [pc, #348]	; (564 <__main_stack_size+0x164>)
     406:	1c20      	adds	r0, r4, #0
     408:	f000 fb97 	bl	b3a <_ZN5Print5printEPKc>
	  Serial.println(Wire.read(), HEX);
     40c:	1c28      	adds	r0, r5, #0
     40e:	f000 fb67 	bl	ae0 <_ZN7TwoWire4readEv>
     412:	2210      	movs	r2, #16
     414:	1c01      	adds	r1, r0, #0
     416:	1c20      	adds	r0, r4, #0
     418:	f000 fbe7 	bl	bea <_ZN5Print7printlnEhi>
	  break;
     41c:	e07f      	b.n	51e <__main_stack_size+0x11e>
	case '4':
	  Serial.println("Clear sleep");
     41e:	1c20      	adds	r0, r4, #0
     420:	4951      	ldr	r1, [pc, #324]	; (568 <__main_stack_size+0x168>)
     422:	f000 fb9f 	bl	b64 <_ZN5Print7printlnEPKc>
	  Wire.beginTransmission(MPU6050_ADDRESS);
     426:	4c4e      	ldr	r4, [pc, #312]	; (560 <__main_stack_size+0x160>)
     428:	21d0      	movs	r1, #208	; 0xd0
     42a:	1c20      	adds	r0, r4, #0
     42c:	f000 fb34 	bl	a98 <_ZN7TwoWire17beginTransmissionEh>
	  Wire.write(MPU6050_PWR_MGMT_1);
     430:	1c20      	adds	r0, r4, #0
     432:	216b      	movs	r1, #107	; 0x6b
     434:	f000 fb46 	bl	ac4 <_ZN7TwoWire5writeEh>
	  Wire.write(0);
     438:	1c20      	adds	r0, r4, #0
     43a:	2100      	movs	r1, #0
     43c:	f000 fb42 	bl	ac4 <_ZN7TwoWire5writeEh>
	  Wire.endTransmission();
     440:	1c20      	adds	r0, r4, #0
     442:	f000 fb39 	bl	ab8 <_ZN7TwoWire15endTransmissionEv>
	  break;
     446:	e06a      	b.n	51e <__main_stack_size+0x11e>
	case '5':
	  Serial.println("MPU6050 X-axis");
     448:	1c20      	adds	r0, r4, #0
     44a:	4948      	ldr	r1, [pc, #288]	; (56c <__main_stack_size+0x16c>)
     44c:	f000 fb8a 	bl	b64 <_ZN5Print7printlnEPKc>
	  Wire.beginTransmission(MPU6050_ADDRESS);
     450:	4d43      	ldr	r5, [pc, #268]	; (560 <__main_stack_size+0x160>)
     452:	21d0      	movs	r1, #208	; 0xd0
     454:	1c28      	adds	r0, r5, #0
     456:	f000 fb1f 	bl	a98 <_ZN7TwoWire17beginTransmissionEh>
	  Wire.requestFrom(MPU6050_ACCEL_XOUT_H,2);
     45a:	2202      	movs	r2, #2
     45c:	213b      	movs	r1, #59	; 0x3b
     45e:	1c28      	adds	r0, r5, #0
     460:	f000 fb12 	bl	a88 <_ZN7TwoWire11requestFromEii>
	  Wire.endTransmission();
     464:	1c28      	adds	r0, r5, #0
     466:	f000 fb27 	bl	ab8 <_ZN7TwoWire15endTransmissionEv>
	  Serial.print("MPU6050 X axis: 0x");
     46a:	4941      	ldr	r1, [pc, #260]	; (570 <__main_stack_size+0x170>)
     46c:	1c20      	adds	r0, r4, #0
     46e:	f000 fb64 	bl	b3a <_ZN5Print5printEPKc>
	  Serial.println((int32_t)((Wire.read()) + (Wire.read()<<8)), HEX);
     472:	1c28      	adds	r0, r5, #0
     474:	f000 fb34 	bl	ae0 <_ZN7TwoWire4readEv>
     478:	1c06      	adds	r6, r0, #0
     47a:	1c28      	adds	r0, r5, #0
     47c:	f000 fb30 	bl	ae0 <_ZN7TwoWire4readEv>
     480:	0201      	lsls	r1, r0, #8
     482:	1871      	adds	r1, r6, r1
     484:	1c20      	adds	r0, r4, #0
     486:	2210      	movs	r2, #16
     488:	f000 fbd7 	bl	c3a <_ZN5Print7printlnEli>
	  break;
     48c:	e047      	b.n	51e <__main_stack_size+0x11e>
	case '6':
	  Serial.println("MPU6050 Temp");
     48e:	4939      	ldr	r1, [pc, #228]	; (574 <__main_stack_size+0x174>)
     490:	1c20      	adds	r0, r4, #0
     492:	f000 fb67 	bl	b64 <_ZN5Print7printlnEPKc>
	  Wire.beginTransmission(MPU6050_ADDRESS);
     496:	4d32      	ldr	r5, [pc, #200]	; (560 <__main_stack_size+0x160>)
     498:	21d0      	movs	r1, #208	; 0xd0
     49a:	1c28      	adds	r0, r5, #0
     49c:	f000 fafc 	bl	a98 <_ZN7TwoWire17beginTransmissionEh>
	  Wire.requestFrom(MPU6050_TEMP_H,2);
     4a0:	2141      	movs	r1, #65	; 0x41
     4a2:	2202      	movs	r2, #2
     4a4:	1c28      	adds	r0, r5, #0
     4a6:	f000 faef 	bl	a88 <_ZN7TwoWire11requestFromEii>
	  Wire.endTransmission();
     4aa:	1c28      	adds	r0, r5, #0
     4ac:	f000 fb04 	bl	ab8 <_ZN7TwoWire15endTransmissionEv>
	  temp_l = Wire.read();
     4b0:	1c28      	adds	r0, r5, #0
     4b2:	f000 fb15 	bl	ae0 <_ZN7TwoWire4readEv>
     4b6:	4e30      	ldr	r6, [pc, #192]	; (578 <__main_stack_size+0x178>)
     4b8:	7030      	strb	r0, [r6, #0]
	  temp_h = Wire.read();
     4ba:	1c28      	adds	r0, r5, #0
     4bc:	f000 fb10 	bl	ae0 <_ZN7TwoWire4readEv>
     4c0:	4a2e      	ldr	r2, [pc, #184]	; (57c <__main_stack_size+0x17c>)
	  //Serial.print("MPU6050 temp_l: ");
	  //Serial.println(temp_l, HEX);
	  //Serial.print("MPU6050 temp_h: ");
	  //Serial.println(temp_h, HEX);
	  temp16 = (temp_h<<8) + temp_l;
     4c2:	7831      	ldrb	r1, [r6, #0]
	  Serial.println("MPU6050 Temp");
	  Wire.beginTransmission(MPU6050_ADDRESS);
	  Wire.requestFrom(MPU6050_TEMP_H,2);
	  Wire.endTransmission();
	  temp_l = Wire.read();
	  temp_h = Wire.read();
     4c4:	7010      	strb	r0, [r2, #0]
	  //Serial.print("MPU6050 temp_l: ");
	  //Serial.println(temp_l, HEX);
	  //Serial.print("MPU6050 temp_h: ");
	  //Serial.println(temp_h, HEX);
	  temp16 = (temp_h<<8) + temp_l;
     4c6:	0200      	lsls	r0, r0, #8
     4c8:	1843      	adds	r3, r0, r1
     4ca:	4e2d      	ldr	r6, [pc, #180]	; (580 <__main_stack_size+0x180>)
     4cc:	b29d      	uxth	r5, r3
     4ce:	8035      	strh	r5, [r6, #0]
	  //Serial.print("MPU6050 temp16: ");
	  //Serial.println(temp16, DEC);
	  tempd = (temp16 / 340.0) + 36.53;
     4d0:	b228      	sxth	r0, r5
     4d2:	f002 ffcf 	bl	3474 <__aeabi_i2d>
     4d6:	4b15      	ldr	r3, [pc, #84]	; (52c <__main_stack_size+0x12c>)
     4d8:	4a13      	ldr	r2, [pc, #76]	; (528 <__main_stack_size+0x128>)
     4da:	f001 fda9 	bl	2030 <__aeabi_ddiv>
     4de:	4a14      	ldr	r2, [pc, #80]	; (530 <__main_stack_size+0x130>)
     4e0:	4b14      	ldr	r3, [pc, #80]	; (534 <__main_stack_size+0x134>)
     4e2:	f001 f9f5 	bl	18d0 <__aeabi_dadd>
     4e6:	1c02      	adds	r2, r0, #0
     4e8:	4826      	ldr	r0, [pc, #152]	; (584 <__main_stack_size+0x184>)
     4ea:	1c0b      	adds	r3, r1, #0
     4ec:	6002      	str	r2, [r0, #0]
     4ee:	6043      	str	r3, [r0, #4]
	  //Serial.print("MPU6050 temp (C): ");
	  //Serial.println(tempd);
	  tempf = (tempd)*(9.0/5.0) + 32.0;
     4f0:	1c10      	adds	r0, r2, #0
     4f2:	4a11      	ldr	r2, [pc, #68]	; (538 <__main_stack_size+0x138>)
     4f4:	4b11      	ldr	r3, [pc, #68]	; (53c <__main_stack_size+0x13c>)
     4f6:	f002 f995 	bl	2824 <__aeabi_dmul>
     4fa:	4a11      	ldr	r2, [pc, #68]	; (540 <__main_stack_size+0x140>)
     4fc:	4b11      	ldr	r3, [pc, #68]	; (544 <__main_stack_size+0x144>)
     4fe:	f001 f9e7 	bl	18d0 <__aeabi_dadd>
     502:	4d21      	ldr	r5, [pc, #132]	; (588 <__main_stack_size+0x188>)
     504:	6028      	str	r0, [r5, #0]
     506:	6069      	str	r1, [r5, #4]
	  Serial.print("MPU6050 temp (F): ");
     508:	4920      	ldr	r1, [pc, #128]	; (58c <__main_stack_size+0x18c>)
     50a:	1c20      	adds	r0, r4, #0
     50c:	f000 fb15 	bl	b3a <_ZN5Print5printEPKc>
	  Serial.println(tempf);
     510:	682a      	ldr	r2, [r5, #0]
     512:	686b      	ldr	r3, [r5, #4]
     514:	2102      	movs	r1, #2
     516:	9100      	str	r1, [sp, #0]
     518:	1c20      	adds	r0, r4, #0
     51a:	f000 fc51 	bl	dc0 <_ZN5Print7printlnEdi>
	  break;
	default:
	  break;
	}
      mainmenu();
     51e:	f7ff feeb 	bl	2f8 <_Z8mainmenuv>
    }  
}
     522:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
     524:	46c0      	nop			; (mov r8, r8)
     526:	46c0      	nop			; (mov r8, r8)
     528:	00000000 	.word	0x00000000
     52c:	40754000 	.word	0x40754000
     530:	0a3d70a4 	.word	0x0a3d70a4
     534:	404243d7 	.word	0x404243d7
     538:	cccccccd 	.word	0xcccccccd
     53c:	3ffccccc 	.word	0x3ffccccc
     540:	00000000 	.word	0x00000000
     544:	40400000 	.word	0x40400000
     548:	100008cc 	.word	0x100008cc
     54c:	10000878 	.word	0x10000878
     550:	00003612 	.word	0x00003612
     554:	10000000 	.word	0x10000000
     558:	0000361d 	.word	0x0000361d
     55c:	00003629 	.word	0x00003629
     560:	10000a70 	.word	0x10000a70
     564:	0000365a 	.word	0x0000365a
     568:	0000363e 	.word	0x0000363e
     56c:	0000366f 	.word	0x0000366f
     570:	0000367e 	.word	0x0000367e
     574:	00003691 	.word	0x00003691
     578:	1000087d 	.word	0x1000087d
     57c:	1000087c 	.word	0x1000087c
     580:	1000087a 	.word	0x1000087a
     584:	10000880 	.word	0x10000880
     588:	10000870 	.word	0x10000870
     58c:	0000369e 	.word	0x0000369e

00000590 <_ZN14HardwareSerial9availableEv>:

}

int HardwareSerial::available(void)
{
  return ((uart_rx_extract_idx-uart_rx_insert_idx)!=0);
     590:	4b03      	ldr	r3, [pc, #12]	; (5a0 <_ZN14HardwareSerial9availableEv+0x10>)
     592:	4904      	ldr	r1, [pc, #16]	; (5a4 <_ZN14HardwareSerial9availableEv+0x14>)
     594:	7818      	ldrb	r0, [r3, #0]
     596:	780a      	ldrb	r2, [r1, #0]
     598:	1a80      	subs	r0, r0, r2
     59a:	1e43      	subs	r3, r0, #1
     59c:	4198      	sbcs	r0, r3
}
     59e:	4770      	bx	lr
     5a0:	100008dc 	.word	0x100008dc
     5a4:	100008de 	.word	0x100008de

000005a8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (uart_rx_extract_idx==uart_rx_insert_idx) {
     5a8:	4b05      	ldr	r3, [pc, #20]	; (5c0 <_ZN14HardwareSerial4peekEv+0x18>)
     5aa:	4a06      	ldr	r2, [pc, #24]	; (5c4 <_ZN14HardwareSerial4peekEv+0x1c>)
     5ac:	7818      	ldrb	r0, [r3, #0]
     5ae:	7811      	ldrb	r1, [r2, #0]
     5b0:	4281      	cmp	r1, r0
     5b2:	d002      	beq.n	5ba <_ZN14HardwareSerial4peekEv+0x12>
    return -1;
  } else {
    return uart_rx_buffer[uart_rx_extract_idx];
     5b4:	4b04      	ldr	r3, [pc, #16]	; (5c8 <_ZN14HardwareSerial4peekEv+0x20>)
     5b6:	5c18      	ldrb	r0, [r3, r0]
     5b8:	e001      	b.n	5be <_ZN14HardwareSerial4peekEv+0x16>
}

int HardwareSerial::peek(void)
{
  if (uart_rx_extract_idx==uart_rx_insert_idx) {
    return -1;
     5ba:	2001      	movs	r0, #1
     5bc:	4240      	negs	r0, r0
  } else {
    return uart_rx_buffer[uart_rx_extract_idx];
  }
}
     5be:	4770      	bx	lr
     5c0:	100008dc 	.word	0x100008dc
     5c4:	100008de 	.word	0x100008de
     5c8:	10000888 	.word	0x10000888

000005cc <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  uint8_t ch;
  
  if (uart_rx_insert_idx == uart_rx_extract_idx) // check if character is available
     5cc:	4a07      	ldr	r2, [pc, #28]	; (5ec <_ZN14HardwareSerial4readEv+0x20>)
     5ce:	4908      	ldr	r1, [pc, #32]	; (5f0 <_ZN14HardwareSerial4readEv+0x24>)
     5d0:	7813      	ldrb	r3, [r2, #0]
     5d2:	7808      	ldrb	r0, [r1, #0]
     5d4:	4298      	cmp	r0, r3
     5d6:	d006      	beq.n	5e6 <_ZN14HardwareSerial4readEv+0x1a>
    return -1;

  ch = uart_rx_buffer[uart_rx_extract_idx++]; // get character, bump pointer
     5d8:	4906      	ldr	r1, [pc, #24]	; (5f4 <_ZN14HardwareSerial4readEv+0x28>)
     5da:	5cc8      	ldrb	r0, [r1, r3]
     5dc:	3301      	adds	r3, #1
  uart_rx_extract_idx %= UART_RX_BUFFER_LENGTH; // limit the pointer
     5de:	213f      	movs	r1, #63	; 0x3f
     5e0:	400b      	ands	r3, r1
     5e2:	7013      	strb	r3, [r2, #0]
  return ch;
     5e4:	e001      	b.n	5ea <_ZN14HardwareSerial4readEv+0x1e>
int HardwareSerial::read(void)
{
  uint8_t ch;
  
  if (uart_rx_insert_idx == uart_rx_extract_idx) // check if character is available
    return -1;
     5e6:	2201      	movs	r2, #1
     5e8:	4250      	negs	r0, r2

  ch = uart_rx_buffer[uart_rx_extract_idx++]; // get character, bump pointer
  uart_rx_extract_idx %= UART_RX_BUFFER_LENGTH; // limit the pointer
  return ch;
}
     5ea:	4770      	bx	lr
     5ec:	100008dc 	.word	0x100008dc
     5f0:	100008de 	.word	0x100008de
     5f4:	10000888 	.word	0x10000888

000005f8 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{

}
     5f8:	4770      	bx	lr
	...

000005fc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t ch)
{
     5fc:	b570      	push	{r4, r5, r6, lr}
  uint16_t temp;

  temp = (uart_tx_insert_idx + 1) % UART_TX_BUFFER_LENGTH;
     5fe:	4811      	ldr	r0, [pc, #68]	; (644 <_ZN14HardwareSerial5writeEh+0x48>)

  if (temp == uart_tx_extract_idx)
     600:	4b11      	ldr	r3, [pc, #68]	; (648 <_ZN14HardwareSerial5writeEh+0x4c>)

size_t HardwareSerial::write(uint8_t ch)
{
  uint16_t temp;

  temp = (uart_tx_insert_idx + 1) % UART_TX_BUFFER_LENGTH;
     602:	7805      	ldrb	r5, [r0, #0]

  if (temp == uart_tx_extract_idx)
     604:	781a      	ldrb	r2, [r3, #0]

size_t HardwareSerial::write(uint8_t ch)
{
  uint16_t temp;

  temp = (uart_tx_insert_idx + 1) % UART_TX_BUFFER_LENGTH;
     606:	1c6c      	adds	r4, r5, #1
     608:	b2e4      	uxtb	r4, r4

  if (temp == uart_tx_extract_idx)
     60a:	42a2      	cmp	r2, r4
     60c:	d017      	beq.n	63e <_ZN14HardwareSerial5writeEh+0x42>
    return -1;                          // no room
  
  //NVIC_DisableIRQ(UART_IRQn);
  bitClear(ISER,21);
     60e:	4b0f      	ldr	r3, [pc, #60]	; (64c <_ZN14HardwareSerial5writeEh+0x50>)
     610:	4a0f      	ldr	r2, [pc, #60]	; (650 <_ZN14HardwareSerial5writeEh+0x54>)
     612:	681e      	ldr	r6, [r3, #0]
     614:	4032      	ands	r2, r6
     616:	601a      	str	r2, [r3, #0]

  // check if in process of sending data
  if (uart_tx_running)
     618:	4a0e      	ldr	r2, [pc, #56]	; (654 <_ZN14HardwareSerial5writeEh+0x58>)
     61a:	7816      	ldrb	r6, [r2, #0]
     61c:	2e00      	cmp	r6, #0
     61e:	d003      	beq.n	628 <_ZN14HardwareSerial5writeEh+0x2c>
    {
      // add to queue
      uart_tx_buffer[uart_tx_insert_idx] = (uint8_t)ch;
     620:	4a0d      	ldr	r2, [pc, #52]	; (658 <_ZN14HardwareSerial5writeEh+0x5c>)
      uart_tx_insert_idx = temp;
     622:	7004      	strb	r4, [r0, #0]

  // check if in process of sending data
  if (uart_tx_running)
    {
      // add to queue
      uart_tx_buffer[uart_tx_insert_idx] = (uint8_t)ch;
     624:	5551      	strb	r1, [r2, r5]
     626:	e003      	b.n	630 <_ZN14HardwareSerial5writeEh+0x34>
    }
  else
    {
      // set running flag and write to output register
      uart_tx_running = 1;
      U0THR = (uint8_t)ch;
     628:	4d0c      	ldr	r5, [pc, #48]	; (65c <_ZN14HardwareSerial5writeEh+0x60>)
      uart_tx_insert_idx = temp;
    }
  else
    {
      // set running flag and write to output register
      uart_tx_running = 1;
     62a:	2001      	movs	r0, #1
     62c:	7010      	strb	r0, [r2, #0]
      U0THR = (uint8_t)ch;
     62e:	6029      	str	r1, [r5, #0]
    }

  bitSet(ISER,21);
     630:	681c      	ldr	r4, [r3, #0]
     632:	2680      	movs	r6, #128	; 0x80
     634:	03b0      	lsls	r0, r6, #14
     636:	4320      	orrs	r0, r4
     638:	6018      	str	r0, [r3, #0]

  return (uint8_t)ch;
     63a:	1c08      	adds	r0, r1, #0
     63c:	e001      	b.n	642 <_ZN14HardwareSerial5writeEh+0x46>
  uint16_t temp;

  temp = (uart_tx_insert_idx + 1) % UART_TX_BUFFER_LENGTH;

  if (temp == uart_tx_extract_idx)
    return -1;                          // no room
     63e:	2101      	movs	r1, #1
     640:	4248      	negs	r0, r1
    }

  bitSet(ISER,21);

  return (uint8_t)ch;
}
     642:	bd70      	pop	{r4, r5, r6, pc}
     644:	100008c9 	.word	0x100008c9
     648:	100008e0 	.word	0x100008e0
     64c:	e000e100 	.word	0xe000e100
     650:	ffdfffff 	.word	0xffdfffff
     654:	100008dd 	.word	0x100008dd
     658:	100008e1 	.word	0x100008e1
     65c:	40008000 	.word	0x40008000

00000660 <_Z15UART_IRQHandlerv>:
uint8_t uart_tx_insert_idx, uart_tx_extract_idx;
uint8_t uart_tx_running;
#define uart_data_available() ((uart_rx_extract_idx-uart_rx_insert_idx)!=0)

//  UART handler
void UART_IRQHandler(void) {
     660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
          if (temp != uart_rx_extract_idx)			  
     662:	4b26      	ldr	r3, [pc, #152]	; (6fc <_Z15UART_IRQHandlerv+0x9c>)
     664:	4c26      	ldr	r4, [pc, #152]	; (700 <_Z15UART_IRQHandlerv+0xa0>)
	    uart_rx_insert_idx = temp;                            
	} while (U0LSR & 0x01);
	break;
      case (1 << 1):               		    // THR Empty
	while (U0LSR & 0x20) {
	  if (uart_tx_insert_idx != uart_tx_extract_idx) {	   
     666:	4927      	ldr	r1, [pc, #156]	; (704 <_Z15UART_IRQHandlerv+0xa4>)
     668:	4a27      	ldr	r2, [pc, #156]	; (708 <_Z15UART_IRQHandlerv+0xa8>)
     66a:	4d28      	ldr	r5, [pc, #160]	; (70c <_Z15UART_IRQHandlerv+0xac>)
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
          if (temp != uart_rx_extract_idx)			  
     66c:	7818      	ldrb	r0, [r3, #0]
	    uart_rx_insert_idx = temp;                            
	} while (U0LSR & 0x01);
	break;
      case (1 << 1):               		    // THR Empty
	while (U0LSR & 0x20) {
	  if (uart_tx_insert_idx != uart_tx_extract_idx) {	   
     66e:	780e      	ldrb	r6, [r1, #0]
     670:	7823      	ldrb	r3, [r4, #0]
     672:	7812      	ldrb	r2, [r2, #0]
     674:	782c      	ldrb	r4, [r5, #0]
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
          if (temp != uart_rx_extract_idx)			  
     676:	9001      	str	r0, [sp, #4]

//  UART handler
void UART_IRQHandler(void) {
  static volatile uint8_t iid, temp;

  while (((iid = U0IIR) & 0x01) == 0) {            // Service all interrupts
     678:	4f25      	ldr	r7, [pc, #148]	; (710 <_Z15UART_IRQHandlerv+0xb0>)
     67a:	4926      	ldr	r1, [pc, #152]	; (714 <_Z15UART_IRQHandlerv+0xb4>)
     67c:	6838      	ldr	r0, [r7, #0]
     67e:	b2c5      	uxtb	r5, r0
     680:	700d      	strb	r5, [r1, #0]
     682:	07c5      	lsls	r5, r0, #31
     684:	d432      	bmi.n	6ec <_Z15UART_IRQHandlerv+0x8c>
    switch (iid & 0x0E) {	                    
     686:	7808      	ldrb	r0, [r1, #0]
     688:	270e      	movs	r7, #14
     68a:	4038      	ands	r0, r7
     68c:	3802      	subs	r0, #2
     68e:	4922      	ldr	r1, [pc, #136]	; (718 <_Z15UART_IRQHandlerv+0xb8>)
     690:	280a      	cmp	r0, #10
     692:	d827      	bhi.n	6e4 <_Z15UART_IRQHandlerv+0x84>
     694:	f001 f864 	bl	1760 <__gnu_thumb1_case_uqi>
     698:	26092618 	.word	0x26092618
     69c:	26262628 	.word	0x26262628
     6a0:	2626      	.short	0x2626
     6a2:	09          	.byte	0x09
     6a3:	00          	.byte	0x00
      case (3 << 1):                                // Receive Line Status
	U0LSR;                                     // Read LSR to clear
	break;
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
     6a4:	6808      	ldr	r0, [r1, #0]
     6a6:	07c7      	lsls	r7, r0, #31
     6a8:	d5e6      	bpl.n	678 <_Z15UART_IRQHandlerv+0x18>
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
     6aa:	203f      	movs	r0, #63	; 0x3f
     6ac:	1c55      	adds	r5, r2, #1
     6ae:	4005      	ands	r5, r0
     6b0:	481a      	ldr	r0, [pc, #104]	; (71c <_Z15UART_IRQHandlerv+0xbc>)
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
     6b2:	4f1b      	ldr	r7, [pc, #108]	; (720 <_Z15UART_IRQHandlerv+0xc0>)
	U0LSR;                                     // Read LSR to clear
	break;
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
     6b4:	7005      	strb	r5, [r0, #0]
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
     6b6:	683d      	ldr	r5, [r7, #0]
     6b8:	4f1a      	ldr	r7, [pc, #104]	; (724 <_Z15UART_IRQHandlerv+0xc4>)
     6ba:	54bd      	strb	r5, [r7, r2]
          if (temp != uart_rx_extract_idx)			  
     6bc:	7807      	ldrb	r7, [r0, #0]
     6be:	9d01      	ldr	r5, [sp, #4]
     6c0:	42af      	cmp	r7, r5
     6c2:	d0ef      	beq.n	6a4 <_Z15UART_IRQHandlerv+0x44>
	    uart_rx_insert_idx = temp;                            
     6c4:	7802      	ldrb	r2, [r0, #0]
     6c6:	e7ed      	b.n	6a4 <_Z15UART_IRQHandlerv+0x44>
	} while (U0LSR & 0x01);
	break;
      case (1 << 1):               		    // THR Empty
	while (U0LSR & 0x20) {
     6c8:	6809      	ldr	r1, [r1, #0]
     6ca:	0688      	lsls	r0, r1, #26
     6cc:	d5d4      	bpl.n	678 <_Z15UART_IRQHandlerv+0x18>
	  if (uart_tx_insert_idx != uart_tx_extract_idx) {	   
     6ce:	429e      	cmp	r6, r3
     6d0:	d101      	bne.n	6d6 <_Z15UART_IRQHandlerv+0x76>
	    U0THR = uart_tx_buffer[uart_tx_extract_idx++];
	    uart_tx_extract_idx %= UART_TX_BUFFER_LENGTH;
	  } else
	    uart_tx_running = 0;       				   
     6d2:	2400      	movs	r4, #0
     6d4:	e7d0      	b.n	678 <_Z15UART_IRQHandlerv+0x18>
	} while (U0LSR & 0x01);
	break;
      case (1 << 1):               		    // THR Empty
	while (U0LSR & 0x20) {
	  if (uart_tx_insert_idx != uart_tx_extract_idx) {	   
	    U0THR = uart_tx_buffer[uart_tx_extract_idx++];
     6d6:	4f14      	ldr	r7, [pc, #80]	; (728 <_Z15UART_IRQHandlerv+0xc8>)
     6d8:	4811      	ldr	r0, [pc, #68]	; (720 <_Z15UART_IRQHandlerv+0xc0>)
     6da:	5cfd      	ldrb	r5, [r7, r3]
     6dc:	3301      	adds	r3, #1
     6de:	6005      	str	r5, [r0, #0]
     6e0:	b2db      	uxtb	r3, r3
     6e2:	e7c9      	b.n	678 <_Z15UART_IRQHandlerv+0x18>
	    uart_tx_running = 0;       				   
	  break;
        }
	break;
      default:           			    // Unknown Interrupt
        U0LSR;
     6e4:	6809      	ldr	r1, [r1, #0]
	U0RBR;
     6e6:	490e      	ldr	r1, [pc, #56]	; (720 <_Z15UART_IRQHandlerv+0xc0>)
     6e8:	6809      	ldr	r1, [r1, #0]
	break;
     6ea:	e7c5      	b.n	678 <_Z15UART_IRQHandlerv+0x18>
     6ec:	4e06      	ldr	r6, [pc, #24]	; (708 <_Z15UART_IRQHandlerv+0xa8>)
    }
  }
}
     6ee:	7032      	strb	r2, [r6, #0]
     6f0:	4a03      	ldr	r2, [pc, #12]	; (700 <_Z15UART_IRQHandlerv+0xa0>)
     6f2:	7013      	strb	r3, [r2, #0]
     6f4:	4b05      	ldr	r3, [pc, #20]	; (70c <_Z15UART_IRQHandlerv+0xac>)
     6f6:	701c      	strb	r4, [r3, #0]
     6f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	100008dc 	.word	0x100008dc
     700:	100008e0 	.word	0x100008e0
     704:	100008c9 	.word	0x100008c9
     708:	100008de 	.word	0x100008de
     70c:	100008dd 	.word	0x100008dd
     710:	40008008 	.word	0x40008008
     714:	100008df 	.word	0x100008df
     718:	40008014 	.word	0x40008014
     71c:	100008c8 	.word	0x100008c8
     720:	40008000 	.word	0x40008000
     724:	10000888 	.word	0x10000888
     728:	100008e1 	.word	0x100008e1

0000072c <_ZN14HardwareSerialC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     72c:	2300      	movs	r3, #0
     72e:	6043      	str	r3, [r0, #4]

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial()
     730:	4b03      	ldr	r3, [pc, #12]	; (740 <_ZN14HardwareSerialC1Ev+0x14>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     732:	21fa      	movs	r1, #250	; 0xfa
     734:	008a      	lsls	r2, r1, #2
     736:	3308      	adds	r3, #8
     738:	6082      	str	r2, [r0, #8]
     73a:	6003      	str	r3, [r0, #0]
{

}
     73c:	4770      	bx	lr
     73e:	46c0      	nop			; (mov r8, r8)
     740:	000036b8 	.word	0x000036b8

00000744 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
  IOCON_PIO1_6 = 0xD1;  // UART RXD
     744:	4a1c      	ldr	r2, [pc, #112]	; (7b8 <_ZN14HardwareSerial5beginEm+0x74>)
  IOCON_PIO1_7 = 0xD1;  // UART TXD
     746:	481d      	ldr	r0, [pc, #116]	; (7bc <_ZN14HardwareSerial5beginEm+0x78>)

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
  IOCON_PIO1_6 = 0xD1;  // UART RXD
     748:	23d1      	movs	r3, #209	; 0xd1
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     74a:	b510      	push	{r4, lr}
  IOCON_PIO1_6 = 0xD1;  // UART RXD
     74c:	6013      	str	r3, [r2, #0]
  IOCON_PIO1_7 = 0xD1;  // UART TXD
     74e:	6003      	str	r3, [r0, #0]

  //  UART Setup -> Serial.begin()
  UARTCLKDIV = 0x1;
     750:	4b1b      	ldr	r3, [pc, #108]	; (7c0 <_ZN14HardwareSerial5beginEm+0x7c>)
     752:	2401      	movs	r4, #1
     754:	601c      	str	r4, [r3, #0]
  U0LCR = 0x83;             	 
     756:	4c1b      	ldr	r4, [pc, #108]	; (7c4 <_ZN14HardwareSerial5beginEm+0x80>)
     758:	2283      	movs	r2, #131	; 0x83
     75a:	6022      	str	r2, [r4, #0]
  U0DLM = (48000000 / 16 / baud ) / 256;
     75c:	481a      	ldr	r0, [pc, #104]	; (7c8 <_ZN14HardwareSerial5beginEm+0x84>)
     75e:	f001 f809 	bl	1774 <__aeabi_uidiv>
     762:	491a      	ldr	r1, [pc, #104]	; (7cc <_ZN14HardwareSerial5beginEm+0x88>)
     764:	0a03      	lsrs	r3, r0, #8
     766:	600b      	str	r3, [r1, #0]
  U0DLL = (48000000 / 16 / baud ) % 256;
     768:	4b19      	ldr	r3, [pc, #100]	; (7d0 <_ZN14HardwareSerial5beginEm+0x8c>)
     76a:	b2c0      	uxtb	r0, r0
     76c:	6018      	str	r0, [r3, #0]
  U0LCR = 0x03;				
     76e:	2203      	movs	r2, #3
  U0FCR = 0x07;				
     770:	4818      	ldr	r0, [pc, #96]	; (7d4 <_ZN14HardwareSerial5beginEm+0x90>)
  //  UART Setup -> Serial.begin()
  UARTCLKDIV = 0x1;
  U0LCR = 0x83;             	 
  U0DLM = (48000000 / 16 / baud ) / 256;
  U0DLL = (48000000 / 16 / baud ) % 256;
  U0LCR = 0x03;				
     772:	6022      	str	r2, [r4, #0]
  U0FCR = 0x07;				
     774:	2407      	movs	r4, #7
  U0LSR;				
     776:	4a18      	ldr	r2, [pc, #96]	; (7d8 <_ZN14HardwareSerial5beginEm+0x94>)
  UARTCLKDIV = 0x1;
  U0LCR = 0x83;             	 
  U0DLM = (48000000 / 16 / baud ) / 256;
  U0DLL = (48000000 / 16 / baud ) % 256;
  U0LCR = 0x03;				
  U0FCR = 0x07;				
     778:	6004      	str	r4, [r0, #0]
  U0LSR;				
     77a:	6810      	ldr	r0, [r2, #0]
     77c:	1c1c      	adds	r4, r3, #0
  while (( U0LSR & 0x60) != 0x60 );	
     77e:	6810      	ldr	r0, [r2, #0]
     780:	2360      	movs	r3, #96	; 0x60
     782:	4003      	ands	r3, r0
     784:	2b60      	cmp	r3, #96	; 0x60
     786:	d1fa      	bne.n	77e <_ZN14HardwareSerial5beginEm+0x3a>
  while ( U0LSR & 0x01 ) { U0RBR; }
     788:	6813      	ldr	r3, [r2, #0]
     78a:	2001      	movs	r0, #1
     78c:	4003      	ands	r3, r0
     78e:	d001      	beq.n	794 <_ZN14HardwareSerial5beginEm+0x50>
     790:	6823      	ldr	r3, [r4, #0]
     792:	e7f9      	b.n	788 <_ZN14HardwareSerial5beginEm+0x44>
  uart_tx_extract_idx = uart_tx_insert_idx = 0;
     794:	4a11      	ldr	r2, [pc, #68]	; (7dc <_ZN14HardwareSerial5beginEm+0x98>)
     796:	4c12      	ldr	r4, [pc, #72]	; (7e0 <_ZN14HardwareSerial5beginEm+0x9c>)
     798:	7013      	strb	r3, [r2, #0]
     79a:	7023      	strb	r3, [r4, #0]
  uart_rx_extract_idx = uart_rx_insert_idx = 0;
     79c:	4811      	ldr	r0, [pc, #68]	; (7e4 <_ZN14HardwareSerial5beginEm+0xa0>)
     79e:	4a12      	ldr	r2, [pc, #72]	; (7e8 <_ZN14HardwareSerial5beginEm+0xa4>)
  uart_tx_running = 0;
     7a0:	4c12      	ldr	r4, [pc, #72]	; (7ec <_ZN14HardwareSerial5beginEm+0xa8>)
  U0FCR = 0x07;				
  U0LSR;				
  while (( U0LSR & 0x60) != 0x60 );	
  while ( U0LSR & 0x01 ) { U0RBR; }
  uart_tx_extract_idx = uart_tx_insert_idx = 0;
  uart_rx_extract_idx = uart_rx_insert_idx = 0;
     7a2:	7003      	strb	r3, [r0, #0]
     7a4:	7013      	strb	r3, [r2, #0]
  uart_tx_running = 0;
     7a6:	7023      	strb	r3, [r4, #0]
  ISER = 0x200000;
     7a8:	4a11      	ldr	r2, [pc, #68]	; (7f0 <_ZN14HardwareSerial5beginEm+0xac>)
     7aa:	2380      	movs	r3, #128	; 0x80
     7ac:	0398      	lsls	r0, r3, #14
  U0IER = 0x07;
     7ae:	2407      	movs	r4, #7
  while (( U0LSR & 0x60) != 0x60 );	
  while ( U0LSR & 0x01 ) { U0RBR; }
  uart_tx_extract_idx = uart_tx_insert_idx = 0;
  uart_rx_extract_idx = uart_rx_insert_idx = 0;
  uart_tx_running = 0;
  ISER = 0x200000;
     7b0:	6010      	str	r0, [r2, #0]
  U0IER = 0x07;
     7b2:	600c      	str	r4, [r1, #0]
}
     7b4:	bd10      	pop	{r4, pc}
     7b6:	46c0      	nop			; (mov r8, r8)
     7b8:	400440a4 	.word	0x400440a4
     7bc:	400440a8 	.word	0x400440a8
     7c0:	40048098 	.word	0x40048098
     7c4:	4000800c 	.word	0x4000800c
     7c8:	002dc6c0 	.word	0x002dc6c0
     7cc:	40008004 	.word	0x40008004
     7d0:	40008000 	.word	0x40008000
     7d4:	40008008 	.word	0x40008008
     7d8:	40008014 	.word	0x40008014
     7dc:	100008c9 	.word	0x100008c9
     7e0:	100008e0 	.word	0x100008e0
     7e4:	100008de 	.word	0x100008de
     7e8:	100008dc 	.word	0x100008dc
     7ec:	100008dd 	.word	0x100008dd
     7f0:	e000e100 	.word	0xe000e100

000007f4 <_GLOBAL__sub_I_uart_rx_buffer>:
	return true;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial = HardwareSerial();
     7f4:	b508      	push	{r3, lr}
     7f6:	4802      	ldr	r0, [pc, #8]	; (800 <_GLOBAL__sub_I_uart_rx_buffer+0xc>)
     7f8:	f7ff ff98 	bl	72c <_ZN14HardwareSerialC1Ev>
     7fc:	bd08      	pop	{r3, pc}
     7fe:	46c0      	nop			; (mov r8, r8)
     800:	100008cc 	.word	0x100008cc

00000804 <main>:
#include <Arduino.h>

int main(void)
{
     804:	b508      	push	{r3, lr}
  init();
     806:	f7ff fd15 	bl	234 <_Z4initv>

#if defined(USBCON)
  USBDevice.attach();
#endif

  setup();
     80a:	f7ff fda5 	bl	358 <_Z5setupv>
    
  for (;;) {
    loop();
     80e:	f7ff fdb7 	bl	380 <_Z4loopv>
     812:	e7fc      	b.n	80e <main+0xa>

00000814 <_Z14I2C_IRQHandlerv>:

void I2C_IRQHandler(void) 
{
  uint8_t StatValue;

  timeout = 0;
     814:	4b47      	ldr	r3, [pc, #284]	; (934 <_Z14I2C_IRQHandlerv+0x120>)
     816:	2100      	movs	r1, #0
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
     818:	4847      	ldr	r0, [pc, #284]	; (938 <_Z14I2C_IRQHandlerv+0x124>)

volatile uint32_t RdIndex = 0;
volatile uint32_t WrIndex = 0;

void I2C_IRQHandler(void) 
{
     81a:	b510      	push	{r4, lr}
  uint8_t StatValue;

  timeout = 0;
     81c:	6019      	str	r1, [r3, #0]
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
     81e:	6802      	ldr	r2, [r0, #0]
}


// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     820:	b2d4      	uxtb	r4, r2
     822:	4a46      	ldr	r2, [pc, #280]	; (93c <_Z14I2C_IRQHandlerv+0x128>)
  uint8_t StatValue;

  timeout = 0;
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
  switch ( StatValue )
     824:	2c28      	cmp	r4, #40	; 0x28
     826:	d042      	beq.n	8ae <_Z14I2C_IRQHandlerv+0x9a>
     828:	dc0c      	bgt.n	844 <_Z14I2C_IRQHandlerv+0x30>
     82a:	2c10      	cmp	r4, #16
     82c:	d027      	beq.n	87e <_Z14I2C_IRQHandlerv+0x6a>
     82e:	dc04      	bgt.n	83a <_Z14I2C_IRQHandlerv+0x26>
     830:	2c08      	cmp	r4, #8
     832:	d179      	bne.n	928 <_Z14I2C_IRQHandlerv+0x114>
  {
	case 0x08:			/* A Start condition is issued. */
	WrIndex = 0;
     834:	4b42      	ldr	r3, [pc, #264]	; (940 <_Z14I2C_IRQHandlerv+0x12c>)
     836:	6019      	str	r1, [r3, #0]
     838:	e024      	b.n	884 <_Z14I2C_IRQHandlerv+0x70>
  uint8_t StatValue;

  timeout = 0;
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
  switch ( StatValue )
     83a:	2c18      	cmp	r4, #24
     83c:	d02b      	beq.n	896 <_Z14I2C_IRQHandlerv+0x82>
     83e:	2c20      	cmp	r4, #32
     840:	d172      	bne.n	928 <_Z14I2C_IRQHandlerv+0x114>
     842:	e069      	b.n	918 <_Z14I2C_IRQHandlerv+0x104>
     844:	2c48      	cmp	r4, #72	; 0x48
     846:	d067      	beq.n	918 <_Z14I2C_IRQHandlerv+0x104>
     848:	dc05      	bgt.n	856 <_Z14I2C_IRQHandlerv+0x42>
     84a:	2c30      	cmp	r4, #48	; 0x30
     84c:	d048      	beq.n	8e0 <_Z14I2C_IRQHandlerv+0xcc>
     84e:	2c40      	cmp	r4, #64	; 0x40
     850:	d16a      	bne.n	928 <_Z14I2C_IRQHandlerv+0x114>
	 I2CMasterState = I2C_NACK_ON_DATA;
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x40:	/* Master Receive, SLA_R has been sent */
	 if ( (RdIndex + 1) < I2CReadLength )
     852:	4b3c      	ldr	r3, [pc, #240]	; (944 <_Z14I2C_IRQHandlerv+0x130>)
     854:	e053      	b.n	8fe <_Z14I2C_IRQHandlerv+0xea>
  uint8_t StatValue;

  timeout = 0;
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
  switch ( StatValue )
     856:	2c50      	cmp	r4, #80	; 0x50
     858:	d048      	beq.n	8ec <_Z14I2C_IRQHandlerv+0xd8>
     85a:	2c58      	cmp	r4, #88	; 0x58
     85c:	d164      	bne.n	928 <_Z14I2C_IRQHandlerv+0x114>
	 }
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x58:
	 I2CSlaveBuffer[RdIndex++] = I2C0DAT;
     85e:	4b39      	ldr	r3, [pc, #228]	; (944 <_Z14I2C_IRQHandlerv+0x130>)
     860:	4839      	ldr	r0, [pc, #228]	; (948 <_Z14I2C_IRQHandlerv+0x134>)
     862:	6819      	ldr	r1, [r3, #0]
     864:	6804      	ldr	r4, [r0, #0]
     866:	4839      	ldr	r0, [pc, #228]	; (94c <_Z14I2C_IRQHandlerv+0x138>)
     868:	b2e4      	uxtb	r4, r4
     86a:	5444      	strb	r4, [r0, r1]
     86c:	3101      	adds	r1, #1
     86e:	6019      	str	r1, [r3, #0]
	 I2CMasterState = I2C_OK;
     870:	4b37      	ldr	r3, [pc, #220]	; (950 <_Z14I2C_IRQHandlerv+0x13c>)
     872:	210c      	movs	r1, #12
	 I2C0CONSET = I2CONSET_STO;	/* Set Stop flag */ 
     874:	2480      	movs	r4, #128	; 0x80
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x58:
	 I2CSlaveBuffer[RdIndex++] = I2C0DAT;
	 I2CMasterState = I2C_OK;
     876:	6019      	str	r1, [r3, #0]
	 I2C0CONSET = I2CONSET_STO;	/* Set Stop flag */ 
     878:	2110      	movs	r1, #16
     87a:	05e3      	lsls	r3, r4, #23
     87c:	e056      	b.n	92c <_Z14I2C_IRQHandlerv+0x118>
	I2C0DAT = I2CMasterBuffer[WrIndex++];
	I2C0CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
	break;
	
	case 0x10:			/* A repeated started is issued */
	RdIndex = 0;
     87e:	4b31      	ldr	r3, [pc, #196]	; (944 <_Z14I2C_IRQHandlerv+0x130>)
     880:	6019      	str	r1, [r3, #0]
	/* Send SLA with R bit set, */
	I2C0DAT = I2CMasterBuffer[WrIndex++];
     882:	4b2f      	ldr	r3, [pc, #188]	; (940 <_Z14I2C_IRQHandlerv+0x12c>)
     884:	6819      	ldr	r1, [r3, #0]
     886:	4833      	ldr	r0, [pc, #204]	; (954 <_Z14I2C_IRQHandlerv+0x140>)
     888:	5c44      	ldrb	r4, [r0, r1]
     88a:	482f      	ldr	r0, [pc, #188]	; (948 <_Z14I2C_IRQHandlerv+0x134>)
     88c:	3101      	adds	r1, #1
     88e:	6004      	str	r4, [r0, #0]
     890:	6019      	str	r1, [r3, #0]
	I2C0CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
     892:	2328      	movs	r3, #40	; 0x28
     894:	e04c      	b.n	930 <_Z14I2C_IRQHandlerv+0x11c>
	break;
	
	case 0x18:			/* Regardless, it's a ACK */
	if ( I2CWriteLength == 1 )
     896:	4930      	ldr	r1, [pc, #192]	; (958 <_Z14I2C_IRQHandlerv+0x144>)
     898:	680b      	ldr	r3, [r1, #0]
     89a:	2b01      	cmp	r3, #1
     89c:	d105      	bne.n	8aa <_Z14I2C_IRQHandlerv+0x96>
	{
	  I2C0CONSET = I2CONSET_STO;      /* Set Stop flag */
     89e:	2480      	movs	r4, #128	; 0x80
     8a0:	05e1      	lsls	r1, r4, #23
     8a2:	2010      	movs	r0, #16
     8a4:	6008      	str	r0, [r1, #0]
	  I2CMasterState = I2C_NO_DATA;
     8a6:	2107      	movs	r1, #7
     8a8:	e03f      	b.n	92a <_Z14I2C_IRQHandlerv+0x116>
	}
	else
	 {
	   I2C0DAT = I2CMasterBuffer[WrIndex++];
     8aa:	4b25      	ldr	r3, [pc, #148]	; (940 <_Z14I2C_IRQHandlerv+0x12c>)
     8ac:	e005      	b.n	8ba <_Z14I2C_IRQHandlerv+0xa6>
	 }
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
	 if ( WrIndex < I2CWriteLength )
     8ae:	4b24      	ldr	r3, [pc, #144]	; (940 <_Z14I2C_IRQHandlerv+0x12c>)
     8b0:	4c29      	ldr	r4, [pc, #164]	; (958 <_Z14I2C_IRQHandlerv+0x144>)
     8b2:	6818      	ldr	r0, [r3, #0]
     8b4:	6821      	ldr	r1, [r4, #0]
     8b6:	4288      	cmp	r0, r1
     8b8:	d206      	bcs.n	8c8 <_Z14I2C_IRQHandlerv+0xb4>
	 {   
	   I2C0DAT = I2CMasterBuffer[WrIndex++]; /* this should be the last one */
     8ba:	6819      	ldr	r1, [r3, #0]
     8bc:	4825      	ldr	r0, [pc, #148]	; (954 <_Z14I2C_IRQHandlerv+0x140>)
     8be:	5c44      	ldrb	r4, [r0, r1]
     8c0:	4821      	ldr	r0, [pc, #132]	; (948 <_Z14I2C_IRQHandlerv+0x134>)
     8c2:	3101      	adds	r1, #1
     8c4:	6004      	str	r4, [r0, #0]
     8c6:	e031      	b.n	92c <_Z14I2C_IRQHandlerv+0x118>
	 }
	 else
	 {
	   if ( I2CReadLength != 0 )
     8c8:	4b24      	ldr	r3, [pc, #144]	; (95c <_Z14I2C_IRQHandlerv+0x148>)
     8ca:	2480      	movs	r4, #128	; 0x80
     8cc:	6818      	ldr	r0, [r3, #0]
     8ce:	05e3      	lsls	r3, r4, #23
     8d0:	2800      	cmp	r0, #0
     8d2:	d001      	beq.n	8d8 <_Z14I2C_IRQHandlerv+0xc4>
	   {
		 I2C0CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
     8d4:	2120      	movs	r1, #32
     8d6:	e029      	b.n	92c <_Z14I2C_IRQHandlerv+0x118>
	   }
	   else
	   {
		 I2C0CONSET = I2CONSET_STO;      /* Set Stop flag */
     8d8:	2110      	movs	r1, #16
     8da:	6019      	str	r1, [r3, #0]
		 I2CMasterState = I2C_OK;
     8dc:	210c      	movs	r1, #12
     8de:	e024      	b.n	92a <_Z14I2C_IRQHandlerv+0x116>
	 }
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x30:
	 I2C0CONSET = I2CONSET_STO;      /* Set Stop flag */
     8e0:	2380      	movs	r3, #128	; 0x80
     8e2:	2110      	movs	r1, #16
     8e4:	05dc      	lsls	r4, r3, #23
     8e6:	6021      	str	r1, [r4, #0]
	 I2CMasterState = I2C_NACK_ON_DATA;
     8e8:	2109      	movs	r1, #9
     8ea:	e01e      	b.n	92a <_Z14I2C_IRQHandlerv+0x116>
	 }
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x50:	/* Data byte has been received, regardless following ACK or NACK */
	 I2CSlaveBuffer[RdIndex++] = I2C0DAT;
     8ec:	4b15      	ldr	r3, [pc, #84]	; (944 <_Z14I2C_IRQHandlerv+0x130>)
     8ee:	4816      	ldr	r0, [pc, #88]	; (948 <_Z14I2C_IRQHandlerv+0x134>)
     8f0:	6819      	ldr	r1, [r3, #0]
     8f2:	6804      	ldr	r4, [r0, #0]
     8f4:	4815      	ldr	r0, [pc, #84]	; (94c <_Z14I2C_IRQHandlerv+0x138>)
     8f6:	b2e4      	uxtb	r4, r4
     8f8:	5444      	strb	r4, [r0, r1]
     8fa:	3101      	adds	r1, #1
     8fc:	6019      	str	r1, [r3, #0]
	 if ( (RdIndex + 1) < I2CReadLength )
     8fe:	681c      	ldr	r4, [r3, #0]
     900:	4b16      	ldr	r3, [pc, #88]	; (95c <_Z14I2C_IRQHandlerv+0x148>)
     902:	3401      	adds	r4, #1
     904:	6819      	ldr	r1, [r3, #0]
     906:	2004      	movs	r0, #4
     908:	428c      	cmp	r4, r1
     90a:	d203      	bcs.n	914 <_Z14I2C_IRQHandlerv+0x100>
	 {   
	   I2C0CONSET = I2CONSET_AA;	/* assert ACK after data is received */
     90c:	2480      	movs	r4, #128	; 0x80
     90e:	05e3      	lsls	r3, r4, #23
     910:	6018      	str	r0, [r3, #0]
     912:	e00c      	b.n	92e <_Z14I2C_IRQHandlerv+0x11a>
	 }
	 else
	 {
	   I2C0CONCLR = I2CONCLR_AAC;	/* assert NACK on last byte */
     914:	6010      	str	r0, [r2, #0]
     916:	e00a      	b.n	92e <_Z14I2C_IRQHandlerv+0x11a>
	 I2C0CONCLR = I2CONCLR_SIC;	/* Clear SI flag */
	 break;

	 case 0x20:		/* regardless, it's a NACK */
	 case 0x48:
	 I2C0CONSET = I2CONSET_STO;      /* Set Stop flag */
     918:	2080      	movs	r0, #128	; 0x80
     91a:	2110      	movs	r1, #16
     91c:	05c4      	lsls	r4, r0, #23
     91e:	6021      	str	r1, [r4, #0]
	 I2CMasterState = I2C_NACK_ON_ADDRESS;
     920:	490b      	ldr	r1, [pc, #44]	; (950 <_Z14I2C_IRQHandlerv+0x13c>)
     922:	2308      	movs	r3, #8
     924:	600b      	str	r3, [r1, #0]
     926:	e003      	b.n	930 <_Z14I2C_IRQHandlerv+0x11c>
	 break;

	 case 0x38:		/* Arbitration lost, in this example, we don't
					 deal with multiple master situation */
	 default:
	 I2CMasterState = I2C_ARBITRATION_LOST;
     928:	210a      	movs	r1, #10
     92a:	4b09      	ldr	r3, [pc, #36]	; (950 <_Z14I2C_IRQHandlerv+0x13c>)
     92c:	6019      	str	r1, [r3, #0]
	 I2C0CONCLR = I2CONCLR_SIC;	
     92e:	2308      	movs	r3, #8
     930:	6013      	str	r3, [r2, #0]
	 break;
   }
   return;
 }
     932:	bd10      	pop	{r4, pc}
     934:	10000a7c 	.word	0x10000a7c
     938:	40000004 	.word	0x40000004
     93c:	40000018 	.word	0x40000018
     940:	10000a78 	.word	0x10000a78
     944:	10000a6c 	.word	0x10000a6c
     948:	40000008 	.word	0x40000008
     94c:	10000a80 	.word	0x10000a80
     950:	10000a74 	.word	0x10000a74
     954:	100009e1 	.word	0x100009e1
     958:	10000a68 	.word	0x10000a68
     95c:	10000a64 	.word	0x10000a64

00000960 <_Z7I2CInitm>:
 **				interrupt handler was not installed correctly
 ** 
 *****************************************************************************/
 uint32_t I2CInit( uint32_t I2cMode )
 {
   PRESETCTRL |= (0x1<<1);
     960:	4b1d      	ldr	r3, [pc, #116]	; (9d8 <_Z7I2CInitm+0x78>)
     962:	2102      	movs	r1, #2
     964:	681a      	ldr	r2, [r3, #0]
 ** Returned value:		true or false, return false if the I2C
 **				interrupt handler was not installed correctly
 ** 
 *****************************************************************************/
 uint32_t I2CInit( uint32_t I2cMode )
 {
     966:	b530      	push	{r4, r5, lr}
   PRESETCTRL |= (0x1<<1);
     968:	430a      	orrs	r2, r1
   SYSAHBCLKCTRL |= (1<<5);
     96a:	4c1c      	ldr	r4, [pc, #112]	; (9dc <_Z7I2CInitm+0x7c>)
 **				interrupt handler was not installed correctly
 ** 
 *****************************************************************************/
 uint32_t I2CInit( uint32_t I2cMode )
 {
   PRESETCTRL |= (0x1<<1);
     96c:	601a      	str	r2, [r3, #0]
   SYSAHBCLKCTRL |= (1<<5);
     96e:	6825      	ldr	r5, [r4, #0]
     970:	2320      	movs	r3, #32
   IOCON_PIO0_4 &= ~0x3F;	/*  I2C I/O config */
     972:	4a1b      	ldr	r2, [pc, #108]	; (9e0 <_Z7I2CInitm+0x80>)
 ** 
 *****************************************************************************/
 uint32_t I2CInit( uint32_t I2cMode )
 {
   PRESETCTRL |= (0x1<<1);
   SYSAHBCLKCTRL |= (1<<5);
     974:	431d      	orrs	r5, r3
     976:	6025      	str	r5, [r4, #0]
   IOCON_PIO0_4 &= ~0x3F;	/*  I2C I/O config */
     978:	6811      	ldr	r1, [r2, #0]
     97a:	243f      	movs	r4, #63	; 0x3f
     97c:	43a1      	bics	r1, r4
     97e:	6011      	str	r1, [r2, #0]
   IOCON_PIO0_4 |= 0x01;		/* I2C SCL */
     980:	6815      	ldr	r5, [r2, #0]
     982:	2101      	movs	r1, #1
   IOCON_PIO0_5 &= ~0x3F;	
     984:	4b17      	ldr	r3, [pc, #92]	; (9e4 <_Z7I2CInitm+0x84>)
 uint32_t I2CInit( uint32_t I2cMode )
 {
   PRESETCTRL |= (0x1<<1);
   SYSAHBCLKCTRL |= (1<<5);
   IOCON_PIO0_4 &= ~0x3F;	/*  I2C I/O config */
   IOCON_PIO0_4 |= 0x01;		/* I2C SCL */
     986:	430d      	orrs	r5, r1
     988:	6015      	str	r5, [r2, #0]
   IOCON_PIO0_5 &= ~0x3F;	
     98a:	681d      	ldr	r5, [r3, #0]
     98c:	43a5      	bics	r5, r4
     98e:	601d      	str	r5, [r3, #0]
   IOCON_PIO0_5 |= 0x01;		/* I2C SDA */
     990:	681d      	ldr	r5, [r3, #0]

   /*--- Clear flags ---*/
   I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
     992:	246c      	movs	r4, #108	; 0x6c
   PRESETCTRL |= (0x1<<1);
   SYSAHBCLKCTRL |= (1<<5);
   IOCON_PIO0_4 &= ~0x3F;	/*  I2C I/O config */
   IOCON_PIO0_4 |= 0x01;		/* I2C SCL */
   IOCON_PIO0_5 &= ~0x3F;	
   IOCON_PIO0_5 |= 0x01;		/* I2C SDA */
     994:	4329      	orrs	r1, r5
     996:	6019      	str	r1, [r3, #0]

   /*--- Clear flags ---*/
   I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
     998:	4913      	ldr	r1, [pc, #76]	; (9e8 <_Z7I2CInitm+0x88>)
     99a:	600c      	str	r4, [r1, #0]

   /*--- Reset registers ---*/
 #if FAST_MODE_PLUS
   IOCON_PIO0_4 |= (0x2<<8);
     99c:	6815      	ldr	r5, [r2, #0]
     99e:	2480      	movs	r4, #128	; 0x80
     9a0:	00a1      	lsls	r1, r4, #2
     9a2:	430d      	orrs	r5, r1
     9a4:	6015      	str	r5, [r2, #0]
   IOCON_PIO0_5 |= (0x2<<8);
     9a6:	681a      	ldr	r2, [r3, #0]
   I2C0SCLL   = I2SCLL_HS_SCLL;
     9a8:	4d10      	ldr	r5, [pc, #64]	; (9ec <_Z7I2CInitm+0x8c>)
   I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    

   /*--- Reset registers ---*/
 #if FAST_MODE_PLUS
   IOCON_PIO0_4 |= (0x2<<8);
   IOCON_PIO0_5 |= (0x2<<8);
     9aa:	4311      	orrs	r1, r2
   I2C0SCLL   = I2SCLL_HS_SCLL;
   I2C0SCLH   = I2SCLH_HS_SCLH;
     9ac:	4c10      	ldr	r4, [pc, #64]	; (9f0 <_Z7I2CInitm+0x90>)
   I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    

   /*--- Reset registers ---*/
 #if FAST_MODE_PLUS
   IOCON_PIO0_4 |= (0x2<<8);
   IOCON_PIO0_5 |= (0x2<<8);
     9ae:	6019      	str	r1, [r3, #0]
   I2C0SCLL   = I2SCLL_HS_SCLL;
     9b0:	233c      	movs	r3, #60	; 0x3c
     9b2:	602b      	str	r3, [r5, #0]
   I2C0SCLH   = I2SCLH_HS_SCLH;
     9b4:	6023      	str	r3, [r4, #0]
 #else
   I2C0SCLL   = I2SCLL_SCLL;
   I2C0SCLH   = I2SCLH_SCLH;
 #endif

   if ( I2cMode == I2CSLAVE )
     9b6:	2802      	cmp	r0, #2
     9b8:	d102      	bne.n	9c0 <_Z7I2CInitm+0x60>
   {
	 I2C0ADR0 = PCF8594_ADDR;
     9ba:	490e      	ldr	r1, [pc, #56]	; (9f4 <_Z7I2CInitm+0x94>)
     9bc:	20a0      	movs	r0, #160	; 0xa0
     9be:	6008      	str	r0, [r1, #0]
   }    

   /* Enable the I2C Interrupt */
   bitSet(ISER, 15);
     9c0:	4b0d      	ldr	r3, [pc, #52]	; (9f8 <_Z7I2CInitm+0x98>)
     9c2:	2280      	movs	r2, #128	; 0x80
     9c4:	681d      	ldr	r5, [r3, #0]
     9c6:	0214      	lsls	r4, r2, #8
     9c8:	432c      	orrs	r4, r5

   I2C0CONSET = I2CONSET_I2EN;
     9ca:	2180      	movs	r1, #128	; 0x80
   {
	 I2C0ADR0 = PCF8594_ADDR;
   }    

   /* Enable the I2C Interrupt */
   bitSet(ISER, 15);
     9cc:	601c      	str	r4, [r3, #0]

   I2C0CONSET = I2CONSET_I2EN;
     9ce:	2040      	movs	r0, #64	; 0x40
     9d0:	05cb      	lsls	r3, r1, #23
     9d2:	6018      	str	r0, [r3, #0]
   return( 1 );
 }
     9d4:	2001      	movs	r0, #1
     9d6:	bd30      	pop	{r4, r5, pc}
     9d8:	40048004 	.word	0x40048004
     9dc:	40048080 	.word	0x40048080
     9e0:	40044030 	.word	0x40044030
     9e4:	40044034 	.word	0x40044034
     9e8:	40000018 	.word	0x40000018
     9ec:	40000014 	.word	0x40000014
     9f0:	40000010 	.word	0x40000010
     9f4:	4000000c 	.word	0x4000000c
     9f8:	e000e100 	.word	0xe000e100

000009fc <_Z9I2CEnginev>:
 **				timed out. 
 ** 
 *****************************************************************************/
 uint32_t I2CEngine( void ) 
 {
   RdIndex = 0;
     9fc:	4a0f      	ldr	r2, [pc, #60]	; (a3c <_Z9I2CEnginev+0x40>)
   WrIndex = 0;
     9fe:	4810      	ldr	r0, [pc, #64]	; (a40 <_Z9I2CEnginev+0x44>)
 **				timed out. 
 ** 
 *****************************************************************************/
 uint32_t I2CEngine( void ) 
 {
   RdIndex = 0;
     a00:	2300      	movs	r3, #0
     a02:	6013      	str	r3, [r2, #0]
   WrIndex = 0;
     a04:	6003      	str	r3, [r0, #0]

   /*--- Issue a start condition ---*/
   I2C0CONSET = I2CONSET_STA;	/* Set Start flag */
     a06:	2380      	movs	r3, #128	; 0x80
     a08:	05da      	lsls	r2, r3, #23

   I2CMasterState = I2C_BUSY;	
     a0a:	4b0e      	ldr	r3, [pc, #56]	; (a44 <_Z9I2CEnginev+0x48>)
 {
   RdIndex = 0;
   WrIndex = 0;

   /*--- Issue a start condition ---*/
   I2C0CONSET = I2CONSET_STA;	/* Set Start flag */
     a0c:	2120      	movs	r1, #32

   I2CMasterState = I2C_BUSY;	
     a0e:	2006      	movs	r0, #6
 {
   RdIndex = 0;
   WrIndex = 0;

   /*--- Issue a start condition ---*/
   I2C0CONSET = I2CONSET_STA;	/* Set Start flag */
     a10:	6011      	str	r1, [r2, #0]

   I2CMasterState = I2C_BUSY;	
     a12:	6018      	str	r0, [r3, #0]

   while ( I2CMasterState == I2C_BUSY )
     a14:	6819      	ldr	r1, [r3, #0]
     a16:	2906      	cmp	r1, #6
     a18:	d10b      	bne.n	a32 <_Z9I2CEnginev+0x36>
   {
	 if ( timeout >= MAX_TIMEOUT )
     a1a:	4a0b      	ldr	r2, [pc, #44]	; (a48 <_Z9I2CEnginev+0x4c>)
     a1c:	490b      	ldr	r1, [pc, #44]	; (a4c <_Z9I2CEnginev+0x50>)
     a1e:	6810      	ldr	r0, [r2, #0]
     a20:	4288      	cmp	r0, r1
     a22:	d902      	bls.n	a2a <_Z9I2CEnginev+0x2e>
	 {
	   I2CMasterState = I2C_TIME_OUT;
     a24:	220b      	movs	r2, #11
     a26:	601a      	str	r2, [r3, #0]
	   break;
     a28:	e003      	b.n	a32 <_Z9I2CEnginev+0x36>
	 }
	 timeout++;
     a2a:	6810      	ldr	r0, [r2, #0]
     a2c:	3001      	adds	r0, #1
     a2e:	6010      	str	r0, [r2, #0]
     a30:	e7f0      	b.n	a14 <_Z9I2CEnginev+0x18>
   }    
   I2C0CONCLR = I2CONCLR_STAC;
     a32:	4807      	ldr	r0, [pc, #28]	; (a50 <_Z9I2CEnginev+0x54>)
     a34:	2120      	movs	r1, #32
     a36:	6001      	str	r1, [r0, #0]

   return ( I2CMasterState );
     a38:	6818      	ldr	r0, [r3, #0]
 }
     a3a:	4770      	bx	lr
     a3c:	10000a6c 	.word	0x10000a6c
     a40:	10000a78 	.word	0x10000a78
     a44:	10000a74 	.word	0x10000a74
     a48:	10000a7c 	.word	0x10000a7c
     a4c:	00fffffe 	.word	0x00fffffe
     a50:	40000018 	.word	0x40000018

00000a54 <_ZN7TwoWire5beginEv>:
 }

 // Public Methods //////////////////////////////////////////////////////////////

 void TwoWire::begin(void)
 {
     a54:	b508      	push	{r3, lr}
   I2CInit(I2CMASTER);
     a56:	2001      	movs	r0, #1
     a58:	f7ff ff82 	bl	960 <_Z7I2CInitm>
 }
     a5c:	bd08      	pop	{r3, pc}
	...

00000a60 <_ZN7TwoWire11requestFromEhhh>:

 uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
 {
   I2CReadLength = quantity;
   I2CMasterBuffer[1] = address;
     a60:	4806      	ldr	r0, [pc, #24]	; (a7c <_ZN7TwoWire11requestFromEhhh+0x1c>)
   I2CInit(I2CMASTER);
 }

 uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
 {
   I2CReadLength = quantity;
     a62:	4b07      	ldr	r3, [pc, #28]	; (a80 <_ZN7TwoWire11requestFromEhhh+0x20>)
     a64:	601a      	str	r2, [r3, #0]
   I2CMasterBuffer[1] = address;
     a66:	7041      	strb	r1, [r0, #1]
   I2CMasterBuffer[2] = I2CMasterBuffer[0] | RD_BIT;
     a68:	7802      	ldrb	r2, [r0, #0]
     a6a:	2101      	movs	r1, #1
     a6c:	430a      	orrs	r2, r1
   I2CWriteLength += 1;
     a6e:	4b05      	ldr	r3, [pc, #20]	; (a84 <_ZN7TwoWire11requestFromEhhh+0x24>)

 uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
 {
   I2CReadLength = quantity;
   I2CMasterBuffer[1] = address;
   I2CMasterBuffer[2] = I2CMasterBuffer[0] | RD_BIT;
     a70:	7082      	strb	r2, [r0, #2]
   I2CWriteLength += 1;
     a72:	6818      	ldr	r0, [r3, #0]
     a74:	1842      	adds	r2, r0, r1
     a76:	601a      	str	r2, [r3, #0]
   return 0;
 }
     a78:	2000      	movs	r0, #0
     a7a:	4770      	bx	lr
     a7c:	100009e1 	.word	0x100009e1
     a80:	10000a64 	.word	0x10000a64
     a84:	10000a68 	.word	0x10000a68

00000a88 <_ZN7TwoWire11requestFromEii>:
 {
   return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 }

 uint8_t TwoWire::requestFrom(int address, int quantity)
 {
     a88:	b508      	push	{r3, lr}
   return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
     a8a:	b2c9      	uxtb	r1, r1
     a8c:	b2d2      	uxtb	r2, r2
     a8e:	2301      	movs	r3, #1
     a90:	f7ff ffe6 	bl	a60 <_ZN7TwoWire11requestFromEhhh>
 }
     a94:	bd08      	pop	{r3, pc}
	...

00000a98 <_ZN7TwoWire17beginTransmissionEh>:
   return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 }

 void TwoWire::beginTransmission(uint8_t address)
 {
   I2CWriteLength = 1;
     a98:	4b04      	ldr	r3, [pc, #16]	; (aac <_ZN7TwoWire17beginTransmissionEh+0x14>)
     a9a:	2201      	movs	r2, #1
     a9c:	601a      	str	r2, [r3, #0]
   I2CReadLength = 0;
     a9e:	4a04      	ldr	r2, [pc, #16]	; (ab0 <_ZN7TwoWire17beginTransmissionEh+0x18>)
   I2CMasterBuffer[0] = address;
     aa0:	4b04      	ldr	r3, [pc, #16]	; (ab4 <_ZN7TwoWire17beginTransmissionEh+0x1c>)
 }

 void TwoWire::beginTransmission(uint8_t address)
 {
   I2CWriteLength = 1;
   I2CReadLength = 0;
     aa2:	2000      	movs	r0, #0
     aa4:	6010      	str	r0, [r2, #0]
   I2CMasterBuffer[0] = address;
     aa6:	7019      	strb	r1, [r3, #0]
 }
     aa8:	4770      	bx	lr
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	10000a68 	.word	0x10000a68
     ab0:	10000a64 	.word	0x10000a64
     ab4:	100009e1 	.word	0x100009e1

00000ab8 <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
     ab8:	b508      	push	{r3, lr}
 //	no call to endTransmission(true) is made. Some I2C
 //	devices will behave oddly if they do not see a STOP.
 //
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  return I2CEngine();
     aba:	f7ff ff9f 	bl	9fc <_Z9I2CEnginev>
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     abe:	b2c0      	uxtb	r0, r0
}
     ac0:	bd08      	pop	{r3, pc}
	...

00000ac4 <_ZN7TwoWire5writeEh>:

size_t TwoWire::write(uint8_t data)
{
  I2CMasterBuffer[I2CWriteLength] = data;
     ac4:	4b04      	ldr	r3, [pc, #16]	; (ad8 <_ZN7TwoWire5writeEh+0x14>)
     ac6:	4805      	ldr	r0, [pc, #20]	; (adc <_ZN7TwoWire5writeEh+0x18>)
     ac8:	681a      	ldr	r2, [r3, #0]
     aca:	5481      	strb	r1, [r0, r2]
  I2CWriteLength++;
     acc:	6819      	ldr	r1, [r3, #0]
  return 1;
}
     ace:	2001      	movs	r0, #1
}

size_t TwoWire::write(uint8_t data)
{
  I2CMasterBuffer[I2CWriteLength] = data;
  I2CWriteLength++;
     ad0:	3101      	adds	r1, #1
     ad2:	6019      	str	r1, [r3, #0]
  return 1;
}
     ad4:	4770      	bx	lr
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	10000a68 	.word	0x10000a68
     adc:	100009e1 	.word	0x100009e1

00000ae0 <_ZN7TwoWire4readEv>:
// or after requestFrom(address, numBytes)
uint8_t TwoWire::read(void)
{
  int value = -1;
  
  value = I2CSlaveBuffer[I2CReadLength-1];
     ae0:	4b04      	ldr	r3, [pc, #16]	; (af4 <_ZN7TwoWire4readEv+0x14>)
     ae2:	4905      	ldr	r1, [pc, #20]	; (af8 <_ZN7TwoWire4readEv+0x18>)
     ae4:	681a      	ldr	r2, [r3, #0]
     ae6:	3a01      	subs	r2, #1
     ae8:	5c88      	ldrb	r0, [r1, r2]
  I2CReadLength--;
     aea:	681a      	ldr	r2, [r3, #0]
     aec:	3a01      	subs	r2, #1
     aee:	601a      	str	r2, [r3, #0]

  return value;
}
     af0:	4770      	bx	lr
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	10000a64 	.word	0x10000a64
     af8:	10000a80 	.word	0x10000a80

00000afc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     afe:	1c06      	adds	r6, r0, #0
     b00:	1c0c      	adds	r4, r1, #0
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     b02:	188f      	adds	r7, r1, r2
{
  size_t n = 0;
     b04:	2500      	movs	r5, #0
  while (size--) {
     b06:	42bc      	cmp	r4, r7
     b08:	d007      	beq.n	b1a <_ZN5Print5writeEPKhj+0x1e>
    n += write(*buffer++);
     b0a:	6833      	ldr	r3, [r6, #0]
     b0c:	7821      	ldrb	r1, [r4, #0]
     b0e:	681a      	ldr	r2, [r3, #0]
     b10:	1c30      	adds	r0, r6, #0
     b12:	4790      	blx	r2
     b14:	3401      	adds	r4, #1
     b16:	182d      	adds	r5, r5, r0
     b18:	e7f5      	b.n	b06 <_ZN5Print5writeEPKhj+0xa>
  }
  return n;
}
     b1a:	1c28      	adds	r0, r5, #0
     b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000b1e <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     b1e:	b538      	push	{r3, r4, r5, lr}
     b20:	1c05      	adds	r5, r0, #0
     b22:	1c0c      	adds	r4, r1, #0
      if (str == NULL) return 0;
     b24:	1e08      	subs	r0, r1, #0
     b26:	d007      	beq.n	b38 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     b28:	f000 fccc 	bl	14c4 <strlen>
     b2c:	682b      	ldr	r3, [r5, #0]
     b2e:	1c02      	adds	r2, r0, #0
     b30:	685b      	ldr	r3, [r3, #4]
     b32:	1c28      	adds	r0, r5, #0
     b34:	1c21      	adds	r1, r4, #0
     b36:	4798      	blx	r3
    }
     b38:	bd38      	pop	{r3, r4, r5, pc}

00000b3a <_ZN5Print5printEPKc>:
  }
  return n;
}

size_t Print::print(const char str[])
{
     b3a:	b508      	push	{r3, lr}
  return write(str);
     b3c:	f7ff ffef 	bl	b1e <_ZN5Print5writeEPKc>
}
     b40:	bd08      	pop	{r3, pc}

00000b42 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     b42:	b508      	push	{r3, lr}
  return write(c);
     b44:	6803      	ldr	r3, [r0, #0]
     b46:	681a      	ldr	r2, [r3, #0]
     b48:	4790      	blx	r2
}
     b4a:	bd08      	pop	{r3, pc}

00000b4c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     b4c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
     b4e:	210d      	movs	r1, #13
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     b50:	1c04      	adds	r4, r0, #0
  size_t n = print('\r');
     b52:	f7ff fff6 	bl	b42 <_ZN5Print5printEc>
  n += print('\n');
     b56:	210a      	movs	r1, #10
  return x.printTo(*this);
}

size_t Print::println(void)
{
  size_t n = print('\r');
     b58:	1c05      	adds	r5, r0, #0
  n += print('\n');
     b5a:	1c20      	adds	r0, r4, #0
     b5c:	f7ff fff1 	bl	b42 <_ZN5Print5printEc>
     b60:	1940      	adds	r0, r0, r5
  return n;
}
     b62:	bd38      	pop	{r3, r4, r5, pc}

00000b64 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     b64:	b538      	push	{r3, r4, r5, lr}
     b66:	1c04      	adds	r4, r0, #0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     b68:	f7ff ffd9 	bl	b1e <_ZN5Print5writeEPKc>
     b6c:	1c05      	adds	r5, r0, #0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     b6e:	1c20      	adds	r0, r4, #0
     b70:	f7ff ffec 	bl	b4c <_ZN5Print7printlnEv>
     b74:	1828      	adds	r0, r5, r0
  return n;
}
     b76:	bd38      	pop	{r3, r4, r5, pc}

00000b78 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
     b78:	b538      	push	{r3, r4, r5, lr}
     b7a:	1c04      	adds	r4, r0, #0
  size_t n = print(c);
     b7c:	f7ff ffe1 	bl	b42 <_ZN5Print5printEc>
     b80:	1c05      	adds	r5, r0, #0
  n += println();
     b82:	1c20      	adds	r0, r4, #0
     b84:	f7ff ffe2 	bl	b4c <_ZN5Print7printlnEv>
     b88:	1940      	adds	r0, r0, r5
  return n;
}
     b8a:	bd38      	pop	{r3, r4, r5, pc}

00000b8c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b8e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     b90:	ac09      	add	r4, sp, #36	; 0x24
     b92:	2300      	movs	r3, #0
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     b94:	1c07      	adds	r7, r0, #0
     b96:	1c0d      	adds	r5, r1, #0
     b98:	1c16      	adds	r6, r2, #0
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     b9a:	7023      	strb	r3, [r4, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     b9c:	2a01      	cmp	r2, #1
     b9e:	d800      	bhi.n	ba2 <_ZN5Print11printNumberEmh+0x16>
     ba0:	260a      	movs	r6, #10

  do {
    unsigned long m = n;
    n /= base;
     ba2:	1c28      	adds	r0, r5, #0
     ba4:	1c31      	adds	r1, r6, #0
     ba6:	f000 fde5 	bl	1774 <__aeabi_uidiv>
    char c = m - base * n;
     baa:	1c01      	adds	r1, r0, #0
     bac:	4371      	muls	r1, r6
     bae:	1a6d      	subs	r5, r5, r1
     bb0:	b2ea      	uxtb	r2, r5
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     bb2:	3c01      	subs	r4, #1
     bb4:	2a09      	cmp	r2, #9
     bb6:	d801      	bhi.n	bbc <_ZN5Print11printNumberEmh+0x30>
     bb8:	3230      	adds	r2, #48	; 0x30
     bba:	e000      	b.n	bbe <_ZN5Print11printNumberEmh+0x32>
     bbc:	3237      	adds	r2, #55	; 0x37
     bbe:	b2d3      	uxtb	r3, r2
     bc0:	7023      	strb	r3, [r4, #0]
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     bc2:	1e05      	subs	r5, r0, #0
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     bc4:	d1ed      	bne.n	ba2 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     bc6:	1c38      	adds	r0, r7, #0
     bc8:	1c21      	adds	r1, r4, #0
     bca:	f7ff ffa8 	bl	b1e <_ZN5Print5writeEPKc>
}
     bce:	b00b      	add	sp, #44	; 0x2c
     bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000bd2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
     bd2:	b508      	push	{r3, lr}
  if (base == 0) return write(n);
     bd4:	2a00      	cmp	r2, #0
     bd6:	d104      	bne.n	be2 <_ZN5Print5printEmi+0x10>
     bd8:	6803      	ldr	r3, [r0, #0]
     bda:	b2c9      	uxtb	r1, r1
     bdc:	681a      	ldr	r2, [r3, #0]
     bde:	4790      	blx	r2
     be0:	e002      	b.n	be8 <_ZN5Print5printEmi+0x16>
  else return printNumber(n, base);
     be2:	b2d2      	uxtb	r2, r2
     be4:	f7ff ffd2 	bl	b8c <_ZN5Print11printNumberEmh>
}
     be8:	bd08      	pop	{r3, pc}

00000bea <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
     bea:	b538      	push	{r3, r4, r5, lr}
     bec:	1c04      	adds	r4, r0, #0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     bee:	f7ff fff0 	bl	bd2 <_ZN5Print5printEmi>
     bf2:	1c05      	adds	r5, r0, #0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
     bf4:	1c20      	adds	r0, r4, #0
     bf6:	f7ff ffa9 	bl	b4c <_ZN5Print7printlnEv>
     bfa:	1828      	adds	r0, r5, r0
  return n;
}
     bfc:	bd38      	pop	{r3, r4, r5, pc}

00000bfe <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c00:	1c04      	adds	r4, r0, #0
     c02:	1c0d      	adds	r5, r1, #0
     c04:	1e16      	subs	r6, r2, #0
  if (base == 0) {
     c06:	d104      	bne.n	c12 <_ZN5Print5printEli+0x14>
    return write(n);
     c08:	6803      	ldr	r3, [r0, #0]
     c0a:	b2c9      	uxtb	r1, r1
     c0c:	681a      	ldr	r2, [r3, #0]
     c0e:	4790      	blx	r2
     c10:	e012      	b.n	c38 <_ZN5Print5printEli+0x3a>
  } else if (base == 10) {
     c12:	2a0a      	cmp	r2, #10
     c14:	d10d      	bne.n	c32 <_ZN5Print5printEli+0x34>
    if (n < 0) {
     c16:	2900      	cmp	r1, #0
     c18:	da0a      	bge.n	c30 <_ZN5Print5printEli+0x32>
      int t = print('-');
     c1a:	212d      	movs	r1, #45	; 0x2d
     c1c:	f7ff ff91 	bl	b42 <_ZN5Print5printEc>
      n = -n;
     c20:	4269      	negs	r1, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
     c22:	1c07      	adds	r7, r0, #0
      n = -n;
      return printNumber(n, 10) + t;
     c24:	1c32      	adds	r2, r6, #0
     c26:	1c20      	adds	r0, r4, #0
     c28:	f7ff ffb0 	bl	b8c <_ZN5Print11printNumberEmh>
     c2c:	19c0      	adds	r0, r0, r7
     c2e:	e003      	b.n	c38 <_ZN5Print5printEli+0x3a>
     c30:	e000      	b.n	c34 <_ZN5Print5printEli+0x36>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     c32:	b2d2      	uxtb	r2, r2
     c34:	f7ff ffaa 	bl	b8c <_ZN5Print11printNumberEmh>
  }
}
     c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000c3a <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
     c3a:	b538      	push	{r3, r4, r5, lr}
     c3c:	1c04      	adds	r4, r0, #0
  size_t n = print(num, base);
     c3e:	f7ff ffde 	bl	bfe <_ZN5Print5printEli>
     c42:	1c05      	adds	r5, r0, #0
  n += println();
     c44:	1c20      	adds	r0, r4, #0
     c46:	f7ff ff81 	bl	b4c <_ZN5Print7printlnEv>
     c4a:	1940      	adds	r0, r0, r5
  return n;
}
     c4c:	bd38      	pop	{r3, r4, r5, pc}
	...

00000c50 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c52:	1c1c      	adds	r4, r3, #0
     c54:	ab08      	add	r3, sp, #32
     c56:	1c07      	adds	r7, r0, #0
     c58:	7818      	ldrb	r0, [r3, #0]
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     c5a:	1c21      	adds	r1, r4, #0

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     c5c:	9000      	str	r0, [sp, #0]
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     c5e:	1c10      	adds	r0, r2, #0

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     c60:	1c15      	adds	r5, r2, #0
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     c62:	f000 fbe5 	bl	1430 <__fpclassifyd>
     c66:	2800      	cmp	r0, #0
     c68:	d102      	bne.n	c70 <_ZN5Print10printFloatEdh+0x20>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     c6a:	1c38      	adds	r0, r7, #0
     c6c:	4950      	ldr	r1, [pc, #320]	; (db0 <_ZN5Print10printFloatEdh+0x160>)
     c6e:	e007      	b.n	c80 <_ZN5Print10printFloatEdh+0x30>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     c70:	1c28      	adds	r0, r5, #0
     c72:	1c21      	adds	r1, r4, #0
     c74:	f000 fbdc 	bl	1430 <__fpclassifyd>
     c78:	2801      	cmp	r0, #1
     c7a:	d105      	bne.n	c88 <_ZN5Print10printFloatEdh+0x38>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     c7c:	494d      	ldr	r1, [pc, #308]	; (db4 <_ZN5Print10printFloatEdh+0x164>)
     c7e:	1c38      	adds	r0, r7, #0
     c80:	f7ff ff4d 	bl	b1e <_ZN5Print5writeEPKc>
     c84:	1c06      	adds	r6, r0, #0
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     c86:	e07b      	b.n	d80 <_ZN5Print10printFloatEdh+0x130>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     c88:	1c28      	adds	r0, r5, #0
     c8a:	1c21      	adds	r1, r4, #0
     c8c:	4b3f      	ldr	r3, [pc, #252]	; (d8c <_ZN5Print10printFloatEdh+0x13c>)
     c8e:	4a3e      	ldr	r2, [pc, #248]	; (d88 <_ZN5Print10printFloatEdh+0x138>)
     c90:	f000 fdea 	bl	1868 <__aeabi_dcmpgt>
     c94:	2800      	cmp	r0, #0
     c96:	d107      	bne.n	ca8 <_ZN5Print10printFloatEdh+0x58>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     c98:	1c28      	adds	r0, r5, #0
     c9a:	1c21      	adds	r1, r4, #0
     c9c:	4a3c      	ldr	r2, [pc, #240]	; (d90 <_ZN5Print10printFloatEdh+0x140>)
     c9e:	4b3d      	ldr	r3, [pc, #244]	; (d94 <_ZN5Print10printFloatEdh+0x144>)
     ca0:	f000 fdce 	bl	1840 <__aeabi_dcmplt>
     ca4:	2800      	cmp	r0, #0
     ca6:	d002      	beq.n	cae <_ZN5Print10printFloatEdh+0x5e>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     ca8:	1c38      	adds	r0, r7, #0
     caa:	4943      	ldr	r1, [pc, #268]	; (db8 <_ZN5Print10printFloatEdh+0x168>)
     cac:	e7e8      	b.n	c80 <_ZN5Print10printFloatEdh+0x30>
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
     cae:	1c28      	adds	r0, r5, #0
     cb0:	1c21      	adds	r1, r4, #0
     cb2:	4a39      	ldr	r2, [pc, #228]	; (d98 <_ZN5Print10printFloatEdh+0x148>)
     cb4:	4b39      	ldr	r3, [pc, #228]	; (d9c <_ZN5Print10printFloatEdh+0x14c>)
     cb6:	f000 fdc3 	bl	1840 <__aeabi_dcmplt>
     cba:	2800      	cmp	r0, #0
     cbc:	d008      	beq.n	cd0 <_ZN5Print10printFloatEdh+0x80>
  {
     n += print('-');
     cbe:	212d      	movs	r1, #45	; 0x2d
     cc0:	1c38      	adds	r0, r7, #0
     cc2:	f7ff ff3e 	bl	b42 <_ZN5Print5printEc>
     number = -number;
     cc6:	2180      	movs	r1, #128	; 0x80
     cc8:	060a      	lsls	r2, r1, #24
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     cca:	9001      	str	r0, [sp, #4]
     number = -number;
     ccc:	18a4      	adds	r4, r4, r2
     cce:	e000      	b.n	cd2 <_ZN5Print10printFloatEdh+0x82>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     cd0:	9001      	str	r0, [sp, #4]
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     cd2:	2600      	movs	r6, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     cd4:	4a32      	ldr	r2, [pc, #200]	; (da0 <_ZN5Print10printFloatEdh+0x150>)
     cd6:	4b33      	ldr	r3, [pc, #204]	; (da4 <_ZN5Print10printFloatEdh+0x154>)
  for (uint8_t i=0; i<digits; ++i)
     cd8:	9800      	ldr	r0, [sp, #0]
     cda:	4286      	cmp	r6, r0
     cdc:	d00a      	beq.n	cf4 <_ZN5Print10printFloatEdh+0xa4>
    rounding /= 10.0;
     cde:	1c10      	adds	r0, r2, #0
     ce0:	1c19      	adds	r1, r3, #0
     ce2:	4a31      	ldr	r2, [pc, #196]	; (da8 <_ZN5Print10printFloatEdh+0x158>)
     ce4:	4b31      	ldr	r3, [pc, #196]	; (dac <_ZN5Print10printFloatEdh+0x15c>)
     ce6:	f001 f9a3 	bl	2030 <__aeabi_ddiv>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     cea:	3601      	adds	r6, #1
    rounding /= 10.0;
     cec:	1c02      	adds	r2, r0, #0
     cee:	1c0b      	adds	r3, r1, #0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     cf0:	b2f6      	uxtb	r6, r6
     cf2:	e7f1      	b.n	cd8 <_ZN5Print10printFloatEdh+0x88>
    rounding /= 10.0;
  
  number += rounding;
     cf4:	1c28      	adds	r0, r5, #0
     cf6:	1c21      	adds	r1, r4, #0
     cf8:	f000 fdea 	bl	18d0 <__aeabi_dadd>
     cfc:	1c0d      	adds	r5, r1, #0
     cfe:	1c04      	adds	r4, r0, #0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     d00:	f000 fdc6 	bl	1890 <__aeabi_d2uiz>
     d04:	1c06      	adds	r6, r0, #0
  double remainder = number - (double)int_part;
     d06:	f002 fbef 	bl	34e8 <__aeabi_ui2d>
     d0a:	1c0b      	adds	r3, r1, #0
     d0c:	1c02      	adds	r2, r0, #0
     d0e:	1c29      	adds	r1, r5, #0
     d10:	1c20      	adds	r0, r4, #0
     d12:	f001 fff9 	bl	2d08 <__aeabi_dsub>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     d16:	220a      	movs	r2, #10
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     d18:	1c04      	adds	r4, r0, #0
     d1a:	1c0d      	adds	r5, r1, #0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     d1c:	1c38      	adds	r0, r7, #0
     d1e:	1c31      	adds	r1, r6, #0
     d20:	f7ff ff34 	bl	b8c <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     d24:	9b01      	ldr	r3, [sp, #4]

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     d26:	9900      	ldr	r1, [sp, #0]
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     d28:	18c6      	adds	r6, r0, r3

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     d2a:	2900      	cmp	r1, #0
     d2c:	d028      	beq.n	d80 <_ZN5Print10printFloatEdh+0x130>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     d2e:	1c38      	adds	r0, r7, #0
     d30:	4922      	ldr	r1, [pc, #136]	; (dbc <_ZN5Print10printFloatEdh+0x16c>)
     d32:	f7ff fef4 	bl	b1e <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
     d36:	1836      	adds	r6, r6, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     d38:	9a00      	ldr	r2, [sp, #0]
     d3a:	2a00      	cmp	r2, #0
     d3c:	d020      	beq.n	d80 <_ZN5Print10printFloatEdh+0x130>
  {
    remainder *= 10.0;
     d3e:	4a1a      	ldr	r2, [pc, #104]	; (da8 <_ZN5Print10printFloatEdh+0x158>)
     d40:	4b1a      	ldr	r3, [pc, #104]	; (dac <_ZN5Print10printFloatEdh+0x15c>)
     d42:	1c20      	adds	r0, r4, #0
     d44:	1c29      	adds	r1, r5, #0
     d46:	f001 fd6d 	bl	2824 <__aeabi_dmul>
     d4a:	1c0d      	adds	r5, r1, #0
     d4c:	1c04      	adds	r4, r0, #0
    int toPrint = int(remainder);
     d4e:	f002 fb5d 	bl	340c <__aeabi_d2iz>
     d52:	9001      	str	r0, [sp, #4]
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     d54:	220a      	movs	r2, #10
     d56:	9901      	ldr	r1, [sp, #4]
     d58:	1c38      	adds	r0, r7, #0
     d5a:	f7ff ff50 	bl	bfe <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
     d5e:	1836      	adds	r6, r6, r0
    remainder -= toPrint; 
     d60:	9801      	ldr	r0, [sp, #4]
     d62:	f002 fb87 	bl	3474 <__aeabi_i2d>
     d66:	1c0b      	adds	r3, r1, #0
     d68:	1c02      	adds	r2, r0, #0
     d6a:	1c29      	adds	r1, r5, #0
     d6c:	1c20      	adds	r0, r4, #0
     d6e:	f001 ffcb 	bl	2d08 <__aeabi_dsub>
     d72:	1c04      	adds	r4, r0, #0
     d74:	9800      	ldr	r0, [sp, #0]
     d76:	1c0d      	adds	r5, r1, #0
     d78:	3801      	subs	r0, #1
     d7a:	b2c3      	uxtb	r3, r0
     d7c:	9300      	str	r3, [sp, #0]
     d7e:	e7db      	b.n	d38 <_ZN5Print10printFloatEdh+0xe8>
  } 
  
  return n;
}
     d80:	1c30      	adds	r0, r6, #0
     d82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     d84:	46c0      	nop			; (mov r8, r8)
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	e0000000 	.word	0xe0000000
     d8c:	41efffff 	.word	0x41efffff
     d90:	e0000000 	.word	0xe0000000
     d94:	c1efffff 	.word	0xc1efffff
	...
     da4:	3fe00000 	.word	0x3fe00000
     da8:	00000000 	.word	0x00000000
     dac:	40240000 	.word	0x40240000
     db0:	000036d8 	.word	0x000036d8
     db4:	000036dc 	.word	0x000036dc
     db8:	000036e0 	.word	0x000036e0
     dbc:	000036e4 	.word	0x000036e4

00000dc0 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
     dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
     dc2:	1c04      	adds	r4, r0, #0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     dc4:	4668      	mov	r0, sp
     dc6:	7e01      	ldrb	r1, [r0, #24]
     dc8:	1c20      	adds	r0, r4, #0
     dca:	9100      	str	r1, [sp, #0]
     dcc:	f7ff ff40 	bl	c50 <_ZN5Print10printFloatEdh>
     dd0:	1c05      	adds	r5, r0, #0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
     dd2:	1c20      	adds	r0, r4, #0
     dd4:	f7ff feba 	bl	b4c <_ZN5Print7printlnEv>
     dd8:	1828      	adds	r0, r5, r0
  return n;
}
     dda:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00000ddc <__register_exitproc>:
     ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
     dde:	464f      	mov	r7, r9
     de0:	4646      	mov	r6, r8
     de2:	b4c0      	push	{r6, r7}
     de4:	4698      	mov	r8, r3
     de6:	4b2c      	ldr	r3, [pc, #176]	; (e98 <__register_exitproc+0xbc>)
     de8:	1c06      	adds	r6, r0, #0
     dea:	25a4      	movs	r5, #164	; 0xa4
     dec:	6818      	ldr	r0, [r3, #0]
     dee:	1c0f      	adds	r7, r1, #0
     df0:	0069      	lsls	r1, r5, #1
     df2:	5844      	ldr	r4, [r0, r1]
     df4:	b083      	sub	sp, #12
     df6:	4691      	mov	r9, r2
     df8:	9001      	str	r0, [sp, #4]
     dfa:	2c00      	cmp	r4, #0
     dfc:	d047      	beq.n	e8e <__register_exitproc+0xb2>
     dfe:	6862      	ldr	r2, [r4, #4]
     e00:	2a1f      	cmp	r2, #31
     e02:	dd1a      	ble.n	e3a <__register_exitproc+0x5e>
     e04:	4c25      	ldr	r4, [pc, #148]	; (e9c <__register_exitproc+0xc0>)
     e06:	2c00      	cmp	r4, #0
     e08:	d102      	bne.n	e10 <__register_exitproc+0x34>
     e0a:	2701      	movs	r7, #1
     e0c:	4278      	negs	r0, r7
     e0e:	e01d      	b.n	e4c <__register_exitproc+0x70>
     e10:	23c8      	movs	r3, #200	; 0xc8
     e12:	0058      	lsls	r0, r3, #1
     e14:	f000 f874 	bl	f00 <malloc>
     e18:	1e04      	subs	r4, r0, #0
     e1a:	d0f6      	beq.n	e0a <__register_exitproc+0x2e>
     e1c:	2500      	movs	r5, #0
     e1e:	6045      	str	r5, [r0, #4]
     e20:	9901      	ldr	r1, [sp, #4]
     e22:	20a4      	movs	r0, #164	; 0xa4
     e24:	0042      	lsls	r2, r0, #1
     e26:	588b      	ldr	r3, [r1, r2]
     e28:	9801      	ldr	r0, [sp, #4]
     e2a:	6023      	str	r3, [r4, #0]
     e2c:	5084      	str	r4, [r0, r2]
     e2e:	23c6      	movs	r3, #198	; 0xc6
     e30:	22c4      	movs	r2, #196	; 0xc4
     e32:	0051      	lsls	r1, r2, #1
     e34:	0058      	lsls	r0, r3, #1
     e36:	5065      	str	r5, [r4, r1]
     e38:	5025      	str	r5, [r4, r0]
     e3a:	6865      	ldr	r5, [r4, #4]
     e3c:	2e00      	cmp	r6, #0
     e3e:	d10a      	bne.n	e56 <__register_exitproc+0x7a>
     e40:	1ca9      	adds	r1, r5, #2
     e42:	008e      	lsls	r6, r1, #2
     e44:	3501      	adds	r5, #1
     e46:	5137      	str	r7, [r6, r4]
     e48:	6065      	str	r5, [r4, #4]
     e4a:	2000      	movs	r0, #0
     e4c:	b003      	add	sp, #12
     e4e:	bc0c      	pop	{r2, r3}
     e50:	4690      	mov	r8, r2
     e52:	4699      	mov	r9, r3
     e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e56:	00aa      	lsls	r2, r5, #2
     e58:	18a0      	adds	r0, r4, r2
     e5a:	2388      	movs	r3, #136	; 0x88
     e5c:	4649      	mov	r1, r9
     e5e:	22c4      	movs	r2, #196	; 0xc4
     e60:	50c1      	str	r1, [r0, r3]
     e62:	0050      	lsls	r0, r2, #1
     e64:	1822      	adds	r2, r4, r0
     e66:	6810      	ldr	r0, [r2, #0]
     e68:	2101      	movs	r1, #1
     e6a:	40a9      	lsls	r1, r5
     e6c:	4308      	orrs	r0, r1
     e6e:	6010      	str	r0, [r2, #0]
     e70:	1c2a      	adds	r2, r5, #0
     e72:	3220      	adds	r2, #32
     e74:	0090      	lsls	r0, r2, #2
     e76:	1822      	adds	r2, r4, r0
     e78:	4640      	mov	r0, r8
     e7a:	50d0      	str	r0, [r2, r3]
     e7c:	2e02      	cmp	r6, #2
     e7e:	d1df      	bne.n	e40 <__register_exitproc+0x64>
     e80:	26c6      	movs	r6, #198	; 0xc6
     e82:	0073      	lsls	r3, r6, #1
     e84:	18e2      	adds	r2, r4, r3
     e86:	6810      	ldr	r0, [r2, #0]
     e88:	4301      	orrs	r1, r0
     e8a:	6011      	str	r1, [r2, #0]
     e8c:	e7d8      	b.n	e40 <__register_exitproc+0x64>
     e8e:	1c04      	adds	r4, r0, #0
     e90:	344d      	adds	r4, #77	; 0x4d
     e92:	34ff      	adds	r4, #255	; 0xff
     e94:	5044      	str	r4, [r0, r1]
     e96:	e7b2      	b.n	dfe <__register_exitproc+0x22>
     e98:	000036ec 	.word	0x000036ec
     e9c:	00000f01 	.word	0x00000f01

00000ea0 <__libc_fini_array>:
     ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea2:	4b15      	ldr	r3, [pc, #84]	; (ef8 <__libc_fini_array+0x58>)
     ea4:	4e15      	ldr	r6, [pc, #84]	; (efc <__libc_fini_array+0x5c>)
     ea6:	4647      	mov	r7, r8
     ea8:	1af0      	subs	r0, r6, r3
     eaa:	b480      	push	{r7}
     eac:	1086      	asrs	r6, r0, #2
     eae:	d01d      	beq.n	eec <__libc_fini_array+0x4c>
     eb0:	1e75      	subs	r5, r6, #1
     eb2:	00af      	lsls	r7, r5, #2
     eb4:	18ff      	adds	r7, r7, r3
     eb6:	2101      	movs	r1, #1
     eb8:	4029      	ands	r1, r5
     eba:	683a      	ldr	r2, [r7, #0]
     ebc:	4688      	mov	r8, r1
     ebe:	1f3c      	subs	r4, r7, #4
     ec0:	4790      	blx	r2
     ec2:	2d00      	cmp	r5, #0
     ec4:	d012      	beq.n	eec <__libc_fini_array+0x4c>
     ec6:	4643      	mov	r3, r8
     ec8:	2b00      	cmp	r3, #0
     eca:	d006      	beq.n	eda <__libc_fini_array+0x3a>
     ecc:	6824      	ldr	r4, [r4, #0]
     ece:	47a0      	blx	r4
     ed0:	1eb5      	subs	r5, r6, #2
     ed2:	1c3c      	adds	r4, r7, #0
     ed4:	3c08      	subs	r4, #8
     ed6:	2d00      	cmp	r5, #0
     ed8:	d008      	beq.n	eec <__libc_fini_array+0x4c>
     eda:	6820      	ldr	r0, [r4, #0]
     edc:	1f26      	subs	r6, r4, #4
     ede:	4780      	blx	r0
     ee0:	3d02      	subs	r5, #2
     ee2:	6837      	ldr	r7, [r6, #0]
     ee4:	47b8      	blx	r7
     ee6:	3c08      	subs	r4, #8
     ee8:	2d00      	cmp	r5, #0
     eea:	d1f6      	bne.n	eda <__libc_fini_array+0x3a>
     eec:	f002 fc4c 	bl	3788 <_fini>
     ef0:	bc04      	pop	{r2}
     ef2:	4690      	mov	r8, r2
     ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00003794 	.word	0x00003794
     efc:	00003798 	.word	0x00003798

00000f00 <malloc>:
     f00:	b508      	push	{r3, lr}
     f02:	4b03      	ldr	r3, [pc, #12]	; (f10 <malloc+0x10>)
     f04:	1c01      	adds	r1, r0, #0
     f06:	6818      	ldr	r0, [r3, #0]
     f08:	f000 f804 	bl	f14 <_malloc_r>
     f0c:	bd08      	pop	{r3, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	10000430 	.word	0x10000430

00000f14 <_malloc_r>:
     f14:	b5f0      	push	{r4, r5, r6, r7, lr}
     f16:	4656      	mov	r6, sl
     f18:	4644      	mov	r4, r8
     f1a:	465f      	mov	r7, fp
     f1c:	464d      	mov	r5, r9
     f1e:	b4f0      	push	{r4, r5, r6, r7}
     f20:	1c0c      	adds	r4, r1, #0
     f22:	340b      	adds	r4, #11
     f24:	b083      	sub	sp, #12
     f26:	1c06      	adds	r6, r0, #0
     f28:	2c16      	cmp	r4, #22
     f2a:	d92a      	bls.n	f82 <_malloc_r+0x6e>
     f2c:	2307      	movs	r3, #7
     f2e:	439c      	bics	r4, r3
     f30:	d42a      	bmi.n	f88 <_malloc_r+0x74>
     f32:	42a1      	cmp	r1, r4
     f34:	d828      	bhi.n	f88 <_malloc_r+0x74>
     f36:	1c30      	adds	r0, r6, #0
     f38:	f000 fa76 	bl	1428 <__malloc_lock>
     f3c:	48bc      	ldr	r0, [pc, #752]	; (1230 <__ram_size+0x230>)
     f3e:	4284      	cmp	r4, r0
     f40:	d826      	bhi.n	f90 <_malloc_r+0x7c>
     f42:	08e0      	lsrs	r0, r4, #3
     f44:	4dbb      	ldr	r5, [pc, #748]	; (1234 <__ram_size+0x234>)
     f46:	00c3      	lsls	r3, r0, #3
     f48:	18e9      	adds	r1, r5, r3
     f4a:	68cf      	ldr	r7, [r1, #12]
     f4c:	428f      	cmp	r7, r1
     f4e:	d100      	bne.n	f52 <_malloc_r+0x3e>
     f50:	e1d6      	b.n	1300 <__ram_size+0x300>
     f52:	6879      	ldr	r1, [r7, #4]
     f54:	2403      	movs	r4, #3
     f56:	43a1      	bics	r1, r4
     f58:	187c      	adds	r4, r7, r1
     f5a:	6860      	ldr	r0, [r4, #4]
     f5c:	68fd      	ldr	r5, [r7, #12]
     f5e:	68bb      	ldr	r3, [r7, #8]
     f60:	2201      	movs	r2, #1
     f62:	4302      	orrs	r2, r0
     f64:	60dd      	str	r5, [r3, #12]
     f66:	1c30      	adds	r0, r6, #0
     f68:	60ab      	str	r3, [r5, #8]
     f6a:	6062      	str	r2, [r4, #4]
     f6c:	f000 fa5e 	bl	142c <__malloc_unlock>
     f70:	1c38      	adds	r0, r7, #0
     f72:	3008      	adds	r0, #8
     f74:	b003      	add	sp, #12
     f76:	bc3c      	pop	{r2, r3, r4, r5}
     f78:	4690      	mov	r8, r2
     f7a:	4699      	mov	r9, r3
     f7c:	46a2      	mov	sl, r4
     f7e:	46ab      	mov	fp, r5
     f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f82:	2410      	movs	r4, #16
     f84:	42a1      	cmp	r1, r4
     f86:	d9d6      	bls.n	f36 <_malloc_r+0x22>
     f88:	270c      	movs	r7, #12
     f8a:	6037      	str	r7, [r6, #0]
     f8c:	2000      	movs	r0, #0
     f8e:	e7f1      	b.n	f74 <_malloc_r+0x60>
     f90:	0a61      	lsrs	r1, r4, #9
     f92:	d100      	bne.n	f96 <_malloc_r+0x82>
     f94:	e08b      	b.n	10ae <__ram_size+0xae>
     f96:	2904      	cmp	r1, #4
     f98:	d900      	bls.n	f9c <_malloc_r+0x88>
     f9a:	e13e      	b.n	121a <__ram_size+0x21a>
     f9c:	09a7      	lsrs	r7, r4, #6
     f9e:	3738      	adds	r7, #56	; 0x38
     fa0:	46b8      	mov	r8, r7
     fa2:	007b      	lsls	r3, r7, #1
     fa4:	4da3      	ldr	r5, [pc, #652]	; (1234 <__ram_size+0x234>)
     fa6:	0098      	lsls	r0, r3, #2
     fa8:	1829      	adds	r1, r5, r0
     faa:	68cf      	ldr	r7, [r1, #12]
     fac:	42b9      	cmp	r1, r7
     fae:	d013      	beq.n	fd8 <_malloc_r+0xc4>
     fb0:	687a      	ldr	r2, [r7, #4]
     fb2:	2303      	movs	r3, #3
     fb4:	439a      	bics	r2, r3
     fb6:	1b13      	subs	r3, r2, r4
     fb8:	2b0f      	cmp	r3, #15
     fba:	dc7c      	bgt.n	10b6 <__ram_size+0xb6>
     fbc:	2003      	movs	r0, #3
     fbe:	2b00      	cmp	r3, #0
     fc0:	db07      	blt.n	fd2 <_malloc_r+0xbe>
     fc2:	e07c      	b.n	10be <__ram_size+0xbe>
     fc4:	687a      	ldr	r2, [r7, #4]
     fc6:	4382      	bics	r2, r0
     fc8:	1b13      	subs	r3, r2, r4
     fca:	2b0f      	cmp	r3, #15
     fcc:	dc73      	bgt.n	10b6 <__ram_size+0xb6>
     fce:	2b00      	cmp	r3, #0
     fd0:	da75      	bge.n	10be <__ram_size+0xbe>
     fd2:	68ff      	ldr	r7, [r7, #12]
     fd4:	42b9      	cmp	r1, r7
     fd6:	d1f5      	bne.n	fc4 <_malloc_r+0xb0>
     fd8:	2201      	movs	r2, #1
     fda:	4490      	add	r8, r2
     fdc:	1c2b      	adds	r3, r5, #0
     fde:	692f      	ldr	r7, [r5, #16]
     fe0:	3308      	adds	r3, #8
     fe2:	429f      	cmp	r7, r3
     fe4:	d100      	bne.n	fe8 <_malloc_r+0xd4>
     fe6:	e168      	b.n	12ba <__ram_size+0x2ba>
     fe8:	6878      	ldr	r0, [r7, #4]
     fea:	2103      	movs	r1, #3
     fec:	4388      	bics	r0, r1
     fee:	1c02      	adds	r2, r0, #0
     ff0:	1b01      	subs	r1, r0, r4
     ff2:	290f      	cmp	r1, #15
     ff4:	dd00      	ble.n	ff8 <_malloc_r+0xe4>
     ff6:	e14f      	b.n	1298 <__ram_size+0x298>
     ff8:	616b      	str	r3, [r5, #20]
     ffa:	612b      	str	r3, [r5, #16]
     ffc:	2900      	cmp	r1, #0
     ffe:	da6d      	bge.n	10dc <__ram_size+0xdc>
    1000:	4b8d      	ldr	r3, [pc, #564]	; (1238 <__ram_size+0x238>)
    1002:	4298      	cmp	r0, r3
    1004:	d900      	bls.n	1008 <__ram_size+0x8>
    1006:	e127      	b.n	1258 <__ram_size+0x258>
    1008:	08c1      	lsrs	r1, r0, #3
    100a:	108b      	asrs	r3, r1, #2
    100c:	686a      	ldr	r2, [r5, #4]
    100e:	2001      	movs	r0, #1
    1010:	00c9      	lsls	r1, r1, #3
    1012:	4098      	lsls	r0, r3
    1014:	186b      	adds	r3, r5, r1
    1016:	4310      	orrs	r0, r2
    1018:	689a      	ldr	r2, [r3, #8]
    101a:	60fb      	str	r3, [r7, #12]
    101c:	60ba      	str	r2, [r7, #8]
    101e:	6068      	str	r0, [r5, #4]
    1020:	609f      	str	r7, [r3, #8]
    1022:	60d7      	str	r7, [r2, #12]
    1024:	4647      	mov	r7, r8
    1026:	10bb      	asrs	r3, r7, #2
    1028:	2101      	movs	r1, #1
    102a:	4099      	lsls	r1, r3
    102c:	4281      	cmp	r1, r0
    102e:	d85a      	bhi.n	10e6 <__ram_size+0xe6>
    1030:	4201      	tst	r1, r0
    1032:	d10d      	bne.n	1050 <__ram_size+0x50>
    1034:	4642      	mov	r2, r8
    1036:	2703      	movs	r7, #3
    1038:	43ba      	bics	r2, r7
    103a:	1c13      	adds	r3, r2, #0
    103c:	3304      	adds	r3, #4
    103e:	0049      	lsls	r1, r1, #1
    1040:	4698      	mov	r8, r3
    1042:	4201      	tst	r1, r0
    1044:	d104      	bne.n	1050 <__ram_size+0x50>
    1046:	2704      	movs	r7, #4
    1048:	0049      	lsls	r1, r1, #1
    104a:	44b8      	add	r8, r7
    104c:	4201      	tst	r1, r0
    104e:	d0fa      	beq.n	1046 <__ram_size+0x46>
    1050:	2003      	movs	r0, #3
    1052:	4684      	mov	ip, r0
    1054:	4642      	mov	r2, r8
    1056:	00d3      	lsls	r3, r2, #3
    1058:	195f      	adds	r7, r3, r5
    105a:	46bb      	mov	fp, r7
    105c:	1c38      	adds	r0, r7, #0
    105e:	46c1      	mov	r9, r8
    1060:	68c7      	ldr	r7, [r0, #12]
    1062:	42b8      	cmp	r0, r7
    1064:	d107      	bne.n	1076 <__ram_size+0x76>
    1066:	e12a      	b.n	12be <__ram_size+0x2be>
    1068:	2b00      	cmp	r3, #0
    106a:	db00      	blt.n	106e <__ram_size+0x6e>
    106c:	e151      	b.n	1312 <__ram_size+0x312>
    106e:	68ff      	ldr	r7, [r7, #12]
    1070:	42b8      	cmp	r0, r7
    1072:	d100      	bne.n	1076 <__ram_size+0x76>
    1074:	e123      	b.n	12be <__ram_size+0x2be>
    1076:	687a      	ldr	r2, [r7, #4]
    1078:	4663      	mov	r3, ip
    107a:	439a      	bics	r2, r3
    107c:	1b13      	subs	r3, r2, r4
    107e:	2b0f      	cmp	r3, #15
    1080:	ddf2      	ble.n	1068 <__ram_size+0x68>
    1082:	2001      	movs	r0, #1
    1084:	193a      	adds	r2, r7, r4
    1086:	4304      	orrs	r4, r0
    1088:	68b9      	ldr	r1, [r7, #8]
    108a:	607c      	str	r4, [r7, #4]
    108c:	68fc      	ldr	r4, [r7, #12]
    108e:	4318      	orrs	r0, r3
    1090:	60cc      	str	r4, [r1, #12]
    1092:	60a1      	str	r1, [r4, #8]
    1094:	616a      	str	r2, [r5, #20]
    1096:	612a      	str	r2, [r5, #16]
    1098:	3508      	adds	r5, #8
    109a:	6050      	str	r0, [r2, #4]
    109c:	60d5      	str	r5, [r2, #12]
    109e:	1c30      	adds	r0, r6, #0
    10a0:	6095      	str	r5, [r2, #8]
    10a2:	50d3      	str	r3, [r2, r3]
    10a4:	f000 f9c2 	bl	142c <__malloc_unlock>
    10a8:	1c38      	adds	r0, r7, #0
    10aa:	3008      	adds	r0, #8
    10ac:	e762      	b.n	f74 <_malloc_r+0x60>
    10ae:	08e3      	lsrs	r3, r4, #3
    10b0:	4698      	mov	r8, r3
    10b2:	005b      	lsls	r3, r3, #1
    10b4:	e776      	b.n	fa4 <_malloc_r+0x90>
    10b6:	2701      	movs	r7, #1
    10b8:	4279      	negs	r1, r7
    10ba:	4488      	add	r8, r1
    10bc:	e78c      	b.n	fd8 <_malloc_r+0xc4>
    10be:	68bd      	ldr	r5, [r7, #8]
    10c0:	68fc      	ldr	r4, [r7, #12]
    10c2:	2301      	movs	r3, #1
    10c4:	60ec      	str	r4, [r5, #12]
    10c6:	60a5      	str	r5, [r4, #8]
    10c8:	18bd      	adds	r5, r7, r2
    10ca:	6868      	ldr	r0, [r5, #4]
    10cc:	4303      	orrs	r3, r0
    10ce:	1c30      	adds	r0, r6, #0
    10d0:	606b      	str	r3, [r5, #4]
    10d2:	f000 f9ab 	bl	142c <__malloc_unlock>
    10d6:	1c38      	adds	r0, r7, #0
    10d8:	3008      	adds	r0, #8
    10da:	e74b      	b.n	f74 <_malloc_r+0x60>
    10dc:	183d      	adds	r5, r7, r0
    10de:	686a      	ldr	r2, [r5, #4]
    10e0:	2301      	movs	r3, #1
    10e2:	4313      	orrs	r3, r2
    10e4:	e7f3      	b.n	10ce <__ram_size+0xce>
    10e6:	68af      	ldr	r7, [r5, #8]
    10e8:	2103      	movs	r1, #3
    10ea:	687b      	ldr	r3, [r7, #4]
    10ec:	438b      	bics	r3, r1
    10ee:	4699      	mov	r9, r3
    10f0:	42a3      	cmp	r3, r4
    10f2:	d303      	bcc.n	10fc <__ram_size+0xfc>
    10f4:	1b18      	subs	r0, r3, r4
    10f6:	280f      	cmp	r0, #15
    10f8:	dd00      	ble.n	10fc <__ram_size+0xfc>
    10fa:	e080      	b.n	11fe <__ram_size+0x1fe>
    10fc:	4648      	mov	r0, r9
    10fe:	183a      	adds	r2, r7, r0
    1100:	494e      	ldr	r1, [pc, #312]	; (123c <__ram_size+0x23c>)
    1102:	484f      	ldr	r0, [pc, #316]	; (1240 <__ram_size+0x240>)
    1104:	680b      	ldr	r3, [r1, #0]
    1106:	6801      	ldr	r1, [r0, #0]
    1108:	9201      	str	r2, [sp, #4]
    110a:	18e3      	adds	r3, r4, r3
    110c:	4683      	mov	fp, r0
    110e:	1c48      	adds	r0, r1, #1
    1110:	d100      	bne.n	1114 <__ram_size+0x114>
    1112:	e141      	b.n	1398 <__ram_size+0x398>
    1114:	484b      	ldr	r0, [pc, #300]	; (1244 <__ram_size+0x244>)
    1116:	181b      	adds	r3, r3, r0
    1118:	0b1a      	lsrs	r2, r3, #12
    111a:	0311      	lsls	r1, r2, #12
    111c:	9100      	str	r1, [sp, #0]
    111e:	1c30      	adds	r0, r6, #0
    1120:	9900      	ldr	r1, [sp, #0]
    1122:	f000 f9bd 	bl	14a0 <_sbrk_r>
    1126:	4680      	mov	r8, r0
    1128:	1c42      	adds	r2, r0, #1
    112a:	d05d      	beq.n	11e8 <__ram_size+0x1e8>
    112c:	9b01      	ldr	r3, [sp, #4]
    112e:	4543      	cmp	r3, r8
    1130:	d900      	bls.n	1134 <__ram_size+0x134>
    1132:	e106      	b.n	1342 <__ram_size+0x342>
    1134:	4844      	ldr	r0, [pc, #272]	; (1248 <__ram_size+0x248>)
    1136:	9900      	ldr	r1, [sp, #0]
    1138:	6803      	ldr	r3, [r0, #0]
    113a:	4682      	mov	sl, r0
    113c:	18cb      	adds	r3, r1, r3
    113e:	6003      	str	r3, [r0, #0]
    1140:	9801      	ldr	r0, [sp, #4]
    1142:	4540      	cmp	r0, r8
    1144:	d100      	bne.n	1148 <__ram_size+0x148>
    1146:	e135      	b.n	13b4 <__ram_size+0x3b4>
    1148:	465a      	mov	r2, fp
    114a:	6810      	ldr	r0, [r2, #0]
    114c:	1c42      	adds	r2, r0, #1
    114e:	d100      	bne.n	1152 <__ram_size+0x152>
    1150:	e147      	b.n	13e2 <__ram_size+0x3e2>
    1152:	9a01      	ldr	r2, [sp, #4]
    1154:	4641      	mov	r1, r8
    1156:	1a88      	subs	r0, r1, r2
    1158:	181b      	adds	r3, r3, r0
    115a:	4651      	mov	r1, sl
    115c:	600b      	str	r3, [r1, #0]
    115e:	2307      	movs	r3, #7
    1160:	4641      	mov	r1, r8
    1162:	400b      	ands	r3, r1
    1164:	d100      	bne.n	1168 <__ram_size+0x168>
    1166:	e0fe      	b.n	1366 <__ram_size+0x366>
    1168:	1ac8      	subs	r0, r1, r3
    116a:	4938      	ldr	r1, [pc, #224]	; (124c <__ram_size+0x24c>)
    116c:	3008      	adds	r0, #8
    116e:	4680      	mov	r8, r0
    1170:	1acb      	subs	r3, r1, r3
    1172:	9a00      	ldr	r2, [sp, #0]
    1174:	1c10      	adds	r0, r2, #0
    1176:	4440      	add	r0, r8
    1178:	0501      	lsls	r1, r0, #20
    117a:	0d0a      	lsrs	r2, r1, #20
    117c:	1a9b      	subs	r3, r3, r2
    117e:	1c19      	adds	r1, r3, #0
    1180:	1c30      	adds	r0, r6, #0
    1182:	469b      	mov	fp, r3
    1184:	f000 f98c 	bl	14a0 <_sbrk_r>
    1188:	1c41      	adds	r1, r0, #1
    118a:	d100      	bne.n	118e <__ram_size+0x18e>
    118c:	e11d      	b.n	13ca <__ram_size+0x3ca>
    118e:	4641      	mov	r1, r8
    1190:	1a40      	subs	r0, r0, r1
    1192:	4458      	add	r0, fp
    1194:	2201      	movs	r2, #1
    1196:	4310      	orrs	r0, r2
    1198:	4652      	mov	r2, sl
    119a:	6811      	ldr	r1, [r2, #0]
    119c:	1c0b      	adds	r3, r1, #0
    119e:	445b      	add	r3, fp
    11a0:	4641      	mov	r1, r8
    11a2:	6013      	str	r3, [r2, #0]
    11a4:	60a9      	str	r1, [r5, #8]
    11a6:	6048      	str	r0, [r1, #4]
    11a8:	42af      	cmp	r7, r5
    11aa:	d013      	beq.n	11d4 <__ram_size+0x1d4>
    11ac:	4648      	mov	r0, r9
    11ae:	280f      	cmp	r0, #15
    11b0:	d800      	bhi.n	11b4 <__ram_size+0x1b4>
    11b2:	e0e4      	b.n	137e <__ram_size+0x37e>
    11b4:	464a      	mov	r2, r9
    11b6:	6878      	ldr	r0, [r7, #4]
    11b8:	2107      	movs	r1, #7
    11ba:	3a0c      	subs	r2, #12
    11bc:	438a      	bics	r2, r1
    11be:	2101      	movs	r1, #1
    11c0:	4001      	ands	r1, r0
    11c2:	4311      	orrs	r1, r2
    11c4:	6079      	str	r1, [r7, #4]
    11c6:	2005      	movs	r0, #5
    11c8:	18b9      	adds	r1, r7, r2
    11ca:	6048      	str	r0, [r1, #4]
    11cc:	6088      	str	r0, [r1, #8]
    11ce:	2a0f      	cmp	r2, #15
    11d0:	d900      	bls.n	11d4 <__ram_size+0x1d4>
    11d2:	e0fe      	b.n	13d2 <__ram_size+0x3d2>
    11d4:	4f1e      	ldr	r7, [pc, #120]	; (1250 <__ram_size+0x250>)
    11d6:	6839      	ldr	r1, [r7, #0]
    11d8:	428b      	cmp	r3, r1
    11da:	d900      	bls.n	11de <__ram_size+0x1de>
    11dc:	603b      	str	r3, [r7, #0]
    11de:	481d      	ldr	r0, [pc, #116]	; (1254 <__ram_size+0x254>)
    11e0:	6802      	ldr	r2, [r0, #0]
    11e2:	4293      	cmp	r3, r2
    11e4:	d900      	bls.n	11e8 <__ram_size+0x1e8>
    11e6:	6003      	str	r3, [r0, #0]
    11e8:	68af      	ldr	r7, [r5, #8]
    11ea:	2303      	movs	r3, #3
    11ec:	6879      	ldr	r1, [r7, #4]
    11ee:	4399      	bics	r1, r3
    11f0:	1b08      	subs	r0, r1, r4
    11f2:	42a1      	cmp	r1, r4
    11f4:	d200      	bcs.n	11f8 <__ram_size+0x1f8>
    11f6:	e0a8      	b.n	134a <__ram_size+0x34a>
    11f8:	280f      	cmp	r0, #15
    11fa:	dc00      	bgt.n	11fe <__ram_size+0x1fe>
    11fc:	e0a5      	b.n	134a <__ram_size+0x34a>
    11fe:	2201      	movs	r2, #1
    1200:	1c23      	adds	r3, r4, #0
    1202:	4310      	orrs	r0, r2
    1204:	4313      	orrs	r3, r2
    1206:	193c      	adds	r4, r7, r4
    1208:	607b      	str	r3, [r7, #4]
    120a:	60ac      	str	r4, [r5, #8]
    120c:	6060      	str	r0, [r4, #4]
    120e:	1c30      	adds	r0, r6, #0
    1210:	f000 f90c 	bl	142c <__malloc_unlock>
    1214:	1c38      	adds	r0, r7, #0
    1216:	3008      	adds	r0, #8
    1218:	e6ac      	b.n	f74 <_malloc_r+0x60>
    121a:	2914      	cmp	r1, #20
    121c:	d800      	bhi.n	1220 <__ram_size+0x220>
    121e:	e087      	b.n	1330 <__ram_size+0x330>
    1220:	2954      	cmp	r1, #84	; 0x54
    1222:	d900      	bls.n	1226 <__ram_size+0x226>
    1224:	e096      	b.n	1354 <__ram_size+0x354>
    1226:	0b25      	lsrs	r5, r4, #12
    1228:	356e      	adds	r5, #110	; 0x6e
    122a:	46a8      	mov	r8, r5
    122c:	006b      	lsls	r3, r5, #1
    122e:	e6b9      	b.n	fa4 <_malloc_r+0x90>
    1230:	000001f7 	.word	0x000001f7
    1234:	10000434 	.word	0x10000434
    1238:	000001ff 	.word	0x000001ff
    123c:	10000b08 	.word	0x10000b08
    1240:	10000840 	.word	0x10000840
    1244:	0000100f 	.word	0x0000100f
    1248:	10000b0c 	.word	0x10000b0c
    124c:	00001008 	.word	0x00001008
    1250:	10000b04 	.word	0x10000b04
    1254:	10000b00 	.word	0x10000b00
    1258:	0a40      	lsrs	r0, r0, #9
    125a:	2804      	cmp	r0, #4
    125c:	d96c      	bls.n	1338 <__ram_size+0x338>
    125e:	2814      	cmp	r0, #20
    1260:	d900      	bls.n	1264 <__ram_size+0x264>
    1262:	e09c      	b.n	139e <__ram_size+0x39e>
    1264:	305b      	adds	r0, #91	; 0x5b
    1266:	4682      	mov	sl, r0
    1268:	0040      	lsls	r0, r0, #1
    126a:	0080      	lsls	r0, r0, #2
    126c:	1943      	adds	r3, r0, r5
    126e:	4699      	mov	r9, r3
    1270:	689b      	ldr	r3, [r3, #8]
    1272:	2103      	movs	r1, #3
    1274:	468c      	mov	ip, r1
    1276:	454b      	cmp	r3, r9
    1278:	d078      	beq.n	136c <__ram_size+0x36c>
    127a:	6859      	ldr	r1, [r3, #4]
    127c:	4660      	mov	r0, ip
    127e:	4381      	bics	r1, r0
    1280:	428a      	cmp	r2, r1
    1282:	d202      	bcs.n	128a <__ram_size+0x28a>
    1284:	689b      	ldr	r3, [r3, #8]
    1286:	4599      	cmp	r9, r3
    1288:	d1f7      	bne.n	127a <__ram_size+0x27a>
    128a:	68d9      	ldr	r1, [r3, #12]
    128c:	6868      	ldr	r0, [r5, #4]
    128e:	60f9      	str	r1, [r7, #12]
    1290:	60bb      	str	r3, [r7, #8]
    1292:	60df      	str	r7, [r3, #12]
    1294:	608f      	str	r7, [r1, #8]
    1296:	e6c5      	b.n	1024 <__ram_size+0x24>
    1298:	2001      	movs	r0, #1
    129a:	193a      	adds	r2, r7, r4
    129c:	4304      	orrs	r4, r0
    129e:	4308      	orrs	r0, r1
    12a0:	607c      	str	r4, [r7, #4]
    12a2:	616a      	str	r2, [r5, #20]
    12a4:	612a      	str	r2, [r5, #16]
    12a6:	6050      	str	r0, [r2, #4]
    12a8:	60d3      	str	r3, [r2, #12]
    12aa:	1c30      	adds	r0, r6, #0
    12ac:	6093      	str	r3, [r2, #8]
    12ae:	5051      	str	r1, [r2, r1]
    12b0:	f000 f8bc 	bl	142c <__malloc_unlock>
    12b4:	1c38      	adds	r0, r7, #0
    12b6:	3008      	adds	r0, #8
    12b8:	e65c      	b.n	f74 <_malloc_r+0x60>
    12ba:	6868      	ldr	r0, [r5, #4]
    12bc:	e6b2      	b.n	1024 <__ram_size+0x24>
    12be:	2201      	movs	r2, #1
    12c0:	4491      	add	r9, r2
    12c2:	4663      	mov	r3, ip
    12c4:	464f      	mov	r7, r9
    12c6:	3008      	adds	r0, #8
    12c8:	423b      	tst	r3, r7
    12ca:	d000      	beq.n	12ce <__ram_size+0x2ce>
    12cc:	e6c8      	b.n	1060 <__ram_size+0x60>
    12ce:	465a      	mov	r2, fp
    12d0:	4643      	mov	r3, r8
    12d2:	4660      	mov	r0, ip
    12d4:	4218      	tst	r0, r3
    12d6:	d100      	bne.n	12da <__ram_size+0x2da>
    12d8:	e098      	b.n	140c <__ram_size+0x40c>
    12da:	1c17      	adds	r7, r2, #0
    12dc:	6812      	ldr	r2, [r2, #0]
    12de:	3f08      	subs	r7, #8
    12e0:	3b01      	subs	r3, #1
    12e2:	42ba      	cmp	r2, r7
    12e4:	d0f5      	beq.n	12d2 <__ram_size+0x2d2>
    12e6:	686f      	ldr	r7, [r5, #4]
    12e8:	0049      	lsls	r1, r1, #1
    12ea:	42b9      	cmp	r1, r7
    12ec:	d900      	bls.n	12f0 <__ram_size+0x2f0>
    12ee:	e6fa      	b.n	10e6 <__ram_size+0xe6>
    12f0:	2900      	cmp	r1, #0
    12f2:	d100      	bne.n	12f6 <__ram_size+0x2f6>
    12f4:	e6f7      	b.n	10e6 <__ram_size+0xe6>
    12f6:	4239      	tst	r1, r7
    12f8:	d100      	bne.n	12fc <__ram_size+0x2fc>
    12fa:	e08b      	b.n	1414 <__ram_size+0x414>
    12fc:	46c8      	mov	r8, r9
    12fe:	e6a9      	b.n	1054 <__ram_size+0x54>
    1300:	1c3a      	adds	r2, r7, #0
    1302:	697f      	ldr	r7, [r7, #20]
    1304:	3002      	adds	r0, #2
    1306:	3208      	adds	r2, #8
    1308:	4680      	mov	r8, r0
    130a:	42ba      	cmp	r2, r7
    130c:	d100      	bne.n	1310 <__ram_size+0x310>
    130e:	e665      	b.n	fdc <_malloc_r+0xc8>
    1310:	e61f      	b.n	f52 <_malloc_r+0x3e>
    1312:	18ba      	adds	r2, r7, r2
    1314:	6854      	ldr	r4, [r2, #4]
    1316:	68b8      	ldr	r0, [r7, #8]
    1318:	68fd      	ldr	r5, [r7, #12]
    131a:	2301      	movs	r3, #1
    131c:	4323      	orrs	r3, r4
    131e:	60c5      	str	r5, [r0, #12]
    1320:	60a8      	str	r0, [r5, #8]
    1322:	6053      	str	r3, [r2, #4]
    1324:	1c30      	adds	r0, r6, #0
    1326:	f000 f881 	bl	142c <__malloc_unlock>
    132a:	1c38      	adds	r0, r7, #0
    132c:	3008      	adds	r0, #8
    132e:	e621      	b.n	f74 <_malloc_r+0x60>
    1330:	315b      	adds	r1, #91	; 0x5b
    1332:	4688      	mov	r8, r1
    1334:	004b      	lsls	r3, r1, #1
    1336:	e635      	b.n	fa4 <_malloc_r+0x90>
    1338:	0991      	lsrs	r1, r2, #6
    133a:	3138      	adds	r1, #56	; 0x38
    133c:	468a      	mov	sl, r1
    133e:	0048      	lsls	r0, r1, #1
    1340:	e793      	b.n	126a <__ram_size+0x26a>
    1342:	42af      	cmp	r7, r5
    1344:	d000      	beq.n	1348 <__ram_size+0x348>
    1346:	e74f      	b.n	11e8 <__ram_size+0x1e8>
    1348:	e6f4      	b.n	1134 <__ram_size+0x134>
    134a:	1c30      	adds	r0, r6, #0
    134c:	f000 f86e 	bl	142c <__malloc_unlock>
    1350:	2000      	movs	r0, #0
    1352:	e60f      	b.n	f74 <_malloc_r+0x60>
    1354:	22aa      	movs	r2, #170	; 0xaa
    1356:	0055      	lsls	r5, r2, #1
    1358:	42a9      	cmp	r1, r5
    135a:	d815      	bhi.n	1388 <__ram_size+0x388>
    135c:	0be2      	lsrs	r2, r4, #15
    135e:	3277      	adds	r2, #119	; 0x77
    1360:	4690      	mov	r8, r2
    1362:	0053      	lsls	r3, r2, #1
    1364:	e61e      	b.n	fa4 <_malloc_r+0x90>
    1366:	2280      	movs	r2, #128	; 0x80
    1368:	0153      	lsls	r3, r2, #5
    136a:	e702      	b.n	1172 <__ram_size+0x172>
    136c:	4652      	mov	r2, sl
    136e:	1091      	asrs	r1, r2, #2
    1370:	2001      	movs	r0, #1
    1372:	686a      	ldr	r2, [r5, #4]
    1374:	4088      	lsls	r0, r1
    1376:	4310      	orrs	r0, r2
    1378:	6068      	str	r0, [r5, #4]
    137a:	1c19      	adds	r1, r3, #0
    137c:	e787      	b.n	128e <__ram_size+0x28e>
    137e:	2201      	movs	r2, #1
    1380:	604a      	str	r2, [r1, #4]
    1382:	4647      	mov	r7, r8
    1384:	2100      	movs	r1, #0
    1386:	e733      	b.n	11f0 <__ram_size+0x1f0>
    1388:	4f26      	ldr	r7, [pc, #152]	; (1424 <__ram_size+0x424>)
    138a:	42b9      	cmp	r1, r7
    138c:	d80e      	bhi.n	13ac <__ram_size+0x3ac>
    138e:	0ca1      	lsrs	r1, r4, #18
    1390:	317c      	adds	r1, #124	; 0x7c
    1392:	4688      	mov	r8, r1
    1394:	004b      	lsls	r3, r1, #1
    1396:	e605      	b.n	fa4 <_malloc_r+0x90>
    1398:	3310      	adds	r3, #16
    139a:	9300      	str	r3, [sp, #0]
    139c:	e6bf      	b.n	111e <__ram_size+0x11e>
    139e:	2854      	cmp	r0, #84	; 0x54
    13a0:	d823      	bhi.n	13ea <__ram_size+0x3ea>
    13a2:	0b13      	lsrs	r3, r2, #12
    13a4:	336e      	adds	r3, #110	; 0x6e
    13a6:	469a      	mov	sl, r3
    13a8:	0058      	lsls	r0, r3, #1
    13aa:	e75e      	b.n	126a <__ram_size+0x26a>
    13ac:	207e      	movs	r0, #126	; 0x7e
    13ae:	23fc      	movs	r3, #252	; 0xfc
    13b0:	4680      	mov	r8, r0
    13b2:	e5f7      	b.n	fa4 <_malloc_r+0x90>
    13b4:	0501      	lsls	r1, r0, #20
    13b6:	d000      	beq.n	13ba <__ram_size+0x3ba>
    13b8:	e6c6      	b.n	1148 <__ram_size+0x148>
    13ba:	9900      	ldr	r1, [sp, #0]
    13bc:	68af      	ldr	r7, [r5, #8]
    13be:	1c08      	adds	r0, r1, #0
    13c0:	4448      	add	r0, r9
    13c2:	2201      	movs	r2, #1
    13c4:	4302      	orrs	r2, r0
    13c6:	607a      	str	r2, [r7, #4]
    13c8:	e704      	b.n	11d4 <__ram_size+0x1d4>
    13ca:	2300      	movs	r3, #0
    13cc:	2001      	movs	r0, #1
    13ce:	469b      	mov	fp, r3
    13d0:	e6e2      	b.n	1198 <__ram_size+0x198>
    13d2:	1c39      	adds	r1, r7, #0
    13d4:	3108      	adds	r1, #8
    13d6:	1c30      	adds	r0, r6, #0
    13d8:	4657      	mov	r7, sl
    13da:	f000 f8df 	bl	159c <_free_r>
    13de:	683b      	ldr	r3, [r7, #0]
    13e0:	e6f8      	b.n	11d4 <__ram_size+0x1d4>
    13e2:	4642      	mov	r2, r8
    13e4:	4658      	mov	r0, fp
    13e6:	6002      	str	r2, [r0, #0]
    13e8:	e6b9      	b.n	115e <__ram_size+0x15e>
    13ea:	21aa      	movs	r1, #170	; 0xaa
    13ec:	004b      	lsls	r3, r1, #1
    13ee:	4298      	cmp	r0, r3
    13f0:	d804      	bhi.n	13fc <__ram_size+0x3fc>
    13f2:	0bd0      	lsrs	r0, r2, #15
    13f4:	3077      	adds	r0, #119	; 0x77
    13f6:	4682      	mov	sl, r0
    13f8:	0040      	lsls	r0, r0, #1
    13fa:	e736      	b.n	126a <__ram_size+0x26a>
    13fc:	4909      	ldr	r1, [pc, #36]	; (1424 <__ram_size+0x424>)
    13fe:	4288      	cmp	r0, r1
    1400:	d80c      	bhi.n	141c <__ram_size+0x41c>
    1402:	0c91      	lsrs	r1, r2, #18
    1404:	317c      	adds	r1, #124	; 0x7c
    1406:	468a      	mov	sl, r1
    1408:	0048      	lsls	r0, r1, #1
    140a:	e72e      	b.n	126a <__ram_size+0x26a>
    140c:	686f      	ldr	r7, [r5, #4]
    140e:	438f      	bics	r7, r1
    1410:	606f      	str	r7, [r5, #4]
    1412:	e769      	b.n	12e8 <__ram_size+0x2e8>
    1414:	2004      	movs	r0, #4
    1416:	4481      	add	r9, r0
    1418:	0049      	lsls	r1, r1, #1
    141a:	e76c      	b.n	12f6 <__ram_size+0x2f6>
    141c:	237e      	movs	r3, #126	; 0x7e
    141e:	20fc      	movs	r0, #252	; 0xfc
    1420:	469a      	mov	sl, r3
    1422:	e722      	b.n	126a <__ram_size+0x26a>
    1424:	00000554 	.word	0x00000554

00001428 <__malloc_lock>:
    1428:	4770      	bx	lr
    142a:	46c0      	nop			; (mov r8, r8)

0000142c <__malloc_unlock>:
    142c:	4770      	bx	lr
    142e:	46c0      	nop			; (mov r8, r8)

00001430 <__fpclassifyd>:
    1430:	1c0b      	adds	r3, r1, #0
    1432:	1c01      	adds	r1, r0, #0
    1434:	b530      	push	{r4, r5, lr}
    1436:	4319      	orrs	r1, r3
    1438:	2202      	movs	r2, #2
    143a:	2900      	cmp	r1, #0
    143c:	d101      	bne.n	1442 <__fpclassifyd+0x12>
    143e:	1c10      	adds	r0, r2, #0
    1440:	bd30      	pop	{r4, r5, pc}
    1442:	2480      	movs	r4, #128	; 0x80
    1444:	0625      	lsls	r5, r4, #24
    1446:	42ab      	cmp	r3, r5
    1448:	d01e      	beq.n	1488 <__fpclassifyd+0x58>
    144a:	4a11      	ldr	r2, [pc, #68]	; (1490 <__fpclassifyd+0x60>)
    144c:	4911      	ldr	r1, [pc, #68]	; (1494 <__fpclassifyd+0x64>)
    144e:	189c      	adds	r4, r3, r2
    1450:	2204      	movs	r2, #4
    1452:	428c      	cmp	r4, r1
    1454:	d9f3      	bls.n	143e <__fpclassifyd+0xe>
    1456:	4d10      	ldr	r5, [pc, #64]	; (1498 <__fpclassifyd+0x68>)
    1458:	195c      	adds	r4, r3, r5
    145a:	428c      	cmp	r4, r1
    145c:	d9ef      	bls.n	143e <__fpclassifyd+0xe>
    145e:	490f      	ldr	r1, [pc, #60]	; (149c <__fpclassifyd+0x6c>)
    1460:	2203      	movs	r2, #3
    1462:	428b      	cmp	r3, r1
    1464:	d9eb      	bls.n	143e <__fpclassifyd+0xe>
    1466:	2280      	movs	r2, #128	; 0x80
    1468:	0615      	lsls	r5, r2, #24
    146a:	490c      	ldr	r1, [pc, #48]	; (149c <__fpclassifyd+0x6c>)
    146c:	195c      	adds	r4, r3, r5
    146e:	2203      	movs	r2, #3
    1470:	428c      	cmp	r4, r1
    1472:	d9e4      	bls.n	143e <__fpclassifyd+0xe>
    1474:	4a08      	ldr	r2, [pc, #32]	; (1498 <__fpclassifyd+0x68>)
    1476:	4293      	cmp	r3, r2
    1478:	d003      	beq.n	1482 <__fpclassifyd+0x52>
    147a:	4d05      	ldr	r5, [pc, #20]	; (1490 <__fpclassifyd+0x60>)
    147c:	2200      	movs	r2, #0
    147e:	42ab      	cmp	r3, r5
    1480:	d1dd      	bne.n	143e <__fpclassifyd+0xe>
    1482:	4242      	negs	r2, r0
    1484:	4142      	adcs	r2, r0
    1486:	e7da      	b.n	143e <__fpclassifyd+0xe>
    1488:	2800      	cmp	r0, #0
    148a:	d0d8      	beq.n	143e <__fpclassifyd+0xe>
    148c:	e7eb      	b.n	1466 <__fpclassifyd+0x36>
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	fff00000 	.word	0xfff00000
    1494:	7fdfffff 	.word	0x7fdfffff
    1498:	7ff00000 	.word	0x7ff00000
    149c:	000fffff 	.word	0x000fffff

000014a0 <_sbrk_r>:
    14a0:	b538      	push	{r3, r4, r5, lr}
    14a2:	4c07      	ldr	r4, [pc, #28]	; (14c0 <_sbrk_r+0x20>)
    14a4:	2300      	movs	r3, #0
    14a6:	1c05      	adds	r5, r0, #0
    14a8:	1c08      	adds	r0, r1, #0
    14aa:	6023      	str	r3, [r4, #0]
    14ac:	f000 f93e 	bl	172c <_sbrk>
    14b0:	1c43      	adds	r3, r0, #1
    14b2:	d000      	beq.n	14b6 <_sbrk_r+0x16>
    14b4:	bd38      	pop	{r3, r4, r5, pc}
    14b6:	6821      	ldr	r1, [r4, #0]
    14b8:	2900      	cmp	r1, #0
    14ba:	d0fb      	beq.n	14b4 <_sbrk_r+0x14>
    14bc:	6029      	str	r1, [r5, #0]
    14be:	e7f9      	b.n	14b4 <_sbrk_r+0x14>
    14c0:	10000b38 	.word	0x10000b38

000014c4 <strlen>:
    14c4:	2300      	movs	r3, #0
    14c6:	5cc2      	ldrb	r2, [r0, r3]
    14c8:	3301      	adds	r3, #1
    14ca:	2a00      	cmp	r2, #0
    14cc:	d1fb      	bne.n	14c6 <strlen+0x2>
    14ce:	1e58      	subs	r0, r3, #1
    14d0:	4770      	bx	lr
    14d2:	46c0      	nop			; (mov r8, r8)

000014d4 <register_fini>:
    14d4:	b508      	push	{r3, lr}
    14d6:	4b03      	ldr	r3, [pc, #12]	; (14e4 <register_fini+0x10>)
    14d8:	2b00      	cmp	r3, #0
    14da:	d002      	beq.n	14e2 <register_fini+0xe>
    14dc:	4802      	ldr	r0, [pc, #8]	; (14e8 <register_fini+0x14>)
    14de:	f000 f805 	bl	14ec <atexit>
    14e2:	bd08      	pop	{r3, pc}
    14e4:	00000000 	.word	0x00000000
    14e8:	00000ea1 	.word	0x00000ea1

000014ec <atexit>:
    14ec:	b508      	push	{r3, lr}
    14ee:	1c01      	adds	r1, r0, #0
    14f0:	2200      	movs	r2, #0
    14f2:	2000      	movs	r0, #0
    14f4:	2300      	movs	r3, #0
    14f6:	f7ff fc71 	bl	ddc <__register_exitproc>
    14fa:	bd08      	pop	{r3, pc}

000014fc <_malloc_trim_r>:
    14fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14fe:	1c0f      	adds	r7, r1, #0
    1500:	1c04      	adds	r4, r0, #0
    1502:	f7ff ff91 	bl	1428 <__malloc_lock>
    1506:	4d20      	ldr	r5, [pc, #128]	; (1588 <_malloc_trim_r+0x8c>)
    1508:	2003      	movs	r0, #3
    150a:	68ab      	ldr	r3, [r5, #8]
    150c:	4a1f      	ldr	r2, [pc, #124]	; (158c <_malloc_trim_r+0x90>)
    150e:	685e      	ldr	r6, [r3, #4]
    1510:	4386      	bics	r6, r0
    1512:	18b1      	adds	r1, r6, r2
    1514:	1bcf      	subs	r7, r1, r7
    1516:	0b3b      	lsrs	r3, r7, #12
    1518:	481d      	ldr	r0, [pc, #116]	; (1590 <_malloc_trim_r+0x94>)
    151a:	3b01      	subs	r3, #1
    151c:	031f      	lsls	r7, r3, #12
    151e:	4287      	cmp	r7, r0
    1520:	dd07      	ble.n	1532 <_malloc_trim_r+0x36>
    1522:	2100      	movs	r1, #0
    1524:	1c20      	adds	r0, r4, #0
    1526:	f7ff ffbb 	bl	14a0 <_sbrk_r>
    152a:	68aa      	ldr	r2, [r5, #8]
    152c:	1991      	adds	r1, r2, r6
    152e:	4288      	cmp	r0, r1
    1530:	d004      	beq.n	153c <_malloc_trim_r+0x40>
    1532:	1c20      	adds	r0, r4, #0
    1534:	f7ff ff7a 	bl	142c <__malloc_unlock>
    1538:	2000      	movs	r0, #0
    153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    153c:	4279      	negs	r1, r7
    153e:	1c20      	adds	r0, r4, #0
    1540:	f7ff ffae 	bl	14a0 <_sbrk_r>
    1544:	3001      	adds	r0, #1
    1546:	d00d      	beq.n	1564 <_malloc_trim_r+0x68>
    1548:	4812      	ldr	r0, [pc, #72]	; (1594 <_malloc_trim_r+0x98>)
    154a:	68ad      	ldr	r5, [r5, #8]
    154c:	6802      	ldr	r2, [r0, #0]
    154e:	1bf6      	subs	r6, r6, r7
    1550:	2301      	movs	r3, #1
    1552:	431e      	orrs	r6, r3
    1554:	1bd7      	subs	r7, r2, r7
    1556:	6007      	str	r7, [r0, #0]
    1558:	606e      	str	r6, [r5, #4]
    155a:	1c20      	adds	r0, r4, #0
    155c:	f7ff ff66 	bl	142c <__malloc_unlock>
    1560:	2001      	movs	r0, #1
    1562:	e7ea      	b.n	153a <_malloc_trim_r+0x3e>
    1564:	1c20      	adds	r0, r4, #0
    1566:	2100      	movs	r1, #0
    1568:	f7ff ff9a 	bl	14a0 <_sbrk_r>
    156c:	68ad      	ldr	r5, [r5, #8]
    156e:	1b46      	subs	r6, r0, r5
    1570:	2e0f      	cmp	r6, #15
    1572:	ddde      	ble.n	1532 <_malloc_trim_r+0x36>
    1574:	4908      	ldr	r1, [pc, #32]	; (1598 <_malloc_trim_r+0x9c>)
    1576:	4a07      	ldr	r2, [pc, #28]	; (1594 <_malloc_trim_r+0x98>)
    1578:	680b      	ldr	r3, [r1, #0]
    157a:	2701      	movs	r7, #1
    157c:	1ac0      	subs	r0, r0, r3
    157e:	433e      	orrs	r6, r7
    1580:	6010      	str	r0, [r2, #0]
    1582:	606e      	str	r6, [r5, #4]
    1584:	e7d5      	b.n	1532 <_malloc_trim_r+0x36>
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	10000434 	.word	0x10000434
    158c:	00000fef 	.word	0x00000fef
    1590:	00000fff 	.word	0x00000fff
    1594:	10000b0c 	.word	0x10000b0c
    1598:	10000840 	.word	0x10000840

0000159c <_free_r>:
    159c:	b5f0      	push	{r4, r5, r6, r7, lr}
    159e:	4647      	mov	r7, r8
    15a0:	b480      	push	{r7}
    15a2:	1c05      	adds	r5, r0, #0
    15a4:	1e0c      	subs	r4, r1, #0
    15a6:	d055      	beq.n	1654 <_free_r+0xb8>
    15a8:	f7ff ff3e 	bl	1428 <__malloc_lock>
    15ac:	1c21      	adds	r1, r4, #0
    15ae:	3908      	subs	r1, #8
    15b0:	6848      	ldr	r0, [r1, #4]
    15b2:	2701      	movs	r7, #1
    15b4:	1c03      	adds	r3, r0, #0
    15b6:	43bb      	bics	r3, r7
    15b8:	18ca      	adds	r2, r1, r3
    15ba:	6854      	ldr	r4, [r2, #4]
    15bc:	2603      	movs	r6, #3
    15be:	43b4      	bics	r4, r6
    15c0:	4680      	mov	r8, r0
    15c2:	1c20      	adds	r0, r4, #0
    15c4:	4c53      	ldr	r4, [pc, #332]	; (1714 <_free_r+0x178>)
    15c6:	68a6      	ldr	r6, [r4, #8]
    15c8:	4296      	cmp	r6, r2
    15ca:	d060      	beq.n	168e <_free_r+0xf2>
    15cc:	2600      	movs	r6, #0
    15ce:	46b4      	mov	ip, r6
    15d0:	4646      	mov	r6, r8
    15d2:	6050      	str	r0, [r2, #4]
    15d4:	4237      	tst	r7, r6
    15d6:	d10a      	bne.n	15ee <_free_r+0x52>
    15d8:	680f      	ldr	r7, [r1, #0]
    15da:	1bc9      	subs	r1, r1, r7
    15dc:	19db      	adds	r3, r3, r7
    15de:	688e      	ldr	r6, [r1, #8]
    15e0:	1c27      	adds	r7, r4, #0
    15e2:	3708      	adds	r7, #8
    15e4:	42be      	cmp	r6, r7
    15e6:	d06b      	beq.n	16c0 <_free_r+0x124>
    15e8:	68cf      	ldr	r7, [r1, #12]
    15ea:	60f7      	str	r7, [r6, #12]
    15ec:	60be      	str	r6, [r7, #8]
    15ee:	1817      	adds	r7, r2, r0
    15f0:	687f      	ldr	r7, [r7, #4]
    15f2:	2601      	movs	r6, #1
    15f4:	4237      	tst	r7, r6
    15f6:	d107      	bne.n	1608 <_free_r+0x6c>
    15f8:	181b      	adds	r3, r3, r0
    15fa:	4660      	mov	r0, ip
    15fc:	2800      	cmp	r0, #0
    15fe:	d02c      	beq.n	165a <_free_r+0xbe>
    1600:	6890      	ldr	r0, [r2, #8]
    1602:	68d2      	ldr	r2, [r2, #12]
    1604:	60c2      	str	r2, [r0, #12]
    1606:	6090      	str	r0, [r2, #8]
    1608:	2701      	movs	r7, #1
    160a:	1c1e      	adds	r6, r3, #0
    160c:	433e      	orrs	r6, r7
    160e:	4660      	mov	r0, ip
    1610:	604e      	str	r6, [r1, #4]
    1612:	50cb      	str	r3, [r1, r3]
    1614:	2800      	cmp	r0, #0
    1616:	d11a      	bne.n	164e <_free_r+0xb2>
    1618:	4a3f      	ldr	r2, [pc, #252]	; (1718 <_free_r+0x17c>)
    161a:	4293      	cmp	r3, r2
    161c:	d929      	bls.n	1672 <_free_r+0xd6>
    161e:	0a5f      	lsrs	r7, r3, #9
    1620:	2f04      	cmp	r7, #4
    1622:	d850      	bhi.n	16c6 <_free_r+0x12a>
    1624:	099f      	lsrs	r7, r3, #6
    1626:	3738      	adds	r7, #56	; 0x38
    1628:	007e      	lsls	r6, r7, #1
    162a:	00b0      	lsls	r0, r6, #2
    162c:	1820      	adds	r0, r4, r0
    162e:	6882      	ldr	r2, [r0, #8]
    1630:	2603      	movs	r6, #3
    1632:	4282      	cmp	r2, r0
    1634:	d04c      	beq.n	16d0 <_free_r+0x134>
    1636:	6854      	ldr	r4, [r2, #4]
    1638:	43b4      	bics	r4, r6
    163a:	42a3      	cmp	r3, r4
    163c:	d202      	bcs.n	1644 <_free_r+0xa8>
    163e:	6892      	ldr	r2, [r2, #8]
    1640:	4290      	cmp	r0, r2
    1642:	d1f8      	bne.n	1636 <_free_r+0x9a>
    1644:	68d7      	ldr	r7, [r2, #12]
    1646:	60cf      	str	r7, [r1, #12]
    1648:	608a      	str	r2, [r1, #8]
    164a:	60d1      	str	r1, [r2, #12]
    164c:	60b9      	str	r1, [r7, #8]
    164e:	1c28      	adds	r0, r5, #0
    1650:	f7ff feec 	bl	142c <__malloc_unlock>
    1654:	bc04      	pop	{r2}
    1656:	4690      	mov	r8, r2
    1658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    165a:	6890      	ldr	r0, [r2, #8]
    165c:	4f2f      	ldr	r7, [pc, #188]	; (171c <_free_r+0x180>)
    165e:	42b8      	cmp	r0, r7
    1660:	d1cf      	bne.n	1602 <_free_r+0x66>
    1662:	431e      	orrs	r6, r3
    1664:	60c1      	str	r1, [r0, #12]
    1666:	6081      	str	r1, [r0, #8]
    1668:	60c8      	str	r0, [r1, #12]
    166a:	6088      	str	r0, [r1, #8]
    166c:	604e      	str	r6, [r1, #4]
    166e:	50cb      	str	r3, [r1, r3]
    1670:	e7ed      	b.n	164e <_free_r+0xb2>
    1672:	08da      	lsrs	r2, r3, #3
    1674:	1090      	asrs	r0, r2, #2
    1676:	6863      	ldr	r3, [r4, #4]
    1678:	4087      	lsls	r7, r0
    167a:	431f      	orrs	r7, r3
    167c:	00d6      	lsls	r6, r2, #3
    167e:	6067      	str	r7, [r4, #4]
    1680:	19a4      	adds	r4, r4, r6
    1682:	68a7      	ldr	r7, [r4, #8]
    1684:	60cc      	str	r4, [r1, #12]
    1686:	608f      	str	r7, [r1, #8]
    1688:	60f9      	str	r1, [r7, #12]
    168a:	60a1      	str	r1, [r4, #8]
    168c:	e7df      	b.n	164e <_free_r+0xb2>
    168e:	18c3      	adds	r3, r0, r3
    1690:	4640      	mov	r0, r8
    1692:	4207      	tst	r7, r0
    1694:	d106      	bne.n	16a4 <_free_r+0x108>
    1696:	680e      	ldr	r6, [r1, #0]
    1698:	1b89      	subs	r1, r1, r6
    169a:	68cf      	ldr	r7, [r1, #12]
    169c:	688a      	ldr	r2, [r1, #8]
    169e:	199b      	adds	r3, r3, r6
    16a0:	60d7      	str	r7, [r2, #12]
    16a2:	60ba      	str	r2, [r7, #8]
    16a4:	2001      	movs	r0, #1
    16a6:	4318      	orrs	r0, r3
    16a8:	60a1      	str	r1, [r4, #8]
    16aa:	6048      	str	r0, [r1, #4]
    16ac:	491c      	ldr	r1, [pc, #112]	; (1720 <_free_r+0x184>)
    16ae:	680c      	ldr	r4, [r1, #0]
    16b0:	42a3      	cmp	r3, r4
    16b2:	d3cc      	bcc.n	164e <_free_r+0xb2>
    16b4:	4e1b      	ldr	r6, [pc, #108]	; (1724 <_free_r+0x188>)
    16b6:	1c28      	adds	r0, r5, #0
    16b8:	6831      	ldr	r1, [r6, #0]
    16ba:	f7ff ff1f 	bl	14fc <_malloc_trim_r>
    16be:	e7c6      	b.n	164e <_free_r+0xb2>
    16c0:	2601      	movs	r6, #1
    16c2:	46b4      	mov	ip, r6
    16c4:	e793      	b.n	15ee <_free_r+0x52>
    16c6:	2f14      	cmp	r7, #20
    16c8:	d80b      	bhi.n	16e2 <_free_r+0x146>
    16ca:	375b      	adds	r7, #91	; 0x5b
    16cc:	007e      	lsls	r6, r7, #1
    16ce:	e7ac      	b.n	162a <_free_r+0x8e>
    16d0:	10b8      	asrs	r0, r7, #2
    16d2:	2301      	movs	r3, #1
    16d4:	6867      	ldr	r7, [r4, #4]
    16d6:	4083      	lsls	r3, r0
    16d8:	1c1e      	adds	r6, r3, #0
    16da:	433e      	orrs	r6, r7
    16dc:	6066      	str	r6, [r4, #4]
    16de:	1c17      	adds	r7, r2, #0
    16e0:	e7b1      	b.n	1646 <_free_r+0xaa>
    16e2:	2f54      	cmp	r7, #84	; 0x54
    16e4:	d803      	bhi.n	16ee <_free_r+0x152>
    16e6:	0b1f      	lsrs	r7, r3, #12
    16e8:	376e      	adds	r7, #110	; 0x6e
    16ea:	007e      	lsls	r6, r7, #1
    16ec:	e79d      	b.n	162a <_free_r+0x8e>
    16ee:	26aa      	movs	r6, #170	; 0xaa
    16f0:	0070      	lsls	r0, r6, #1
    16f2:	4287      	cmp	r7, r0
    16f4:	d803      	bhi.n	16fe <_free_r+0x162>
    16f6:	0bdf      	lsrs	r7, r3, #15
    16f8:	3777      	adds	r7, #119	; 0x77
    16fa:	007e      	lsls	r6, r7, #1
    16fc:	e795      	b.n	162a <_free_r+0x8e>
    16fe:	4a0a      	ldr	r2, [pc, #40]	; (1728 <_free_r+0x18c>)
    1700:	4297      	cmp	r7, r2
    1702:	d803      	bhi.n	170c <_free_r+0x170>
    1704:	0c9f      	lsrs	r7, r3, #18
    1706:	377c      	adds	r7, #124	; 0x7c
    1708:	007e      	lsls	r6, r7, #1
    170a:	e78e      	b.n	162a <_free_r+0x8e>
    170c:	26fc      	movs	r6, #252	; 0xfc
    170e:	277e      	movs	r7, #126	; 0x7e
    1710:	e78b      	b.n	162a <_free_r+0x8e>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	10000434 	.word	0x10000434
    1718:	000001ff 	.word	0x000001ff
    171c:	1000043c 	.word	0x1000043c
    1720:	1000083c 	.word	0x1000083c
    1724:	10000b08 	.word	0x10000b08
    1728:	00000554 	.word	0x00000554

0000172c <_sbrk>:
    172c:	4a09      	ldr	r2, [pc, #36]	; (1754 <_sbrk+0x28>)
    172e:	6813      	ldr	r3, [r2, #0]
    1730:	2b00      	cmp	r3, #0
    1732:	d00c      	beq.n	174e <_sbrk+0x22>
    1734:	1818      	adds	r0, r3, r0
    1736:	4669      	mov	r1, sp
    1738:	4288      	cmp	r0, r1
    173a:	d802      	bhi.n	1742 <_sbrk+0x16>
    173c:	6010      	str	r0, [r2, #0]
    173e:	1c18      	adds	r0, r3, #0
    1740:	4770      	bx	lr
    1742:	4b05      	ldr	r3, [pc, #20]	; (1758 <_sbrk+0x2c>)
    1744:	220c      	movs	r2, #12
    1746:	2001      	movs	r0, #1
    1748:	601a      	str	r2, [r3, #0]
    174a:	4243      	negs	r3, r0
    174c:	e7f7      	b.n	173e <_sbrk+0x12>
    174e:	4b03      	ldr	r3, [pc, #12]	; (175c <_sbrk+0x30>)
    1750:	6013      	str	r3, [r2, #0]
    1752:	e7ef      	b.n	1734 <_sbrk+0x8>
    1754:	10000b34 	.word	0x10000b34
    1758:	10000b38 	.word	0x10000b38
    175c:	10000b3c 	.word	0x10000b3c

00001760 <__gnu_thumb1_case_uqi>:
    1760:	b402      	push	{r1}
    1762:	4671      	mov	r1, lr
    1764:	0849      	lsrs	r1, r1, #1
    1766:	0049      	lsls	r1, r1, #1
    1768:	5c09      	ldrb	r1, [r1, r0]
    176a:	0049      	lsls	r1, r1, #1
    176c:	448e      	add	lr, r1
    176e:	bc02      	pop	{r1}
    1770:	4770      	bx	lr
    1772:	46c0      	nop			; (mov r8, r8)

00001774 <__aeabi_uidiv>:
    1774:	2900      	cmp	r1, #0
    1776:	d034      	beq.n	17e2 <.udivsi3_skip_div0_test+0x6a>

00001778 <.udivsi3_skip_div0_test>:
    1778:	2301      	movs	r3, #1
    177a:	2200      	movs	r2, #0
    177c:	b410      	push	{r4}
    177e:	4288      	cmp	r0, r1
    1780:	d32c      	bcc.n	17dc <.udivsi3_skip_div0_test+0x64>
    1782:	2401      	movs	r4, #1
    1784:	0724      	lsls	r4, r4, #28
    1786:	42a1      	cmp	r1, r4
    1788:	d204      	bcs.n	1794 <.udivsi3_skip_div0_test+0x1c>
    178a:	4281      	cmp	r1, r0
    178c:	d202      	bcs.n	1794 <.udivsi3_skip_div0_test+0x1c>
    178e:	0109      	lsls	r1, r1, #4
    1790:	011b      	lsls	r3, r3, #4
    1792:	e7f8      	b.n	1786 <.udivsi3_skip_div0_test+0xe>
    1794:	00e4      	lsls	r4, r4, #3
    1796:	42a1      	cmp	r1, r4
    1798:	d204      	bcs.n	17a4 <.udivsi3_skip_div0_test+0x2c>
    179a:	4281      	cmp	r1, r0
    179c:	d202      	bcs.n	17a4 <.udivsi3_skip_div0_test+0x2c>
    179e:	0049      	lsls	r1, r1, #1
    17a0:	005b      	lsls	r3, r3, #1
    17a2:	e7f8      	b.n	1796 <.udivsi3_skip_div0_test+0x1e>
    17a4:	4288      	cmp	r0, r1
    17a6:	d301      	bcc.n	17ac <.udivsi3_skip_div0_test+0x34>
    17a8:	1a40      	subs	r0, r0, r1
    17aa:	431a      	orrs	r2, r3
    17ac:	084c      	lsrs	r4, r1, #1
    17ae:	42a0      	cmp	r0, r4
    17b0:	d302      	bcc.n	17b8 <.udivsi3_skip_div0_test+0x40>
    17b2:	1b00      	subs	r0, r0, r4
    17b4:	085c      	lsrs	r4, r3, #1
    17b6:	4322      	orrs	r2, r4
    17b8:	088c      	lsrs	r4, r1, #2
    17ba:	42a0      	cmp	r0, r4
    17bc:	d302      	bcc.n	17c4 <.udivsi3_skip_div0_test+0x4c>
    17be:	1b00      	subs	r0, r0, r4
    17c0:	089c      	lsrs	r4, r3, #2
    17c2:	4322      	orrs	r2, r4
    17c4:	08cc      	lsrs	r4, r1, #3
    17c6:	42a0      	cmp	r0, r4
    17c8:	d302      	bcc.n	17d0 <.udivsi3_skip_div0_test+0x58>
    17ca:	1b00      	subs	r0, r0, r4
    17cc:	08dc      	lsrs	r4, r3, #3
    17ce:	4322      	orrs	r2, r4
    17d0:	2800      	cmp	r0, #0
    17d2:	d003      	beq.n	17dc <.udivsi3_skip_div0_test+0x64>
    17d4:	091b      	lsrs	r3, r3, #4
    17d6:	d001      	beq.n	17dc <.udivsi3_skip_div0_test+0x64>
    17d8:	0909      	lsrs	r1, r1, #4
    17da:	e7e3      	b.n	17a4 <.udivsi3_skip_div0_test+0x2c>
    17dc:	1c10      	adds	r0, r2, #0
    17de:	bc10      	pop	{r4}
    17e0:	4770      	bx	lr
    17e2:	2800      	cmp	r0, #0
    17e4:	d001      	beq.n	17ea <.udivsi3_skip_div0_test+0x72>
    17e6:	2000      	movs	r0, #0
    17e8:	43c0      	mvns	r0, r0
    17ea:	b407      	push	{r0, r1, r2}
    17ec:	4802      	ldr	r0, [pc, #8]	; (17f8 <.udivsi3_skip_div0_test+0x80>)
    17ee:	a102      	add	r1, pc, #8	; (adr r1, 17f8 <.udivsi3_skip_div0_test+0x80>)
    17f0:	1840      	adds	r0, r0, r1
    17f2:	9002      	str	r0, [sp, #8]
    17f4:	bd03      	pop	{r0, r1, pc}
    17f6:	46c0      	nop			; (mov r8, r8)
    17f8:	00000019 	.word	0x00000019

000017fc <__aeabi_uidivmod>:
    17fc:	2900      	cmp	r1, #0
    17fe:	d0f0      	beq.n	17e2 <.udivsi3_skip_div0_test+0x6a>
    1800:	b503      	push	{r0, r1, lr}
    1802:	f7ff ffb9 	bl	1778 <.udivsi3_skip_div0_test>
    1806:	bc0e      	pop	{r1, r2, r3}
    1808:	4342      	muls	r2, r0
    180a:	1a89      	subs	r1, r1, r2
    180c:	4718      	bx	r3
    180e:	46c0      	nop			; (mov r8, r8)

00001810 <__aeabi_idiv0>:
    1810:	4770      	bx	lr
    1812:	46c0      	nop			; (mov r8, r8)

00001814 <__aeabi_cdrcmple>:
    1814:	4684      	mov	ip, r0
    1816:	1c10      	adds	r0, r2, #0
    1818:	4662      	mov	r2, ip
    181a:	468c      	mov	ip, r1
    181c:	1c19      	adds	r1, r3, #0
    181e:	4663      	mov	r3, ip
    1820:	e000      	b.n	1824 <__aeabi_cdcmpeq>
    1822:	46c0      	nop			; (mov r8, r8)

00001824 <__aeabi_cdcmpeq>:
    1824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1826:	f000 ff91 	bl	274c <__ledf2>
    182a:	2800      	cmp	r0, #0
    182c:	d401      	bmi.n	1832 <__aeabi_cdcmpeq+0xe>
    182e:	2100      	movs	r1, #0
    1830:	42c8      	cmn	r0, r1
    1832:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001834 <__aeabi_dcmpeq>:
    1834:	b510      	push	{r4, lr}
    1836:	f000 fed7 	bl	25e8 <__eqdf2>
    183a:	4240      	negs	r0, r0
    183c:	3001      	adds	r0, #1
    183e:	bd10      	pop	{r4, pc}

00001840 <__aeabi_dcmplt>:
    1840:	b510      	push	{r4, lr}
    1842:	f000 ff83 	bl	274c <__ledf2>
    1846:	2800      	cmp	r0, #0
    1848:	db01      	blt.n	184e <__aeabi_dcmplt+0xe>
    184a:	2000      	movs	r0, #0
    184c:	bd10      	pop	{r4, pc}
    184e:	2001      	movs	r0, #1
    1850:	bd10      	pop	{r4, pc}
    1852:	46c0      	nop			; (mov r8, r8)

00001854 <__aeabi_dcmple>:
    1854:	b510      	push	{r4, lr}
    1856:	f000 ff79 	bl	274c <__ledf2>
    185a:	2800      	cmp	r0, #0
    185c:	dd01      	ble.n	1862 <__aeabi_dcmple+0xe>
    185e:	2000      	movs	r0, #0
    1860:	bd10      	pop	{r4, pc}
    1862:	2001      	movs	r0, #1
    1864:	bd10      	pop	{r4, pc}
    1866:	46c0      	nop			; (mov r8, r8)

00001868 <__aeabi_dcmpgt>:
    1868:	b510      	push	{r4, lr}
    186a:	f000 fefb 	bl	2664 <__gedf2>
    186e:	2800      	cmp	r0, #0
    1870:	dc01      	bgt.n	1876 <__aeabi_dcmpgt+0xe>
    1872:	2000      	movs	r0, #0
    1874:	bd10      	pop	{r4, pc}
    1876:	2001      	movs	r0, #1
    1878:	bd10      	pop	{r4, pc}
    187a:	46c0      	nop			; (mov r8, r8)

0000187c <__aeabi_dcmpge>:
    187c:	b510      	push	{r4, lr}
    187e:	f000 fef1 	bl	2664 <__gedf2>
    1882:	2800      	cmp	r0, #0
    1884:	da01      	bge.n	188a <__aeabi_dcmpge+0xe>
    1886:	2000      	movs	r0, #0
    1888:	bd10      	pop	{r4, pc}
    188a:	2001      	movs	r0, #1
    188c:	bd10      	pop	{r4, pc}
    188e:	46c0      	nop			; (mov r8, r8)

00001890 <__aeabi_d2uiz>:
    1890:	b538      	push	{r3, r4, r5, lr}
    1892:	4b0e      	ldr	r3, [pc, #56]	; (18cc <__aeabi_d2uiz+0x3c>)
    1894:	4a0c      	ldr	r2, [pc, #48]	; (18c8 <__aeabi_d2uiz+0x38>)
    1896:	1c04      	adds	r4, r0, #0
    1898:	1c0d      	adds	r5, r1, #0
    189a:	f7ff ffef 	bl	187c <__aeabi_dcmpge>
    189e:	2800      	cmp	r0, #0
    18a0:	d104      	bne.n	18ac <__aeabi_d2uiz+0x1c>
    18a2:	1c20      	adds	r0, r4, #0
    18a4:	1c29      	adds	r1, r5, #0
    18a6:	f001 fdb1 	bl	340c <__aeabi_d2iz>
    18aa:	bd38      	pop	{r3, r4, r5, pc}
    18ac:	4b07      	ldr	r3, [pc, #28]	; (18cc <__aeabi_d2uiz+0x3c>)
    18ae:	4a06      	ldr	r2, [pc, #24]	; (18c8 <__aeabi_d2uiz+0x38>)
    18b0:	1c20      	adds	r0, r4, #0
    18b2:	1c29      	adds	r1, r5, #0
    18b4:	f001 fa28 	bl	2d08 <__aeabi_dsub>
    18b8:	f001 fda8 	bl	340c <__aeabi_d2iz>
    18bc:	2380      	movs	r3, #128	; 0x80
    18be:	0619      	lsls	r1, r3, #24
    18c0:	1840      	adds	r0, r0, r1
    18c2:	e7f2      	b.n	18aa <__aeabi_d2uiz+0x1a>
    18c4:	46c0      	nop			; (mov r8, r8)
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	00000000 	.word	0x00000000
    18cc:	41e00000 	.word	0x41e00000

000018d0 <__aeabi_dadd>:
    18d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d2:	465f      	mov	r7, fp
    18d4:	4656      	mov	r6, sl
    18d6:	464d      	mov	r5, r9
    18d8:	4644      	mov	r4, r8
    18da:	b4f0      	push	{r4, r5, r6, r7}
    18dc:	030c      	lsls	r4, r1, #12
    18de:	0f46      	lsrs	r6, r0, #29
    18e0:	0a64      	lsrs	r4, r4, #9
    18e2:	4334      	orrs	r4, r6
    18e4:	46a3      	mov	fp, r4
    18e6:	005e      	lsls	r6, r3, #1
    18e8:	031c      	lsls	r4, r3, #12
    18ea:	0fdb      	lsrs	r3, r3, #31
    18ec:	469c      	mov	ip, r3
    18ee:	0a63      	lsrs	r3, r4, #9
    18f0:	4698      	mov	r8, r3
    18f2:	004d      	lsls	r5, r1, #1
    18f4:	0f53      	lsrs	r3, r2, #29
    18f6:	4644      	mov	r4, r8
    18f8:	431c      	orrs	r4, r3
    18fa:	0d6d      	lsrs	r5, r5, #21
    18fc:	0fc9      	lsrs	r1, r1, #31
    18fe:	0d76      	lsrs	r6, r6, #21
    1900:	00d2      	lsls	r2, r2, #3
    1902:	1c0f      	adds	r7, r1, #0
    1904:	00c0      	lsls	r0, r0, #3
    1906:	46a1      	mov	r9, r4
    1908:	4692      	mov	sl, r2
    190a:	1bab      	subs	r3, r5, r6
    190c:	4561      	cmp	r1, ip
    190e:	d100      	bne.n	1912 <__aeabi_dadd+0x42>
    1910:	e0a4      	b.n	1a5c <__aeabi_dadd+0x18c>
    1912:	2b00      	cmp	r3, #0
    1914:	dc00      	bgt.n	1918 <__aeabi_dadd+0x48>
    1916:	e0f5      	b.n	1b04 <__aeabi_dadd+0x234>
    1918:	2e00      	cmp	r6, #0
    191a:	d10c      	bne.n	1936 <__aeabi_dadd+0x66>
    191c:	1c26      	adds	r6, r4, #0
    191e:	4316      	orrs	r6, r2
    1920:	d100      	bne.n	1924 <__aeabi_dadd+0x54>
    1922:	e0c2      	b.n	1aaa <__aeabi_dadd+0x1da>
    1924:	3b01      	subs	r3, #1
    1926:	2b00      	cmp	r3, #0
    1928:	d000      	beq.n	192c <__aeabi_dadd+0x5c>
    192a:	e146      	b.n	1bba <__aeabi_dadd+0x2ea>
    192c:	465c      	mov	r4, fp
    192e:	464b      	mov	r3, r9
    1930:	1a82      	subs	r2, r0, r2
    1932:	1ae7      	subs	r7, r4, r3
    1934:	e021      	b.n	197a <__aeabi_dadd+0xaa>
    1936:	4ed2      	ldr	r6, [pc, #840]	; (1c80 <__aeabi_dadd+0x3b0>)
    1938:	42b5      	cmp	r5, r6
    193a:	d100      	bne.n	193e <__aeabi_dadd+0x6e>
    193c:	e0cd      	b.n	1ada <__aeabi_dadd+0x20a>
    193e:	2480      	movs	r4, #128	; 0x80
    1940:	464a      	mov	r2, r9
    1942:	0427      	lsls	r7, r4, #16
    1944:	433a      	orrs	r2, r7
    1946:	4691      	mov	r9, r2
    1948:	2b38      	cmp	r3, #56	; 0x38
    194a:	dd00      	ble.n	194e <__aeabi_dadd+0x7e>
    194c:	e10f      	b.n	1b6e <__aeabi_dadd+0x29e>
    194e:	2b1f      	cmp	r3, #31
    1950:	dd00      	ble.n	1954 <__aeabi_dadd+0x84>
    1952:	e150      	b.n	1bf6 <__aeabi_dadd+0x326>
    1954:	2620      	movs	r6, #32
    1956:	1af6      	subs	r6, r6, r3
    1958:	464c      	mov	r4, r9
    195a:	4652      	mov	r2, sl
    195c:	4657      	mov	r7, sl
    195e:	40b4      	lsls	r4, r6
    1960:	40b7      	lsls	r7, r6
    1962:	40da      	lsrs	r2, r3
    1964:	4322      	orrs	r2, r4
    1966:	1c3e      	adds	r6, r7, #0
    1968:	464c      	mov	r4, r9
    196a:	1e77      	subs	r7, r6, #1
    196c:	41be      	sbcs	r6, r7
    196e:	40dc      	lsrs	r4, r3
    1970:	4332      	orrs	r2, r6
    1972:	1c26      	adds	r6, r4, #0
    1974:	465b      	mov	r3, fp
    1976:	1a82      	subs	r2, r0, r2
    1978:	1b9f      	subs	r7, r3, r6
    197a:	4290      	cmp	r0, r2
    197c:	4180      	sbcs	r0, r0
    197e:	4246      	negs	r6, r0
    1980:	1bbb      	subs	r3, r7, r6
    1982:	1c14      	adds	r4, r2, #0
    1984:	1c2e      	adds	r6, r5, #0
    1986:	1c0f      	adds	r7, r1, #0
    1988:	0218      	lsls	r0, r3, #8
    198a:	d400      	bmi.n	198e <__aeabi_dadd+0xbe>
    198c:	e0ae      	b.n	1aec <__aeabi_dadd+0x21c>
    198e:	025d      	lsls	r5, r3, #9
    1990:	0a69      	lsrs	r1, r5, #9
    1992:	4688      	mov	r8, r1
    1994:	4642      	mov	r2, r8
    1996:	2a00      	cmp	r2, #0
    1998:	d100      	bne.n	199c <__aeabi_dadd+0xcc>
    199a:	e0d9      	b.n	1b50 <__aeabi_dadd+0x280>
    199c:	4640      	mov	r0, r8
    199e:	f001 fdd5 	bl	354c <__clzsi2>
    19a2:	1c05      	adds	r5, r0, #0
    19a4:	3d08      	subs	r5, #8
    19a6:	2d1f      	cmp	r5, #31
    19a8:	dd00      	ble.n	19ac <__aeabi_dadd+0xdc>
    19aa:	e0da      	b.n	1b62 <__aeabi_dadd+0x292>
    19ac:	2228      	movs	r2, #40	; 0x28
    19ae:	1a13      	subs	r3, r2, r0
    19b0:	1c20      	adds	r0, r4, #0
    19b2:	4641      	mov	r1, r8
    19b4:	40d8      	lsrs	r0, r3
    19b6:	40a9      	lsls	r1, r5
    19b8:	1c03      	adds	r3, r0, #0
    19ba:	430b      	orrs	r3, r1
    19bc:	40ac      	lsls	r4, r5
    19be:	42ae      	cmp	r6, r5
    19c0:	dd00      	ble.n	19c4 <__aeabi_dadd+0xf4>
    19c2:	e090      	b.n	1ae6 <__aeabi_dadd+0x216>
    19c4:	1bae      	subs	r6, r5, r6
    19c6:	1c71      	adds	r1, r6, #1
    19c8:	291f      	cmp	r1, #31
    19ca:	dd00      	ble.n	19ce <__aeabi_dadd+0xfe>
    19cc:	e100      	b.n	1bd0 <__aeabi_dadd+0x300>
    19ce:	201f      	movs	r0, #31
    19d0:	1b85      	subs	r5, r0, r6
    19d2:	1c1a      	adds	r2, r3, #0
    19d4:	1c20      	adds	r0, r4, #0
    19d6:	40aa      	lsls	r2, r5
    19d8:	40c8      	lsrs	r0, r1
    19da:	40ac      	lsls	r4, r5
    19dc:	4310      	orrs	r0, r2
    19de:	1e66      	subs	r6, r4, #1
    19e0:	41b4      	sbcs	r4, r6
    19e2:	4304      	orrs	r4, r0
    19e4:	40cb      	lsrs	r3, r1
    19e6:	2201      	movs	r2, #1
    19e8:	2600      	movs	r6, #0
    19ea:	200f      	movs	r0, #15
    19ec:	4020      	ands	r0, r4
    19ee:	2804      	cmp	r0, #4
    19f0:	d064      	beq.n	1abc <__aeabi_dadd+0x1ec>
    19f2:	1d20      	adds	r0, r4, #4
    19f4:	42a0      	cmp	r0, r4
    19f6:	41a4      	sbcs	r4, r4
    19f8:	4265      	negs	r5, r4
    19fa:	2180      	movs	r1, #128	; 0x80
    19fc:	195b      	adds	r3, r3, r5
    19fe:	2401      	movs	r4, #1
    1a00:	040d      	lsls	r5, r1, #16
    1a02:	401d      	ands	r5, r3
    1a04:	4027      	ands	r7, r4
    1a06:	2d00      	cmp	r5, #0
    1a08:	d007      	beq.n	1a1a <__aeabi_dadd+0x14a>
    1a0a:	4e9d      	ldr	r6, [pc, #628]	; (1c80 <__aeabi_dadd+0x3b0>)
    1a0c:	42b2      	cmp	r2, r6
    1a0e:	d100      	bne.n	1a12 <__aeabi_dadd+0x142>
    1a10:	e09a      	b.n	1b48 <__aeabi_dadd+0x278>
    1a12:	499c      	ldr	r1, [pc, #624]	; (1c84 <__aeabi_dadd+0x3b4>)
    1a14:	1c16      	adds	r6, r2, #0
    1a16:	400b      	ands	r3, r1
    1a18:	3201      	adds	r2, #1
    1a1a:	075c      	lsls	r4, r3, #29
    1a1c:	08c0      	lsrs	r0, r0, #3
    1a1e:	0552      	lsls	r2, r2, #21
    1a20:	4304      	orrs	r4, r0
    1a22:	08db      	lsrs	r3, r3, #3
    1a24:	0d55      	lsrs	r5, r2, #21
    1a26:	2d01      	cmp	r5, #1
    1a28:	dd62      	ble.n	1af0 <__aeabi_dadd+0x220>
    1a2a:	031b      	lsls	r3, r3, #12
    1a2c:	0576      	lsls	r6, r6, #21
    1a2e:	0b1b      	lsrs	r3, r3, #12
    1a30:	0d76      	lsrs	r6, r6, #21
    1a32:	2000      	movs	r0, #0
    1a34:	2100      	movs	r1, #0
    1a36:	0d09      	lsrs	r1, r1, #20
    1a38:	1c20      	adds	r0, r4, #0
    1a3a:	050a      	lsls	r2, r1, #20
    1a3c:	4c92      	ldr	r4, [pc, #584]	; (1c88 <__aeabi_dadd+0x3b8>)
    1a3e:	4313      	orrs	r3, r2
    1a40:	0576      	lsls	r6, r6, #21
    1a42:	0875      	lsrs	r5, r6, #1
    1a44:	401c      	ands	r4, r3
    1a46:	432c      	orrs	r4, r5
    1a48:	0063      	lsls	r3, r4, #1
    1a4a:	07ff      	lsls	r7, r7, #31
    1a4c:	0859      	lsrs	r1, r3, #1
    1a4e:	4339      	orrs	r1, r7
    1a50:	bc3c      	pop	{r2, r3, r4, r5}
    1a52:	4690      	mov	r8, r2
    1a54:	4699      	mov	r9, r3
    1a56:	46a2      	mov	sl, r4
    1a58:	46ab      	mov	fp, r5
    1a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	dc00      	bgt.n	1a62 <__aeabi_dadd+0x192>
    1a60:	e091      	b.n	1b86 <__aeabi_dadd+0x2b6>
    1a62:	2e00      	cmp	r6, #0
    1a64:	d031      	beq.n	1aca <__aeabi_dadd+0x1fa>
    1a66:	4e86      	ldr	r6, [pc, #536]	; (1c80 <__aeabi_dadd+0x3b0>)
    1a68:	42b5      	cmp	r5, r6
    1a6a:	d100      	bne.n	1a6e <__aeabi_dadd+0x19e>
    1a6c:	e0a9      	b.n	1bc2 <__aeabi_dadd+0x2f2>
    1a6e:	2480      	movs	r4, #128	; 0x80
    1a70:	464e      	mov	r6, r9
    1a72:	0422      	lsls	r2, r4, #16
    1a74:	4316      	orrs	r6, r2
    1a76:	46b1      	mov	r9, r6
    1a78:	2b38      	cmp	r3, #56	; 0x38
    1a7a:	dd00      	ble.n	1a7e <__aeabi_dadd+0x1ae>
    1a7c:	e118      	b.n	1cb0 <__aeabi_dadd+0x3e0>
    1a7e:	2b1f      	cmp	r3, #31
    1a80:	dd00      	ble.n	1a84 <__aeabi_dadd+0x1b4>
    1a82:	e173      	b.n	1d6c <__aeabi_dadd+0x49c>
    1a84:	2620      	movs	r6, #32
    1a86:	1af6      	subs	r6, r6, r3
    1a88:	464a      	mov	r2, r9
    1a8a:	40b2      	lsls	r2, r6
    1a8c:	4690      	mov	r8, r2
    1a8e:	4652      	mov	r2, sl
    1a90:	4644      	mov	r4, r8
    1a92:	40da      	lsrs	r2, r3
    1a94:	4322      	orrs	r2, r4
    1a96:	4654      	mov	r4, sl
    1a98:	40b4      	lsls	r4, r6
    1a9a:	1c26      	adds	r6, r4, #0
    1a9c:	1e74      	subs	r4, r6, #1
    1a9e:	41a6      	sbcs	r6, r4
    1aa0:	464c      	mov	r4, r9
    1aa2:	4332      	orrs	r2, r6
    1aa4:	40dc      	lsrs	r4, r3
    1aa6:	1812      	adds	r2, r2, r0
    1aa8:	e0f6      	b.n	1c98 <__aeabi_dadd+0x3c8>
    1aaa:	1c04      	adds	r4, r0, #0
    1aac:	200f      	movs	r0, #15
    1aae:	1c6a      	adds	r2, r5, #1
    1ab0:	465b      	mov	r3, fp
    1ab2:	1c2e      	adds	r6, r5, #0
    1ab4:	1c0f      	adds	r7, r1, #0
    1ab6:	4020      	ands	r0, r4
    1ab8:	2804      	cmp	r0, #4
    1aba:	d19a      	bne.n	19f2 <__aeabi_dadd+0x122>
    1abc:	2580      	movs	r5, #128	; 0x80
    1abe:	042d      	lsls	r5, r5, #16
    1ac0:	2101      	movs	r1, #1
    1ac2:	401d      	ands	r5, r3
    1ac4:	400f      	ands	r7, r1
    1ac6:	1c20      	adds	r0, r4, #0
    1ac8:	e79d      	b.n	1a06 <__aeabi_dadd+0x136>
    1aca:	4314      	orrs	r4, r2
    1acc:	d000      	beq.n	1ad0 <__aeabi_dadd+0x200>
    1ace:	e0dd      	b.n	1c8c <__aeabi_dadd+0x3bc>
    1ad0:	1c6a      	adds	r2, r5, #1
    1ad2:	465b      	mov	r3, fp
    1ad4:	1c04      	adds	r4, r0, #0
    1ad6:	1c2e      	adds	r6, r5, #0
    1ad8:	e787      	b.n	19ea <__aeabi_dadd+0x11a>
    1ada:	2180      	movs	r1, #128	; 0x80
    1adc:	465b      	mov	r3, fp
    1ade:	1c04      	adds	r4, r0, #0
    1ae0:	010a      	lsls	r2, r1, #4
    1ae2:	1c2e      	adds	r6, r5, #0
    1ae4:	e781      	b.n	19ea <__aeabi_dadd+0x11a>
    1ae6:	1b76      	subs	r6, r6, r5
    1ae8:	4d66      	ldr	r5, [pc, #408]	; (1c84 <__aeabi_dadd+0x3b4>)
    1aea:	402b      	ands	r3, r5
    1aec:	1c72      	adds	r2, r6, #1
    1aee:	e77c      	b.n	19ea <__aeabi_dadd+0x11a>
    1af0:	1c21      	adds	r1, r4, #0
    1af2:	4319      	orrs	r1, r3
    1af4:	d100      	bne.n	1af8 <__aeabi_dadd+0x228>
    1af6:	e267      	b.n	1fc8 <__aeabi_dadd+0x6f8>
    1af8:	2e00      	cmp	r6, #0
    1afa:	d041      	beq.n	1b80 <__aeabi_dadd+0x2b0>
    1afc:	2080      	movs	r0, #128	; 0x80
    1afe:	0302      	lsls	r2, r0, #12
    1b00:	4313      	orrs	r3, r2
    1b02:	e792      	b.n	1a2a <__aeabi_dadd+0x15a>
    1b04:	2b00      	cmp	r3, #0
    1b06:	d000      	beq.n	1b0a <__aeabi_dadd+0x23a>
    1b08:	e088      	b.n	1c1c <__aeabi_dadd+0x34c>
    1b0a:	1c69      	adds	r1, r5, #1
    1b0c:	054e      	lsls	r6, r1, #21
    1b0e:	0d74      	lsrs	r4, r6, #21
    1b10:	2c01      	cmp	r4, #1
    1b12:	dc00      	bgt.n	1b16 <__aeabi_dadd+0x246>
    1b14:	e11a      	b.n	1d4c <__aeabi_dadd+0x47c>
    1b16:	465b      	mov	r3, fp
    1b18:	1c16      	adds	r6, r2, #0
    1b1a:	464c      	mov	r4, r9
    1b1c:	1a82      	subs	r2, r0, r2
    1b1e:	1b19      	subs	r1, r3, r4
    1b20:	4290      	cmp	r0, r2
    1b22:	419b      	sbcs	r3, r3
    1b24:	425b      	negs	r3, r3
    1b26:	1ac9      	subs	r1, r1, r3
    1b28:	4688      	mov	r8, r1
    1b2a:	020b      	lsls	r3, r1, #8
    1b2c:	d400      	bmi.n	1b30 <__aeabi_dadd+0x260>
    1b2e:	e09e      	b.n	1c6e <__aeabi_dadd+0x39e>
    1b30:	1a37      	subs	r7, r6, r0
    1b32:	45ba      	cmp	sl, r7
    1b34:	4192      	sbcs	r2, r2
    1b36:	465e      	mov	r6, fp
    1b38:	1ba4      	subs	r4, r4, r6
    1b3a:	4253      	negs	r3, r2
    1b3c:	1ae1      	subs	r1, r4, r3
    1b3e:	4688      	mov	r8, r1
    1b40:	1c3c      	adds	r4, r7, #0
    1b42:	1c2e      	adds	r6, r5, #0
    1b44:	4667      	mov	r7, ip
    1b46:	e725      	b.n	1994 <__aeabi_dadd+0xc4>
    1b48:	1c16      	adds	r6, r2, #0
    1b4a:	2300      	movs	r3, #0
    1b4c:	2400      	movs	r4, #0
    1b4e:	e770      	b.n	1a32 <__aeabi_dadd+0x162>
    1b50:	1c20      	adds	r0, r4, #0
    1b52:	f001 fcfb 	bl	354c <__clzsi2>
    1b56:	3020      	adds	r0, #32
    1b58:	1c05      	adds	r5, r0, #0
    1b5a:	3d08      	subs	r5, #8
    1b5c:	2d1f      	cmp	r5, #31
    1b5e:	dc00      	bgt.n	1b62 <__aeabi_dadd+0x292>
    1b60:	e724      	b.n	19ac <__aeabi_dadd+0xdc>
    1b62:	1c03      	adds	r3, r0, #0
    1b64:	3b28      	subs	r3, #40	; 0x28
    1b66:	409c      	lsls	r4, r3
    1b68:	1c23      	adds	r3, r4, #0
    1b6a:	2400      	movs	r4, #0
    1b6c:	e727      	b.n	19be <__aeabi_dadd+0xee>
    1b6e:	464a      	mov	r2, r9
    1b70:	4653      	mov	r3, sl
    1b72:	431a      	orrs	r2, r3
    1b74:	2600      	movs	r6, #0
    1b76:	2a00      	cmp	r2, #0
    1b78:	d100      	bne.n	1b7c <__aeabi_dadd+0x2ac>
    1b7a:	e6fb      	b.n	1974 <__aeabi_dadd+0xa4>
    1b7c:	2201      	movs	r2, #1
    1b7e:	e6f9      	b.n	1974 <__aeabi_dadd+0xa4>
    1b80:	031d      	lsls	r5, r3, #12
    1b82:	0b2b      	lsrs	r3, r5, #12
    1b84:	e755      	b.n	1a32 <__aeabi_dadd+0x162>
    1b86:	2b00      	cmp	r3, #0
    1b88:	d000      	beq.n	1b8c <__aeabi_dadd+0x2bc>
    1b8a:	e104      	b.n	1d96 <__aeabi_dadd+0x4c6>
    1b8c:	1c6e      	adds	r6, r5, #1
    1b8e:	0574      	lsls	r4, r6, #21
    1b90:	0d63      	lsrs	r3, r4, #21
    1b92:	2b01      	cmp	r3, #1
    1b94:	dc00      	bgt.n	1b98 <__aeabi_dadd+0x2c8>
    1b96:	e0aa      	b.n	1cee <__aeabi_dadd+0x41e>
    1b98:	4939      	ldr	r1, [pc, #228]	; (1c80 <__aeabi_dadd+0x3b0>)
    1b9a:	428e      	cmp	r6, r1
    1b9c:	d100      	bne.n	1ba0 <__aeabi_dadd+0x2d0>
    1b9e:	e130      	b.n	1e02 <__aeabi_dadd+0x532>
    1ba0:	1811      	adds	r1, r2, r0
    1ba2:	4281      	cmp	r1, r0
    1ba4:	4180      	sbcs	r0, r0
    1ba6:	464b      	mov	r3, r9
    1ba8:	4242      	negs	r2, r0
    1baa:	445b      	add	r3, fp
    1bac:	189b      	adds	r3, r3, r2
    1bae:	07dc      	lsls	r4, r3, #31
    1bb0:	0849      	lsrs	r1, r1, #1
    1bb2:	430c      	orrs	r4, r1
    1bb4:	085b      	lsrs	r3, r3, #1
    1bb6:	1caa      	adds	r2, r5, #2
    1bb8:	e717      	b.n	19ea <__aeabi_dadd+0x11a>
    1bba:	4f31      	ldr	r7, [pc, #196]	; (1c80 <__aeabi_dadd+0x3b0>)
    1bbc:	42bd      	cmp	r5, r7
    1bbe:	d000      	beq.n	1bc2 <__aeabi_dadd+0x2f2>
    1bc0:	e6c2      	b.n	1948 <__aeabi_dadd+0x78>
    1bc2:	1c04      	adds	r4, r0, #0
    1bc4:	2080      	movs	r0, #128	; 0x80
    1bc6:	465b      	mov	r3, fp
    1bc8:	1c0f      	adds	r7, r1, #0
    1bca:	0102      	lsls	r2, r0, #4
    1bcc:	1c2e      	adds	r6, r5, #0
    1bce:	e70c      	b.n	19ea <__aeabi_dadd+0x11a>
    1bd0:	1c30      	adds	r0, r6, #0
    1bd2:	381f      	subs	r0, #31
    1bd4:	1c1a      	adds	r2, r3, #0
    1bd6:	40c2      	lsrs	r2, r0
    1bd8:	1c15      	adds	r5, r2, #0
    1bda:	2920      	cmp	r1, #32
    1bdc:	d100      	bne.n	1be0 <__aeabi_dadd+0x310>
    1bde:	e082      	b.n	1ce6 <__aeabi_dadd+0x416>
    1be0:	213f      	movs	r1, #63	; 0x3f
    1be2:	1b8e      	subs	r6, r1, r6
    1be4:	40b3      	lsls	r3, r6
    1be6:	431c      	orrs	r4, r3
    1be8:	1e63      	subs	r3, r4, #1
    1bea:	419c      	sbcs	r4, r3
    1bec:	432c      	orrs	r4, r5
    1bee:	2201      	movs	r2, #1
    1bf0:	2300      	movs	r3, #0
    1bf2:	2600      	movs	r6, #0
    1bf4:	e6f9      	b.n	19ea <__aeabi_dadd+0x11a>
    1bf6:	1c1c      	adds	r4, r3, #0
    1bf8:	3c20      	subs	r4, #32
    1bfa:	464f      	mov	r7, r9
    1bfc:	40e7      	lsrs	r7, r4
    1bfe:	1c3e      	adds	r6, r7, #0
    1c00:	2b20      	cmp	r3, #32
    1c02:	d072      	beq.n	1cea <__aeabi_dadd+0x41a>
    1c04:	2240      	movs	r2, #64	; 0x40
    1c06:	1ad4      	subs	r4, r2, r3
    1c08:	464b      	mov	r3, r9
    1c0a:	40a3      	lsls	r3, r4
    1c0c:	1c1a      	adds	r2, r3, #0
    1c0e:	4657      	mov	r7, sl
    1c10:	433a      	orrs	r2, r7
    1c12:	1e53      	subs	r3, r2, #1
    1c14:	419a      	sbcs	r2, r3
    1c16:	4332      	orrs	r2, r6
    1c18:	2600      	movs	r6, #0
    1c1a:	e6ab      	b.n	1974 <__aeabi_dadd+0xa4>
    1c1c:	425f      	negs	r7, r3
    1c1e:	2d00      	cmp	r5, #0
    1c20:	d050      	beq.n	1cc4 <__aeabi_dadd+0x3f4>
    1c22:	4d17      	ldr	r5, [pc, #92]	; (1c80 <__aeabi_dadd+0x3b0>)
    1c24:	42ae      	cmp	r6, r5
    1c26:	d100      	bne.n	1c2a <__aeabi_dadd+0x35a>
    1c28:	e155      	b.n	1ed6 <__aeabi_dadd+0x606>
    1c2a:	2480      	movs	r4, #128	; 0x80
    1c2c:	465a      	mov	r2, fp
    1c2e:	0421      	lsls	r1, r4, #16
    1c30:	430a      	orrs	r2, r1
    1c32:	4693      	mov	fp, r2
    1c34:	2f38      	cmp	r7, #56	; 0x38
    1c36:	dd00      	ble.n	1c3a <__aeabi_dadd+0x36a>
    1c38:	e0da      	b.n	1df0 <__aeabi_dadd+0x520>
    1c3a:	2f1f      	cmp	r7, #31
    1c3c:	dd00      	ble.n	1c40 <__aeabi_dadd+0x370>
    1c3e:	e178      	b.n	1f32 <__aeabi_dadd+0x662>
    1c40:	2120      	movs	r1, #32
    1c42:	1bcc      	subs	r4, r1, r7
    1c44:	1c05      	adds	r5, r0, #0
    1c46:	465a      	mov	r2, fp
    1c48:	40a2      	lsls	r2, r4
    1c4a:	40fd      	lsrs	r5, r7
    1c4c:	40a0      	lsls	r0, r4
    1c4e:	4315      	orrs	r5, r2
    1c50:	465b      	mov	r3, fp
    1c52:	1e42      	subs	r2, r0, #1
    1c54:	4190      	sbcs	r0, r2
    1c56:	4328      	orrs	r0, r5
    1c58:	40fb      	lsrs	r3, r7
    1c5a:	4657      	mov	r7, sl
    1c5c:	1a3c      	subs	r4, r7, r0
    1c5e:	45a2      	cmp	sl, r4
    1c60:	4192      	sbcs	r2, r2
    1c62:	4648      	mov	r0, r9
    1c64:	1ac1      	subs	r1, r0, r3
    1c66:	4255      	negs	r5, r2
    1c68:	1b4b      	subs	r3, r1, r5
    1c6a:	4667      	mov	r7, ip
    1c6c:	e68c      	b.n	1988 <__aeabi_dadd+0xb8>
    1c6e:	1c08      	adds	r0, r1, #0
    1c70:	4310      	orrs	r0, r2
    1c72:	d130      	bne.n	1cd6 <__aeabi_dadd+0x406>
    1c74:	2700      	movs	r7, #0
    1c76:	2201      	movs	r2, #1
    1c78:	2300      	movs	r3, #0
    1c7a:	2004      	movs	r0, #4
    1c7c:	2600      	movs	r6, #0
    1c7e:	e6cc      	b.n	1a1a <__aeabi_dadd+0x14a>
    1c80:	000007ff 	.word	0x000007ff
    1c84:	ff7fffff 	.word	0xff7fffff
    1c88:	800fffff 	.word	0x800fffff
    1c8c:	3b01      	subs	r3, #1
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d124      	bne.n	1cdc <__aeabi_dadd+0x40c>
    1c92:	4653      	mov	r3, sl
    1c94:	181a      	adds	r2, r3, r0
    1c96:	464c      	mov	r4, r9
    1c98:	4282      	cmp	r2, r0
    1c9a:	4180      	sbcs	r0, r0
    1c9c:	445c      	add	r4, fp
    1c9e:	4243      	negs	r3, r0
    1ca0:	18e3      	adds	r3, r4, r3
    1ca2:	1c2e      	adds	r6, r5, #0
    1ca4:	1c14      	adds	r4, r2, #0
    1ca6:	0218      	lsls	r0, r3, #8
    1ca8:	d43e      	bmi.n	1d28 <__aeabi_dadd+0x458>
    1caa:	1c72      	adds	r2, r6, #1
    1cac:	1c0f      	adds	r7, r1, #0
    1cae:	e69c      	b.n	19ea <__aeabi_dadd+0x11a>
    1cb0:	464a      	mov	r2, r9
    1cb2:	4653      	mov	r3, sl
    1cb4:	431a      	orrs	r2, r3
    1cb6:	2400      	movs	r4, #0
    1cb8:	2a00      	cmp	r2, #0
    1cba:	d100      	bne.n	1cbe <__aeabi_dadd+0x3ee>
    1cbc:	e6f3      	b.n	1aa6 <__aeabi_dadd+0x1d6>
    1cbe:	2201      	movs	r2, #1
    1cc0:	1812      	adds	r2, r2, r0
    1cc2:	e7e9      	b.n	1c98 <__aeabi_dadd+0x3c8>
    1cc4:	465b      	mov	r3, fp
    1cc6:	4303      	orrs	r3, r0
    1cc8:	d000      	beq.n	1ccc <__aeabi_dadd+0x3fc>
    1cca:	e083      	b.n	1dd4 <__aeabi_dadd+0x504>
    1ccc:	1c23      	adds	r3, r4, #0
    1cce:	1c72      	adds	r2, r6, #1
    1cd0:	4654      	mov	r4, sl
    1cd2:	4667      	mov	r7, ip
    1cd4:	e689      	b.n	19ea <__aeabi_dadd+0x11a>
    1cd6:	1c14      	adds	r4, r2, #0
    1cd8:	1c2e      	adds	r6, r5, #0
    1cda:	e65b      	b.n	1994 <__aeabi_dadd+0xc4>
    1cdc:	4ecd      	ldr	r6, [pc, #820]	; (2014 <__aeabi_dadd+0x744>)
    1cde:	42b5      	cmp	r5, r6
    1ce0:	d000      	beq.n	1ce4 <__aeabi_dadd+0x414>
    1ce2:	e6c9      	b.n	1a78 <__aeabi_dadd+0x1a8>
    1ce4:	e76d      	b.n	1bc2 <__aeabi_dadd+0x2f2>
    1ce6:	2300      	movs	r3, #0
    1ce8:	e77d      	b.n	1be6 <__aeabi_dadd+0x316>
    1cea:	2200      	movs	r2, #0
    1cec:	e78f      	b.n	1c0e <__aeabi_dadd+0x33e>
    1cee:	465e      	mov	r6, fp
    1cf0:	4306      	orrs	r6, r0
    1cf2:	2d00      	cmp	r5, #0
    1cf4:	d000      	beq.n	1cf8 <__aeabi_dadd+0x428>
    1cf6:	e0f4      	b.n	1ee2 <__aeabi_dadd+0x612>
    1cf8:	2e00      	cmp	r6, #0
    1cfa:	d100      	bne.n	1cfe <__aeabi_dadd+0x42e>
    1cfc:	e14c      	b.n	1f98 <__aeabi_dadd+0x6c8>
    1cfe:	464b      	mov	r3, r9
    1d00:	4313      	orrs	r3, r2
    1d02:	d100      	bne.n	1d06 <__aeabi_dadd+0x436>
    1d04:	e17e      	b.n	2004 <__aeabi_dadd+0x734>
    1d06:	1815      	adds	r5, r2, r0
    1d08:	464e      	mov	r6, r9
    1d0a:	4285      	cmp	r5, r0
    1d0c:	4180      	sbcs	r0, r0
    1d0e:	445e      	add	r6, fp
    1d10:	4242      	negs	r2, r0
    1d12:	18b3      	adds	r3, r6, r2
    1d14:	021e      	lsls	r6, r3, #8
    1d16:	d400      	bmi.n	1d1a <__aeabi_dadd+0x44a>
    1d18:	e182      	b.n	2020 <__aeabi_dadd+0x750>
    1d1a:	4fbf      	ldr	r7, [pc, #764]	; (2018 <__aeabi_dadd+0x748>)
    1d1c:	1c2c      	adds	r4, r5, #0
    1d1e:	403b      	ands	r3, r7
    1d20:	2202      	movs	r2, #2
    1d22:	1c0f      	adds	r7, r1, #0
    1d24:	2601      	movs	r6, #1
    1d26:	e660      	b.n	19ea <__aeabi_dadd+0x11a>
    1d28:	4dba      	ldr	r5, [pc, #744]	; (2014 <__aeabi_dadd+0x744>)
    1d2a:	1c70      	adds	r0, r6, #1
    1d2c:	42a8      	cmp	r0, r5
    1d2e:	d04b      	beq.n	1dc8 <__aeabi_dadd+0x4f8>
    1d30:	4fb9      	ldr	r7, [pc, #740]	; (2018 <__aeabi_dadd+0x748>)
    1d32:	2501      	movs	r5, #1
    1d34:	4025      	ands	r5, r4
    1d36:	0862      	lsrs	r2, r4, #1
    1d38:	403b      	ands	r3, r7
    1d3a:	1c2c      	adds	r4, r5, #0
    1d3c:	07df      	lsls	r7, r3, #31
    1d3e:	4314      	orrs	r4, r2
    1d40:	433c      	orrs	r4, r7
    1d42:	1cb2      	adds	r2, r6, #2
    1d44:	085b      	lsrs	r3, r3, #1
    1d46:	1c06      	adds	r6, r0, #0
    1d48:	1c0f      	adds	r7, r1, #0
    1d4a:	e64e      	b.n	19ea <__aeabi_dadd+0x11a>
    1d4c:	465e      	mov	r6, fp
    1d4e:	4306      	orrs	r6, r0
    1d50:	2d00      	cmp	r5, #0
    1d52:	d12c      	bne.n	1dae <__aeabi_dadd+0x4de>
    1d54:	2e00      	cmp	r6, #0
    1d56:	d000      	beq.n	1d5a <__aeabi_dadd+0x48a>
    1d58:	e07d      	b.n	1e56 <__aeabi_dadd+0x586>
    1d5a:	464e      	mov	r6, r9
    1d5c:	1c14      	adds	r4, r2, #0
    1d5e:	4316      	orrs	r6, r2
    1d60:	d088      	beq.n	1c74 <__aeabi_dadd+0x3a4>
    1d62:	464b      	mov	r3, r9
    1d64:	4667      	mov	r7, ip
    1d66:	2201      	movs	r2, #1
    1d68:	2600      	movs	r6, #0
    1d6a:	e63e      	b.n	19ea <__aeabi_dadd+0x11a>
    1d6c:	1c1e      	adds	r6, r3, #0
    1d6e:	3e20      	subs	r6, #32
    1d70:	464c      	mov	r4, r9
    1d72:	40f4      	lsrs	r4, r6
    1d74:	1c26      	adds	r6, r4, #0
    1d76:	2b20      	cmp	r3, #32
    1d78:	d100      	bne.n	1d7c <__aeabi_dadd+0x4ac>
    1d7a:	e0d8      	b.n	1f2e <__aeabi_dadd+0x65e>
    1d7c:	2240      	movs	r2, #64	; 0x40
    1d7e:	1ad4      	subs	r4, r2, r3
    1d80:	464b      	mov	r3, r9
    1d82:	40a3      	lsls	r3, r4
    1d84:	1c1a      	adds	r2, r3, #0
    1d86:	4654      	mov	r4, sl
    1d88:	4322      	orrs	r2, r4
    1d8a:	1e53      	subs	r3, r2, #1
    1d8c:	419a      	sbcs	r2, r3
    1d8e:	4332      	orrs	r2, r6
    1d90:	2400      	movs	r4, #0
    1d92:	1812      	adds	r2, r2, r0
    1d94:	e780      	b.n	1c98 <__aeabi_dadd+0x3c8>
    1d96:	425b      	negs	r3, r3
    1d98:	2d00      	cmp	r5, #0
    1d9a:	d137      	bne.n	1e0c <__aeabi_dadd+0x53c>
    1d9c:	465c      	mov	r4, fp
    1d9e:	4304      	orrs	r4, r0
    1da0:	d000      	beq.n	1da4 <__aeabi_dadd+0x4d4>
    1da2:	e0d7      	b.n	1f54 <__aeabi_dadd+0x684>
    1da4:	1c72      	adds	r2, r6, #1
    1da6:	464b      	mov	r3, r9
    1da8:	4654      	mov	r4, sl
    1daa:	1c0f      	adds	r7, r1, #0
    1dac:	e61d      	b.n	19ea <__aeabi_dadd+0x11a>
    1dae:	2e00      	cmp	r6, #0
    1db0:	d16e      	bne.n	1e90 <__aeabi_dadd+0x5c0>
    1db2:	464b      	mov	r3, r9
    1db4:	1c14      	adds	r4, r2, #0
    1db6:	4313      	orrs	r3, r2
    1db8:	d100      	bne.n	1dbc <__aeabi_dadd+0x4ec>
    1dba:	e0dc      	b.n	1f76 <__aeabi_dadd+0x6a6>
    1dbc:	2580      	movs	r5, #128	; 0x80
    1dbe:	464b      	mov	r3, r9
    1dc0:	4667      	mov	r7, ip
    1dc2:	012a      	lsls	r2, r5, #4
    1dc4:	4e93      	ldr	r6, [pc, #588]	; (2014 <__aeabi_dadd+0x744>)
    1dc6:	e610      	b.n	19ea <__aeabi_dadd+0x11a>
    1dc8:	2180      	movs	r1, #128	; 0x80
    1dca:	1c06      	adds	r6, r0, #0
    1dcc:	010a      	lsls	r2, r1, #4
    1dce:	2300      	movs	r3, #0
    1dd0:	2004      	movs	r0, #4
    1dd2:	e622      	b.n	1a1a <__aeabi_dadd+0x14a>
    1dd4:	3f01      	subs	r7, #1
    1dd6:	2f00      	cmp	r7, #0
    1dd8:	d179      	bne.n	1ece <__aeabi_dadd+0x5fe>
    1dda:	1a17      	subs	r7, r2, r0
    1ddc:	465b      	mov	r3, fp
    1dde:	45ba      	cmp	sl, r7
    1de0:	41ad      	sbcs	r5, r5
    1de2:	4649      	mov	r1, r9
    1de4:	1aca      	subs	r2, r1, r3
    1de6:	4268      	negs	r0, r5
    1de8:	1c3c      	adds	r4, r7, #0
    1dea:	1a13      	subs	r3, r2, r0
    1dec:	4667      	mov	r7, ip
    1dee:	e5cb      	b.n	1988 <__aeabi_dadd+0xb8>
    1df0:	465f      	mov	r7, fp
    1df2:	4307      	orrs	r7, r0
    1df4:	2300      	movs	r3, #0
    1df6:	2000      	movs	r0, #0
    1df8:	2f00      	cmp	r7, #0
    1dfa:	d100      	bne.n	1dfe <__aeabi_dadd+0x52e>
    1dfc:	e72d      	b.n	1c5a <__aeabi_dadd+0x38a>
    1dfe:	2001      	movs	r0, #1
    1e00:	e72b      	b.n	1c5a <__aeabi_dadd+0x38a>
    1e02:	2580      	movs	r5, #128	; 0x80
    1e04:	012a      	lsls	r2, r5, #4
    1e06:	2300      	movs	r3, #0
    1e08:	2004      	movs	r0, #4
    1e0a:	e606      	b.n	1a1a <__aeabi_dadd+0x14a>
    1e0c:	4d81      	ldr	r5, [pc, #516]	; (2014 <__aeabi_dadd+0x744>)
    1e0e:	42ae      	cmp	r6, r5
    1e10:	d100      	bne.n	1e14 <__aeabi_dadd+0x544>
    1e12:	e0d3      	b.n	1fbc <__aeabi_dadd+0x6ec>
    1e14:	2480      	movs	r4, #128	; 0x80
    1e16:	465d      	mov	r5, fp
    1e18:	0422      	lsls	r2, r4, #16
    1e1a:	4315      	orrs	r5, r2
    1e1c:	46ab      	mov	fp, r5
    1e1e:	2b38      	cmp	r3, #56	; 0x38
    1e20:	dd00      	ble.n	1e24 <__aeabi_dadd+0x554>
    1e22:	e0b0      	b.n	1f86 <__aeabi_dadd+0x6b6>
    1e24:	2b1f      	cmp	r3, #31
    1e26:	dd00      	ble.n	1e2a <__aeabi_dadd+0x55a>
    1e28:	e0db      	b.n	1fe2 <__aeabi_dadd+0x712>
    1e2a:	2520      	movs	r5, #32
    1e2c:	1aed      	subs	r5, r5, r3
    1e2e:	1c02      	adds	r2, r0, #0
    1e30:	465c      	mov	r4, fp
    1e32:	40ac      	lsls	r4, r5
    1e34:	40da      	lsrs	r2, r3
    1e36:	40a8      	lsls	r0, r5
    1e38:	1e45      	subs	r5, r0, #1
    1e3a:	41a8      	sbcs	r0, r5
    1e3c:	4322      	orrs	r2, r4
    1e3e:	4302      	orrs	r2, r0
    1e40:	4658      	mov	r0, fp
    1e42:	40d8      	lsrs	r0, r3
    1e44:	1c03      	adds	r3, r0, #0
    1e46:	4655      	mov	r5, sl
    1e48:	1954      	adds	r4, r2, r5
    1e4a:	4554      	cmp	r4, sl
    1e4c:	4192      	sbcs	r2, r2
    1e4e:	444b      	add	r3, r9
    1e50:	4250      	negs	r0, r2
    1e52:	181b      	adds	r3, r3, r0
    1e54:	e727      	b.n	1ca6 <__aeabi_dadd+0x3d6>
    1e56:	464a      	mov	r2, r9
    1e58:	4656      	mov	r6, sl
    1e5a:	4332      	orrs	r2, r6
    1e5c:	d100      	bne.n	1e60 <__aeabi_dadd+0x590>
    1e5e:	e085      	b.n	1f6c <__aeabi_dadd+0x69c>
    1e60:	1b85      	subs	r5, r0, r6
    1e62:	465b      	mov	r3, fp
    1e64:	464c      	mov	r4, r9
    1e66:	42a8      	cmp	r0, r5
    1e68:	4192      	sbcs	r2, r2
    1e6a:	1b19      	subs	r1, r3, r4
    1e6c:	4256      	negs	r6, r2
    1e6e:	1b8b      	subs	r3, r1, r6
    1e70:	021e      	lsls	r6, r3, #8
    1e72:	d400      	bmi.n	1e76 <__aeabi_dadd+0x5a6>
    1e74:	e0ad      	b.n	1fd2 <__aeabi_dadd+0x702>
    1e76:	4657      	mov	r7, sl
    1e78:	1a3d      	subs	r5, r7, r0
    1e7a:	465b      	mov	r3, fp
    1e7c:	45aa      	cmp	sl, r5
    1e7e:	4189      	sbcs	r1, r1
    1e80:	1ae4      	subs	r4, r4, r3
    1e82:	424a      	negs	r2, r1
    1e84:	1aa3      	subs	r3, r4, r2
    1e86:	4667      	mov	r7, ip
    1e88:	1c2c      	adds	r4, r5, #0
    1e8a:	2201      	movs	r2, #1
    1e8c:	2600      	movs	r6, #0
    1e8e:	e5ac      	b.n	19ea <__aeabi_dadd+0x11a>
    1e90:	464d      	mov	r5, r9
    1e92:	1c16      	adds	r6, r2, #0
    1e94:	4315      	orrs	r5, r2
    1e96:	d044      	beq.n	1f22 <__aeabi_dadd+0x652>
    1e98:	465c      	mov	r4, fp
    1e9a:	2180      	movs	r1, #128	; 0x80
    1e9c:	08c0      	lsrs	r0, r0, #3
    1e9e:	0762      	lsls	r2, r4, #29
    1ea0:	08e3      	lsrs	r3, r4, #3
    1ea2:	030d      	lsls	r5, r1, #12
    1ea4:	4310      	orrs	r0, r2
    1ea6:	422b      	tst	r3, r5
    1ea8:	d100      	bne.n	1eac <__aeabi_dadd+0x5dc>
    1eaa:	e081      	b.n	1fb0 <__aeabi_dadd+0x6e0>
    1eac:	464c      	mov	r4, r9
    1eae:	08e1      	lsrs	r1, r4, #3
    1eb0:	4229      	tst	r1, r5
    1eb2:	d17d      	bne.n	1fb0 <__aeabi_dadd+0x6e0>
    1eb4:	08f7      	lsrs	r7, r6, #3
    1eb6:	0766      	lsls	r6, r4, #29
    1eb8:	433e      	orrs	r6, r7
    1eba:	1c0b      	adds	r3, r1, #0
    1ebc:	4667      	mov	r7, ip
    1ebe:	0f70      	lsrs	r0, r6, #29
    1ec0:	00db      	lsls	r3, r3, #3
    1ec2:	2280      	movs	r2, #128	; 0x80
    1ec4:	00f4      	lsls	r4, r6, #3
    1ec6:	4303      	orrs	r3, r0
    1ec8:	0112      	lsls	r2, r2, #4
    1eca:	4e52      	ldr	r6, [pc, #328]	; (2014 <__aeabi_dadd+0x744>)
    1ecc:	e58d      	b.n	19ea <__aeabi_dadd+0x11a>
    1ece:	4d51      	ldr	r5, [pc, #324]	; (2014 <__aeabi_dadd+0x744>)
    1ed0:	42ae      	cmp	r6, r5
    1ed2:	d000      	beq.n	1ed6 <__aeabi_dadd+0x606>
    1ed4:	e6ae      	b.n	1c34 <__aeabi_dadd+0x364>
    1ed6:	2080      	movs	r0, #128	; 0x80
    1ed8:	464b      	mov	r3, r9
    1eda:	4654      	mov	r4, sl
    1edc:	4667      	mov	r7, ip
    1ede:	0102      	lsls	r2, r0, #4
    1ee0:	e583      	b.n	19ea <__aeabi_dadd+0x11a>
    1ee2:	2e00      	cmp	r6, #0
    1ee4:	d05e      	beq.n	1fa4 <__aeabi_dadd+0x6d4>
    1ee6:	464c      	mov	r4, r9
    1ee8:	4314      	orrs	r4, r2
    1eea:	d01a      	beq.n	1f22 <__aeabi_dadd+0x652>
    1eec:	08c7      	lsrs	r7, r0, #3
    1eee:	2580      	movs	r5, #128	; 0x80
    1ef0:	4658      	mov	r0, fp
    1ef2:	0743      	lsls	r3, r0, #29
    1ef4:	032c      	lsls	r4, r5, #12
    1ef6:	08c0      	lsrs	r0, r0, #3
    1ef8:	431f      	orrs	r7, r3
    1efa:	4220      	tst	r0, r4
    1efc:	d008      	beq.n	1f10 <__aeabi_dadd+0x640>
    1efe:	464e      	mov	r6, r9
    1f00:	08f3      	lsrs	r3, r6, #3
    1f02:	4223      	tst	r3, r4
    1f04:	d104      	bne.n	1f10 <__aeabi_dadd+0x640>
    1f06:	4652      	mov	r2, sl
    1f08:	08d5      	lsrs	r5, r2, #3
    1f0a:	0777      	lsls	r7, r6, #29
    1f0c:	1c18      	adds	r0, r3, #0
    1f0e:	432f      	orrs	r7, r5
    1f10:	00c3      	lsls	r3, r0, #3
    1f12:	00fc      	lsls	r4, r7, #3
    1f14:	0f78      	lsrs	r0, r7, #29
    1f16:	1c0f      	adds	r7, r1, #0
    1f18:	2180      	movs	r1, #128	; 0x80
    1f1a:	4303      	orrs	r3, r0
    1f1c:	010a      	lsls	r2, r1, #4
    1f1e:	4e3d      	ldr	r6, [pc, #244]	; (2014 <__aeabi_dadd+0x744>)
    1f20:	e563      	b.n	19ea <__aeabi_dadd+0x11a>
    1f22:	2680      	movs	r6, #128	; 0x80
    1f24:	0132      	lsls	r2, r6, #4
    1f26:	465b      	mov	r3, fp
    1f28:	1c04      	adds	r4, r0, #0
    1f2a:	4e3a      	ldr	r6, [pc, #232]	; (2014 <__aeabi_dadd+0x744>)
    1f2c:	e55d      	b.n	19ea <__aeabi_dadd+0x11a>
    1f2e:	2200      	movs	r2, #0
    1f30:	e729      	b.n	1d86 <__aeabi_dadd+0x4b6>
    1f32:	1c39      	adds	r1, r7, #0
    1f34:	3920      	subs	r1, #32
    1f36:	465c      	mov	r4, fp
    1f38:	40cc      	lsrs	r4, r1
    1f3a:	1c22      	adds	r2, r4, #0
    1f3c:	2f20      	cmp	r7, #32
    1f3e:	d067      	beq.n	2010 <__aeabi_dadd+0x740>
    1f40:	2340      	movs	r3, #64	; 0x40
    1f42:	1bdf      	subs	r7, r3, r7
    1f44:	465d      	mov	r5, fp
    1f46:	40bd      	lsls	r5, r7
    1f48:	4328      	orrs	r0, r5
    1f4a:	1e43      	subs	r3, r0, #1
    1f4c:	4198      	sbcs	r0, r3
    1f4e:	4310      	orrs	r0, r2
    1f50:	2300      	movs	r3, #0
    1f52:	e682      	b.n	1c5a <__aeabi_dadd+0x38a>
    1f54:	3b01      	subs	r3, #1
    1f56:	2b00      	cmp	r3, #0
    1f58:	d12c      	bne.n	1fb4 <__aeabi_dadd+0x6e4>
    1f5a:	4450      	add	r0, sl
    1f5c:	465c      	mov	r4, fp
    1f5e:	4290      	cmp	r0, r2
    1f60:	41ad      	sbcs	r5, r5
    1f62:	444c      	add	r4, r9
    1f64:	426a      	negs	r2, r5
    1f66:	18a3      	adds	r3, r4, r2
    1f68:	1c04      	adds	r4, r0, #0
    1f6a:	e69c      	b.n	1ca6 <__aeabi_dadd+0x3d6>
    1f6c:	465b      	mov	r3, fp
    1f6e:	1c04      	adds	r4, r0, #0
    1f70:	2201      	movs	r2, #1
    1f72:	2600      	movs	r6, #0
    1f74:	e539      	b.n	19ea <__aeabi_dadd+0x11a>
    1f76:	2480      	movs	r4, #128	; 0x80
    1f78:	2104      	movs	r1, #4
    1f7a:	2700      	movs	r7, #0
    1f7c:	0122      	lsls	r2, r4, #4
    1f7e:	4b27      	ldr	r3, [pc, #156]	; (201c <__aeabi_dadd+0x74c>)
    1f80:	4248      	negs	r0, r1
    1f82:	4e24      	ldr	r6, [pc, #144]	; (2014 <__aeabi_dadd+0x744>)
    1f84:	e549      	b.n	1a1a <__aeabi_dadd+0x14a>
    1f86:	465d      	mov	r5, fp
    1f88:	4305      	orrs	r5, r0
    1f8a:	2300      	movs	r3, #0
    1f8c:	2200      	movs	r2, #0
    1f8e:	2d00      	cmp	r5, #0
    1f90:	d100      	bne.n	1f94 <__aeabi_dadd+0x6c4>
    1f92:	e758      	b.n	1e46 <__aeabi_dadd+0x576>
    1f94:	2201      	movs	r2, #1
    1f96:	e756      	b.n	1e46 <__aeabi_dadd+0x576>
    1f98:	1c14      	adds	r4, r2, #0
    1f9a:	464b      	mov	r3, r9
    1f9c:	1c0f      	adds	r7, r1, #0
    1f9e:	2201      	movs	r2, #1
    1fa0:	2600      	movs	r6, #0
    1fa2:	e522      	b.n	19ea <__aeabi_dadd+0x11a>
    1fa4:	1c14      	adds	r4, r2, #0
    1fa6:	2280      	movs	r2, #128	; 0x80
    1fa8:	464b      	mov	r3, r9
    1faa:	0112      	lsls	r2, r2, #4
    1fac:	4e19      	ldr	r6, [pc, #100]	; (2014 <__aeabi_dadd+0x744>)
    1fae:	e51c      	b.n	19ea <__aeabi_dadd+0x11a>
    1fb0:	1c06      	adds	r6, r0, #0
    1fb2:	e784      	b.n	1ebe <__aeabi_dadd+0x5ee>
    1fb4:	4a17      	ldr	r2, [pc, #92]	; (2014 <__aeabi_dadd+0x744>)
    1fb6:	4296      	cmp	r6, r2
    1fb8:	d000      	beq.n	1fbc <__aeabi_dadd+0x6ec>
    1fba:	e730      	b.n	1e1e <__aeabi_dadd+0x54e>
    1fbc:	1c0f      	adds	r7, r1, #0
    1fbe:	2180      	movs	r1, #128	; 0x80
    1fc0:	464b      	mov	r3, r9
    1fc2:	4654      	mov	r4, sl
    1fc4:	010a      	lsls	r2, r1, #4
    1fc6:	e510      	b.n	19ea <__aeabi_dadd+0x11a>
    1fc8:	0574      	lsls	r4, r6, #21
    1fca:	0d66      	lsrs	r6, r4, #21
    1fcc:	2300      	movs	r3, #0
    1fce:	2400      	movs	r4, #0
    1fd0:	e52f      	b.n	1a32 <__aeabi_dadd+0x162>
    1fd2:	1c18      	adds	r0, r3, #0
    1fd4:	4328      	orrs	r0, r5
    1fd6:	d100      	bne.n	1fda <__aeabi_dadd+0x70a>
    1fd8:	e64c      	b.n	1c74 <__aeabi_dadd+0x3a4>
    1fda:	1c2c      	adds	r4, r5, #0
    1fdc:	2201      	movs	r2, #1
    1fde:	2600      	movs	r6, #0
    1fe0:	e503      	b.n	19ea <__aeabi_dadd+0x11a>
    1fe2:	1c1c      	adds	r4, r3, #0
    1fe4:	3c20      	subs	r4, #32
    1fe6:	465d      	mov	r5, fp
    1fe8:	40e5      	lsrs	r5, r4
    1fea:	1c2c      	adds	r4, r5, #0
    1fec:	2b20      	cmp	r3, #32
    1fee:	d01c      	beq.n	202a <__aeabi_dadd+0x75a>
    1ff0:	2240      	movs	r2, #64	; 0x40
    1ff2:	1ad3      	subs	r3, r2, r3
    1ff4:	465a      	mov	r2, fp
    1ff6:	409a      	lsls	r2, r3
    1ff8:	4302      	orrs	r2, r0
    1ffa:	1e50      	subs	r0, r2, #1
    1ffc:	4182      	sbcs	r2, r0
    1ffe:	4322      	orrs	r2, r4
    2000:	2300      	movs	r3, #0
    2002:	e720      	b.n	1e46 <__aeabi_dadd+0x576>
    2004:	465b      	mov	r3, fp
    2006:	1c04      	adds	r4, r0, #0
    2008:	1c0f      	adds	r7, r1, #0
    200a:	2201      	movs	r2, #1
    200c:	2600      	movs	r6, #0
    200e:	e4ec      	b.n	19ea <__aeabi_dadd+0x11a>
    2010:	2500      	movs	r5, #0
    2012:	e799      	b.n	1f48 <__aeabi_dadd+0x678>
    2014:	000007ff 	.word	0x000007ff
    2018:	ff7fffff 	.word	0xff7fffff
    201c:	007fffff 	.word	0x007fffff
    2020:	1c2c      	adds	r4, r5, #0
    2022:	1c0f      	adds	r7, r1, #0
    2024:	2201      	movs	r2, #1
    2026:	2600      	movs	r6, #0
    2028:	e4df      	b.n	19ea <__aeabi_dadd+0x11a>
    202a:	2200      	movs	r2, #0
    202c:	e7e4      	b.n	1ff8 <__aeabi_dadd+0x728>
    202e:	46c0      	nop			; (mov r8, r8)

00002030 <__aeabi_ddiv>:
    2030:	b5f0      	push	{r4, r5, r6, r7, lr}
    2032:	464d      	mov	r5, r9
    2034:	4644      	mov	r4, r8
    2036:	465f      	mov	r7, fp
    2038:	4656      	mov	r6, sl
    203a:	b4f0      	push	{r4, r5, r6, r7}
    203c:	1c1d      	adds	r5, r3, #0
    203e:	004b      	lsls	r3, r1, #1
    2040:	1c14      	adds	r4, r2, #0
    2042:	030e      	lsls	r6, r1, #12
    2044:	0d5b      	lsrs	r3, r3, #21
    2046:	0fca      	lsrs	r2, r1, #31
    2048:	b087      	sub	sp, #28
    204a:	1c07      	adds	r7, r0, #0
    204c:	0b36      	lsrs	r6, r6, #12
    204e:	4698      	mov	r8, r3
    2050:	4691      	mov	r9, r2
    2052:	2b00      	cmp	r3, #0
    2054:	d11d      	bne.n	2092 <__aeabi_ddiv+0x62>
    2056:	1c32      	adds	r2, r6, #0
    2058:	4302      	orrs	r2, r0
    205a:	d100      	bne.n	205e <__aeabi_ddiv+0x2e>
    205c:	e181      	b.n	2362 <__aeabi_ddiv+0x332>
    205e:	2e00      	cmp	r6, #0
    2060:	d100      	bne.n	2064 <__aeabi_ddiv+0x34>
    2062:	e204      	b.n	246e <__aeabi_ddiv+0x43e>
    2064:	1c30      	adds	r0, r6, #0
    2066:	f001 fa71 	bl	354c <__clzsi2>
    206a:	2827      	cmp	r0, #39	; 0x27
    206c:	dd00      	ble.n	2070 <__aeabi_ddiv+0x40>
    206e:	e1f8      	b.n	2462 <__aeabi_ddiv+0x432>
    2070:	2128      	movs	r1, #40	; 0x28
    2072:	1c03      	adds	r3, r0, #0
    2074:	3b08      	subs	r3, #8
    2076:	1a0a      	subs	r2, r1, r0
    2078:	1c39      	adds	r1, r7, #0
    207a:	409e      	lsls	r6, r3
    207c:	40d1      	lsrs	r1, r2
    207e:	430e      	orrs	r6, r1
    2080:	409f      	lsls	r7, r3
    2082:	4bc1      	ldr	r3, [pc, #772]	; (2388 <__aeabi_ddiv+0x358>)
    2084:	2100      	movs	r1, #0
    2086:	1a18      	subs	r0, r3, r0
    2088:	2200      	movs	r2, #0
    208a:	4680      	mov	r8, r0
    208c:	468a      	mov	sl, r1
    208e:	9200      	str	r2, [sp, #0]
    2090:	e00f      	b.n	20b2 <__aeabi_ddiv+0x82>
    2092:	48be      	ldr	r0, [pc, #760]	; (238c <__aeabi_ddiv+0x35c>)
    2094:	4283      	cmp	r3, r0
    2096:	d031      	beq.n	20fc <__aeabi_ddiv+0xcc>
    2098:	2180      	movs	r1, #128	; 0x80
    209a:	034b      	lsls	r3, r1, #13
    209c:	431e      	orrs	r6, r3
    209e:	48bc      	ldr	r0, [pc, #752]	; (2390 <__aeabi_ddiv+0x360>)
    20a0:	0f7a      	lsrs	r2, r7, #29
    20a2:	00f6      	lsls	r6, r6, #3
    20a4:	2100      	movs	r1, #0
    20a6:	2300      	movs	r3, #0
    20a8:	4316      	orrs	r6, r2
    20aa:	00ff      	lsls	r7, r7, #3
    20ac:	4480      	add	r8, r0
    20ae:	468a      	mov	sl, r1
    20b0:	9300      	str	r3, [sp, #0]
    20b2:	1c29      	adds	r1, r5, #0
    20b4:	1c20      	adds	r0, r4, #0
    20b6:	1c25      	adds	r5, r4, #0
    20b8:	004a      	lsls	r2, r1, #1
    20ba:	030c      	lsls	r4, r1, #12
    20bc:	0fcb      	lsrs	r3, r1, #31
    20be:	0b24      	lsrs	r4, r4, #12
    20c0:	0d52      	lsrs	r2, r2, #21
    20c2:	469b      	mov	fp, r3
    20c4:	d125      	bne.n	2112 <__aeabi_ddiv+0xe2>
    20c6:	1c21      	adds	r1, r4, #0
    20c8:	4301      	orrs	r1, r0
    20ca:	d100      	bne.n	20ce <__aeabi_ddiv+0x9e>
    20cc:	e150      	b.n	2370 <__aeabi_ddiv+0x340>
    20ce:	2c00      	cmp	r4, #0
    20d0:	d100      	bne.n	20d4 <__aeabi_ddiv+0xa4>
    20d2:	e1c2      	b.n	245a <__aeabi_ddiv+0x42a>
    20d4:	1c20      	adds	r0, r4, #0
    20d6:	f001 fa39 	bl	354c <__clzsi2>
    20da:	2827      	cmp	r0, #39	; 0x27
    20dc:	dd00      	ble.n	20e0 <__aeabi_ddiv+0xb0>
    20de:	e1b6      	b.n	244e <__aeabi_ddiv+0x41e>
    20e0:	1c03      	adds	r3, r0, #0
    20e2:	2228      	movs	r2, #40	; 0x28
    20e4:	3b08      	subs	r3, #8
    20e6:	1c29      	adds	r1, r5, #0
    20e8:	1a12      	subs	r2, r2, r0
    20ea:	409c      	lsls	r4, r3
    20ec:	40d1      	lsrs	r1, r2
    20ee:	430c      	orrs	r4, r1
    20f0:	409d      	lsls	r5, r3
    20f2:	4ba5      	ldr	r3, [pc, #660]	; (2388 <__aeabi_ddiv+0x358>)
    20f4:	1a1a      	subs	r2, r3, r0
    20f6:	2000      	movs	r0, #0
    20f8:	9002      	str	r0, [sp, #8]
    20fa:	e019      	b.n	2130 <__aeabi_ddiv+0x100>
    20fc:	1c32      	adds	r2, r6, #0
    20fe:	433a      	orrs	r2, r7
    2100:	d000      	beq.n	2104 <__aeabi_ddiv+0xd4>
    2102:	e129      	b.n	2358 <__aeabi_ddiv+0x328>
    2104:	2708      	movs	r7, #8
    2106:	2302      	movs	r3, #2
    2108:	46ba      	mov	sl, r7
    210a:	2600      	movs	r6, #0
    210c:	2700      	movs	r7, #0
    210e:	9300      	str	r3, [sp, #0]
    2110:	e7cf      	b.n	20b2 <__aeabi_ddiv+0x82>
    2112:	489e      	ldr	r0, [pc, #632]	; (238c <__aeabi_ddiv+0x35c>)
    2114:	4282      	cmp	r2, r0
    2116:	d100      	bne.n	211a <__aeabi_ddiv+0xea>
    2118:	e113      	b.n	2342 <__aeabi_ddiv+0x312>
    211a:	2180      	movs	r1, #128	; 0x80
    211c:	034b      	lsls	r3, r1, #13
    211e:	431c      	orrs	r4, r3
    2120:	499b      	ldr	r1, [pc, #620]	; (2390 <__aeabi_ddiv+0x360>)
    2122:	0f68      	lsrs	r0, r5, #29
    2124:	00e4      	lsls	r4, r4, #3
    2126:	2300      	movs	r3, #0
    2128:	4304      	orrs	r4, r0
    212a:	00ed      	lsls	r5, r5, #3
    212c:	1852      	adds	r2, r2, r1
    212e:	9302      	str	r3, [sp, #8]
    2130:	4648      	mov	r0, r9
    2132:	465b      	mov	r3, fp
    2134:	4043      	eors	r3, r0
    2136:	9802      	ldr	r0, [sp, #8]
    2138:	4651      	mov	r1, sl
    213a:	9301      	str	r3, [sp, #4]
    213c:	4301      	orrs	r1, r0
    213e:	290f      	cmp	r1, #15
    2140:	d800      	bhi.n	2144 <__aeabi_ddiv+0x114>
    2142:	e0df      	b.n	2304 <__aeabi_ddiv+0x2d4>
    2144:	4643      	mov	r3, r8
    2146:	1a9a      	subs	r2, r3, r2
    2148:	9204      	str	r2, [sp, #16]
    214a:	42a6      	cmp	r6, r4
    214c:	d800      	bhi.n	2150 <__aeabi_ddiv+0x120>
    214e:	e16e      	b.n	242e <__aeabi_ddiv+0x3fe>
    2150:	0871      	lsrs	r1, r6, #1
    2152:	087b      	lsrs	r3, r7, #1
    2154:	07f6      	lsls	r6, r6, #31
    2156:	4333      	orrs	r3, r6
    2158:	07fa      	lsls	r2, r7, #31
    215a:	4689      	mov	r9, r1
    215c:	4698      	mov	r8, r3
    215e:	9202      	str	r2, [sp, #8]
    2160:	0e28      	lsrs	r0, r5, #24
    2162:	0224      	lsls	r4, r4, #8
    2164:	4304      	orrs	r4, r0
    2166:	022d      	lsls	r5, r5, #8
    2168:	0427      	lsls	r7, r4, #16
    216a:	0c39      	lsrs	r1, r7, #16
    216c:	46ab      	mov	fp, r5
    216e:	0c25      	lsrs	r5, r4, #16
    2170:	9100      	str	r1, [sp, #0]
    2172:	4648      	mov	r0, r9
    2174:	1c29      	adds	r1, r5, #0
    2176:	f7ff fafd 	bl	1774 <__aeabi_uidiv>
    217a:	9f00      	ldr	r7, [sp, #0]
    217c:	1c06      	adds	r6, r0, #0
    217e:	4347      	muls	r7, r0
    2180:	1c29      	adds	r1, r5, #0
    2182:	4648      	mov	r0, r9
    2184:	f7ff fb3a 	bl	17fc <__aeabi_uidivmod>
    2188:	4643      	mov	r3, r8
    218a:	0408      	lsls	r0, r1, #16
    218c:	0c1a      	lsrs	r2, r3, #16
    218e:	4310      	orrs	r0, r2
    2190:	4287      	cmp	r7, r0
    2192:	d907      	bls.n	21a4 <__aeabi_ddiv+0x174>
    2194:	1900      	adds	r0, r0, r4
    2196:	3e01      	subs	r6, #1
    2198:	4284      	cmp	r4, r0
    219a:	d803      	bhi.n	21a4 <__aeabi_ddiv+0x174>
    219c:	4287      	cmp	r7, r0
    219e:	d901      	bls.n	21a4 <__aeabi_ddiv+0x174>
    21a0:	3e01      	subs	r6, #1
    21a2:	1900      	adds	r0, r0, r4
    21a4:	1bc1      	subs	r1, r0, r7
    21a6:	468a      	mov	sl, r1
    21a8:	1c08      	adds	r0, r1, #0
    21aa:	1c29      	adds	r1, r5, #0
    21ac:	f7ff fae2 	bl	1774 <__aeabi_uidiv>
    21b0:	9b00      	ldr	r3, [sp, #0]
    21b2:	1c07      	adds	r7, r0, #0
    21b4:	4343      	muls	r3, r0
    21b6:	1c29      	adds	r1, r5, #0
    21b8:	4650      	mov	r0, sl
    21ba:	4699      	mov	r9, r3
    21bc:	f7ff fb1e 	bl	17fc <__aeabi_uidivmod>
    21c0:	4642      	mov	r2, r8
    21c2:	0410      	lsls	r0, r2, #16
    21c4:	040b      	lsls	r3, r1, #16
    21c6:	0c01      	lsrs	r1, r0, #16
    21c8:	430b      	orrs	r3, r1
    21ca:	4599      	cmp	r9, r3
    21cc:	d904      	bls.n	21d8 <__aeabi_ddiv+0x1a8>
    21ce:	191b      	adds	r3, r3, r4
    21d0:	3f01      	subs	r7, #1
    21d2:	429c      	cmp	r4, r3
    21d4:	d800      	bhi.n	21d8 <__aeabi_ddiv+0x1a8>
    21d6:	e164      	b.n	24a2 <__aeabi_ddiv+0x472>
    21d8:	0436      	lsls	r6, r6, #16
    21da:	433e      	orrs	r6, r7
    21dc:	465f      	mov	r7, fp
    21de:	464a      	mov	r2, r9
    21e0:	0c39      	lsrs	r1, r7, #16
    21e2:	4689      	mov	r9, r1
    21e4:	1a9b      	subs	r3, r3, r2
    21e6:	4659      	mov	r1, fp
    21e8:	0432      	lsls	r2, r6, #16
    21ea:	0c17      	lsrs	r7, r2, #16
    21ec:	040a      	lsls	r2, r1, #16
    21ee:	4649      	mov	r1, r9
    21f0:	4379      	muls	r1, r7
    21f2:	0c12      	lsrs	r2, r2, #16
    21f4:	9203      	str	r2, [sp, #12]
    21f6:	468c      	mov	ip, r1
    21f8:	9903      	ldr	r1, [sp, #12]
    21fa:	0c30      	lsrs	r0, r6, #16
    21fc:	437a      	muls	r2, r7
    21fe:	4341      	muls	r1, r0
    2200:	464f      	mov	r7, r9
    2202:	4378      	muls	r0, r7
    2204:	448c      	add	ip, r1
    2206:	0c17      	lsrs	r7, r2, #16
    2208:	4467      	add	r7, ip
    220a:	42b9      	cmp	r1, r7
    220c:	d902      	bls.n	2214 <__aeabi_ddiv+0x1e4>
    220e:	2180      	movs	r1, #128	; 0x80
    2210:	0249      	lsls	r1, r1, #9
    2212:	1840      	adds	r0, r0, r1
    2214:	0c39      	lsrs	r1, r7, #16
    2216:	0412      	lsls	r2, r2, #16
    2218:	1840      	adds	r0, r0, r1
    221a:	043f      	lsls	r7, r7, #16
    221c:	0c11      	lsrs	r1, r2, #16
    221e:	187f      	adds	r7, r7, r1
    2220:	4283      	cmp	r3, r0
    2222:	d200      	bcs.n	2226 <__aeabi_ddiv+0x1f6>
    2224:	e127      	b.n	2476 <__aeabi_ddiv+0x446>
    2226:	d100      	bne.n	222a <__aeabi_ddiv+0x1fa>
    2228:	e141      	b.n	24ae <__aeabi_ddiv+0x47e>
    222a:	9902      	ldr	r1, [sp, #8]
    222c:	1a1b      	subs	r3, r3, r0
    222e:	1bcf      	subs	r7, r1, r7
    2230:	42b9      	cmp	r1, r7
    2232:	4180      	sbcs	r0, r0
    2234:	4241      	negs	r1, r0
    2236:	1a5a      	subs	r2, r3, r1
    2238:	4690      	mov	r8, r2
    223a:	42a2      	cmp	r2, r4
    223c:	d100      	bne.n	2240 <__aeabi_ddiv+0x210>
    223e:	e15f      	b.n	2500 <__aeabi_ddiv+0x4d0>
    2240:	1c10      	adds	r0, r2, #0
    2242:	1c29      	adds	r1, r5, #0
    2244:	f7ff fa96 	bl	1774 <__aeabi_uidiv>
    2248:	9b00      	ldr	r3, [sp, #0]
    224a:	9002      	str	r0, [sp, #8]
    224c:	4343      	muls	r3, r0
    224e:	1c29      	adds	r1, r5, #0
    2250:	4640      	mov	r0, r8
    2252:	469a      	mov	sl, r3
    2254:	f7ff fad2 	bl	17fc <__aeabi_uidivmod>
    2258:	0c38      	lsrs	r0, r7, #16
    225a:	0409      	lsls	r1, r1, #16
    225c:	4301      	orrs	r1, r0
    225e:	458a      	cmp	sl, r1
    2260:	d90a      	bls.n	2278 <__aeabi_ddiv+0x248>
    2262:	9a02      	ldr	r2, [sp, #8]
    2264:	1909      	adds	r1, r1, r4
    2266:	3a01      	subs	r2, #1
    2268:	9202      	str	r2, [sp, #8]
    226a:	428c      	cmp	r4, r1
    226c:	d804      	bhi.n	2278 <__aeabi_ddiv+0x248>
    226e:	458a      	cmp	sl, r1
    2270:	d902      	bls.n	2278 <__aeabi_ddiv+0x248>
    2272:	3a01      	subs	r2, #1
    2274:	9202      	str	r2, [sp, #8]
    2276:	1909      	adds	r1, r1, r4
    2278:	4653      	mov	r3, sl
    227a:	1ac8      	subs	r0, r1, r3
    227c:	1c29      	adds	r1, r5, #0
    227e:	9005      	str	r0, [sp, #20]
    2280:	f7ff fa78 	bl	1774 <__aeabi_uidiv>
    2284:	9a00      	ldr	r2, [sp, #0]
    2286:	1c29      	adds	r1, r5, #0
    2288:	4342      	muls	r2, r0
    228a:	4680      	mov	r8, r0
    228c:	9805      	ldr	r0, [sp, #20]
    228e:	4692      	mov	sl, r2
    2290:	f7ff fab4 	bl	17fc <__aeabi_uidivmod>
    2294:	043f      	lsls	r7, r7, #16
    2296:	040d      	lsls	r5, r1, #16
    2298:	0c3a      	lsrs	r2, r7, #16
    229a:	432a      	orrs	r2, r5
    229c:	4592      	cmp	sl, r2
    229e:	d909      	bls.n	22b4 <__aeabi_ddiv+0x284>
    22a0:	2101      	movs	r1, #1
    22a2:	424b      	negs	r3, r1
    22a4:	1912      	adds	r2, r2, r4
    22a6:	4498      	add	r8, r3
    22a8:	4294      	cmp	r4, r2
    22aa:	d803      	bhi.n	22b4 <__aeabi_ddiv+0x284>
    22ac:	4592      	cmp	sl, r2
    22ae:	d901      	bls.n	22b4 <__aeabi_ddiv+0x284>
    22b0:	4498      	add	r8, r3
    22b2:	1912      	adds	r2, r2, r4
    22b4:	9d02      	ldr	r5, [sp, #8]
    22b6:	4643      	mov	r3, r8
    22b8:	042f      	lsls	r7, r5, #16
    22ba:	431f      	orrs	r7, r3
    22bc:	4650      	mov	r0, sl
    22be:	1a11      	subs	r1, r2, r0
    22c0:	0438      	lsls	r0, r7, #16
    22c2:	0c03      	lsrs	r3, r0, #16
    22c4:	464d      	mov	r5, r9
    22c6:	435d      	muls	r5, r3
    22c8:	9803      	ldr	r0, [sp, #12]
    22ca:	46ac      	mov	ip, r5
    22cc:	9d03      	ldr	r5, [sp, #12]
    22ce:	0c3a      	lsrs	r2, r7, #16
    22d0:	4358      	muls	r0, r3
    22d2:	4355      	muls	r5, r2
    22d4:	464b      	mov	r3, r9
    22d6:	435a      	muls	r2, r3
    22d8:	44ac      	add	ip, r5
    22da:	0c03      	lsrs	r3, r0, #16
    22dc:	4463      	add	r3, ip
    22de:	429d      	cmp	r5, r3
    22e0:	d902      	bls.n	22e8 <__aeabi_ddiv+0x2b8>
    22e2:	2580      	movs	r5, #128	; 0x80
    22e4:	026d      	lsls	r5, r5, #9
    22e6:	1952      	adds	r2, r2, r5
    22e8:	0c1d      	lsrs	r5, r3, #16
    22ea:	0400      	lsls	r0, r0, #16
    22ec:	1952      	adds	r2, r2, r5
    22ee:	041b      	lsls	r3, r3, #16
    22f0:	0c05      	lsrs	r5, r0, #16
    22f2:	195b      	adds	r3, r3, r5
    22f4:	4291      	cmp	r1, r2
    22f6:	d200      	bcs.n	22fa <__aeabi_ddiv+0x2ca>
    22f8:	e0e6      	b.n	24c8 <__aeabi_ddiv+0x498>
    22fa:	d100      	bne.n	22fe <__aeabi_ddiv+0x2ce>
    22fc:	e13d      	b.n	257a <__aeabi_ddiv+0x54a>
    22fe:	2201      	movs	r2, #1
    2300:	4317      	orrs	r7, r2
    2302:	e05a      	b.n	23ba <__aeabi_ddiv+0x38a>
    2304:	0089      	lsls	r1, r1, #2
    2306:	4823      	ldr	r0, [pc, #140]	; (2394 <__aeabi_ddiv+0x364>)
    2308:	468c      	mov	ip, r1
    230a:	4460      	add	r0, ip
    230c:	6801      	ldr	r1, [r0, #0]
    230e:	468f      	mov	pc, r1
    2310:	9b01      	ldr	r3, [sp, #4]
    2312:	4a1e      	ldr	r2, [pc, #120]	; (238c <__aeabi_ddiv+0x35c>)
    2314:	2600      	movs	r6, #0
    2316:	2700      	movs	r7, #0
    2318:	2000      	movs	r0, #0
    231a:	2100      	movs	r1, #0
    231c:	1c38      	adds	r0, r7, #0
    231e:	0d0f      	lsrs	r7, r1, #20
    2320:	053c      	lsls	r4, r7, #20
    2322:	4d1d      	ldr	r5, [pc, #116]	; (2398 <__aeabi_ddiv+0x368>)
    2324:	4334      	orrs	r4, r6
    2326:	0512      	lsls	r2, r2, #20
    2328:	4025      	ands	r5, r4
    232a:	4315      	orrs	r5, r2
    232c:	006e      	lsls	r6, r5, #1
    232e:	07db      	lsls	r3, r3, #31
    2330:	0871      	lsrs	r1, r6, #1
    2332:	4319      	orrs	r1, r3
    2334:	b007      	add	sp, #28
    2336:	bc3c      	pop	{r2, r3, r4, r5}
    2338:	4690      	mov	r8, r2
    233a:	4699      	mov	r9, r3
    233c:	46a2      	mov	sl, r4
    233e:	46ab      	mov	fp, r5
    2340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2342:	1c21      	adds	r1, r4, #0
    2344:	2003      	movs	r0, #3
    2346:	4329      	orrs	r1, r5
    2348:	9002      	str	r0, [sp, #8]
    234a:	d000      	beq.n	234e <__aeabi_ddiv+0x31e>
    234c:	e6f0      	b.n	2130 <__aeabi_ddiv+0x100>
    234e:	2302      	movs	r3, #2
    2350:	2400      	movs	r4, #0
    2352:	2500      	movs	r5, #0
    2354:	9302      	str	r3, [sp, #8]
    2356:	e6eb      	b.n	2130 <__aeabi_ddiv+0x100>
    2358:	200c      	movs	r0, #12
    235a:	2103      	movs	r1, #3
    235c:	4682      	mov	sl, r0
    235e:	9100      	str	r1, [sp, #0]
    2360:	e6a7      	b.n	20b2 <__aeabi_ddiv+0x82>
    2362:	2704      	movs	r7, #4
    2364:	2301      	movs	r3, #1
    2366:	46ba      	mov	sl, r7
    2368:	2600      	movs	r6, #0
    236a:	2700      	movs	r7, #0
    236c:	9300      	str	r3, [sp, #0]
    236e:	e6a0      	b.n	20b2 <__aeabi_ddiv+0x82>
    2370:	2101      	movs	r1, #1
    2372:	2400      	movs	r4, #0
    2374:	2500      	movs	r5, #0
    2376:	9102      	str	r1, [sp, #8]
    2378:	e6da      	b.n	2130 <__aeabi_ddiv+0x100>
    237a:	2701      	movs	r7, #1
    237c:	2300      	movs	r3, #0
    237e:	4e07      	ldr	r6, [pc, #28]	; (239c <__aeabi_ddiv+0x36c>)
    2380:	427f      	negs	r7, r7
    2382:	4a02      	ldr	r2, [pc, #8]	; (238c <__aeabi_ddiv+0x35c>)
    2384:	e7c8      	b.n	2318 <__aeabi_ddiv+0x2e8>
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	fffffc0d 	.word	0xfffffc0d
    238c:	000007ff 	.word	0x000007ff
    2390:	fffffc01 	.word	0xfffffc01
    2394:	000036f0 	.word	0x000036f0
    2398:	800fffff 	.word	0x800fffff
    239c:	000fffff 	.word	0x000fffff
    23a0:	1c2f      	adds	r7, r5, #0
    23a2:	465a      	mov	r2, fp
    23a4:	9d02      	ldr	r5, [sp, #8]
    23a6:	1c26      	adds	r6, r4, #0
    23a8:	9201      	str	r2, [sp, #4]
    23aa:	2d02      	cmp	r5, #2
    23ac:	d0b0      	beq.n	2310 <__aeabi_ddiv+0x2e0>
    23ae:	2d03      	cmp	r5, #3
    23b0:	d100      	bne.n	23b4 <__aeabi_ddiv+0x384>
    23b2:	e101      	b.n	25b8 <__aeabi_ddiv+0x588>
    23b4:	2d01      	cmp	r5, #1
    23b6:	d100      	bne.n	23ba <__aeabi_ddiv+0x38a>
    23b8:	e09c      	b.n	24f4 <__aeabi_ddiv+0x4c4>
    23ba:	9b04      	ldr	r3, [sp, #16]
    23bc:	4882      	ldr	r0, [pc, #520]	; (25c8 <__aeabi_ddiv+0x598>)
    23be:	181a      	adds	r2, r3, r0
    23c0:	2a00      	cmp	r2, #0
    23c2:	dc00      	bgt.n	23c6 <__aeabi_ddiv+0x396>
    23c4:	e08c      	b.n	24e0 <__aeabi_ddiv+0x4b0>
    23c6:	240f      	movs	r4, #15
    23c8:	403c      	ands	r4, r7
    23ca:	2c04      	cmp	r4, #4
    23cc:	d005      	beq.n	23da <__aeabi_ddiv+0x3aa>
    23ce:	1d3b      	adds	r3, r7, #4
    23d0:	42bb      	cmp	r3, r7
    23d2:	41bf      	sbcs	r7, r7
    23d4:	427d      	negs	r5, r7
    23d6:	1976      	adds	r6, r6, r5
    23d8:	1c1f      	adds	r7, r3, #0
    23da:	01f1      	lsls	r1, r6, #7
    23dc:	d505      	bpl.n	23ea <__aeabi_ddiv+0x3ba>
    23de:	4a7b      	ldr	r2, [pc, #492]	; (25cc <__aeabi_ddiv+0x59c>)
    23e0:	9904      	ldr	r1, [sp, #16]
    23e2:	2080      	movs	r0, #128	; 0x80
    23e4:	00c4      	lsls	r4, r0, #3
    23e6:	4016      	ands	r6, r2
    23e8:	190a      	adds	r2, r1, r4
    23ea:	4b79      	ldr	r3, [pc, #484]	; (25d0 <__aeabi_ddiv+0x5a0>)
    23ec:	429a      	cmp	r2, r3
    23ee:	dd00      	ble.n	23f2 <__aeabi_ddiv+0x3c2>
    23f0:	e78e      	b.n	2310 <__aeabi_ddiv+0x2e0>
    23f2:	0775      	lsls	r5, r6, #29
    23f4:	08ff      	lsrs	r7, r7, #3
    23f6:	0276      	lsls	r6, r6, #9
    23f8:	0551      	lsls	r1, r2, #21
    23fa:	432f      	orrs	r7, r5
    23fc:	0b36      	lsrs	r6, r6, #12
    23fe:	0d4a      	lsrs	r2, r1, #21
    2400:	9b01      	ldr	r3, [sp, #4]
    2402:	e789      	b.n	2318 <__aeabi_ddiv+0x2e8>
    2404:	2200      	movs	r2, #0
    2406:	2600      	movs	r6, #0
    2408:	2700      	movs	r7, #0
    240a:	e785      	b.n	2318 <__aeabi_ddiv+0x2e8>
    240c:	2080      	movs	r0, #128	; 0x80
    240e:	0301      	lsls	r1, r0, #12
    2410:	420e      	tst	r6, r1
    2412:	d016      	beq.n	2442 <__aeabi_ddiv+0x412>
    2414:	420c      	tst	r4, r1
    2416:	d114      	bne.n	2442 <__aeabi_ddiv+0x412>
    2418:	430c      	orrs	r4, r1
    241a:	0326      	lsls	r6, r4, #12
    241c:	0b36      	lsrs	r6, r6, #12
    241e:	465b      	mov	r3, fp
    2420:	1c2f      	adds	r7, r5, #0
    2422:	4a6c      	ldr	r2, [pc, #432]	; (25d4 <__aeabi_ddiv+0x5a4>)
    2424:	e778      	b.n	2318 <__aeabi_ddiv+0x2e8>
    2426:	464c      	mov	r4, r9
    2428:	9401      	str	r4, [sp, #4]
    242a:	9d00      	ldr	r5, [sp, #0]
    242c:	e7bd      	b.n	23aa <__aeabi_ddiv+0x37a>
    242e:	42a6      	cmp	r6, r4
    2430:	d043      	beq.n	24ba <__aeabi_ddiv+0x48a>
    2432:	9804      	ldr	r0, [sp, #16]
    2434:	46b8      	mov	r8, r7
    2436:	3801      	subs	r0, #1
    2438:	2700      	movs	r7, #0
    243a:	9004      	str	r0, [sp, #16]
    243c:	46b1      	mov	r9, r6
    243e:	9702      	str	r7, [sp, #8]
    2440:	e68e      	b.n	2160 <__aeabi_ddiv+0x130>
    2442:	430e      	orrs	r6, r1
    2444:	0333      	lsls	r3, r6, #12
    2446:	0b1e      	lsrs	r6, r3, #12
    2448:	4a62      	ldr	r2, [pc, #392]	; (25d4 <__aeabi_ddiv+0x5a4>)
    244a:	464b      	mov	r3, r9
    244c:	e764      	b.n	2318 <__aeabi_ddiv+0x2e8>
    244e:	1c04      	adds	r4, r0, #0
    2450:	3c28      	subs	r4, #40	; 0x28
    2452:	40a5      	lsls	r5, r4
    2454:	1c2c      	adds	r4, r5, #0
    2456:	2500      	movs	r5, #0
    2458:	e64b      	b.n	20f2 <__aeabi_ddiv+0xc2>
    245a:	f001 f877 	bl	354c <__clzsi2>
    245e:	3020      	adds	r0, #32
    2460:	e63b      	b.n	20da <__aeabi_ddiv+0xaa>
    2462:	1c06      	adds	r6, r0, #0
    2464:	3e28      	subs	r6, #40	; 0x28
    2466:	40b7      	lsls	r7, r6
    2468:	1c3e      	adds	r6, r7, #0
    246a:	2700      	movs	r7, #0
    246c:	e609      	b.n	2082 <__aeabi_ddiv+0x52>
    246e:	f001 f86d 	bl	354c <__clzsi2>
    2472:	3020      	adds	r0, #32
    2474:	e5f9      	b.n	206a <__aeabi_ddiv+0x3a>
    2476:	9a02      	ldr	r2, [sp, #8]
    2478:	3e01      	subs	r6, #1
    247a:	1c11      	adds	r1, r2, #0
    247c:	4459      	add	r1, fp
    247e:	4559      	cmp	r1, fp
    2480:	4192      	sbcs	r2, r2
    2482:	4252      	negs	r2, r2
    2484:	1912      	adds	r2, r2, r4
    2486:	18d3      	adds	r3, r2, r3
    2488:	429c      	cmp	r4, r3
    248a:	d204      	bcs.n	2496 <__aeabi_ddiv+0x466>
    248c:	4298      	cmp	r0, r3
    248e:	d86b      	bhi.n	2568 <__aeabi_ddiv+0x538>
    2490:	d016      	beq.n	24c0 <__aeabi_ddiv+0x490>
    2492:	1a1b      	subs	r3, r3, r0
    2494:	e6cb      	b.n	222e <__aeabi_ddiv+0x1fe>
    2496:	42a3      	cmp	r3, r4
    2498:	d1fb      	bne.n	2492 <__aeabi_ddiv+0x462>
    249a:	458b      	cmp	fp, r1
    249c:	d9f6      	bls.n	248c <__aeabi_ddiv+0x45c>
    249e:	1a23      	subs	r3, r4, r0
    24a0:	e6c5      	b.n	222e <__aeabi_ddiv+0x1fe>
    24a2:	4599      	cmp	r9, r3
    24a4:	d800      	bhi.n	24a8 <__aeabi_ddiv+0x478>
    24a6:	e697      	b.n	21d8 <__aeabi_ddiv+0x1a8>
    24a8:	3f01      	subs	r7, #1
    24aa:	191b      	adds	r3, r3, r4
    24ac:	e694      	b.n	21d8 <__aeabi_ddiv+0x1a8>
    24ae:	9a02      	ldr	r2, [sp, #8]
    24b0:	42ba      	cmp	r2, r7
    24b2:	d3e0      	bcc.n	2476 <__aeabi_ddiv+0x446>
    24b4:	9902      	ldr	r1, [sp, #8]
    24b6:	2300      	movs	r3, #0
    24b8:	e6b9      	b.n	222e <__aeabi_ddiv+0x1fe>
    24ba:	42af      	cmp	r7, r5
    24bc:	d9b9      	bls.n	2432 <__aeabi_ddiv+0x402>
    24be:	e647      	b.n	2150 <__aeabi_ddiv+0x120>
    24c0:	428f      	cmp	r7, r1
    24c2:	d851      	bhi.n	2568 <__aeabi_ddiv+0x538>
    24c4:	2300      	movs	r3, #0
    24c6:	e6b2      	b.n	222e <__aeabi_ddiv+0x1fe>
    24c8:	1909      	adds	r1, r1, r4
    24ca:	3f01      	subs	r7, #1
    24cc:	4658      	mov	r0, fp
    24ce:	428c      	cmp	r4, r1
    24d0:	d919      	bls.n	2506 <__aeabi_ddiv+0x4d6>
    24d2:	4291      	cmp	r1, r2
    24d4:	d000      	beq.n	24d8 <__aeabi_ddiv+0x4a8>
    24d6:	e712      	b.n	22fe <__aeabi_ddiv+0x2ce>
    24d8:	4298      	cmp	r0, r3
    24da:	d000      	beq.n	24de <__aeabi_ddiv+0x4ae>
    24dc:	e70f      	b.n	22fe <__aeabi_ddiv+0x2ce>
    24de:	e76c      	b.n	23ba <__aeabi_ddiv+0x38a>
    24e0:	4c3d      	ldr	r4, [pc, #244]	; (25d8 <__aeabi_ddiv+0x5a8>)
    24e2:	9d04      	ldr	r5, [sp, #16]
    24e4:	1b63      	subs	r3, r4, r5
    24e6:	2b38      	cmp	r3, #56	; 0x38
    24e8:	dd1c      	ble.n	2524 <__aeabi_ddiv+0x4f4>
    24ea:	9b01      	ldr	r3, [sp, #4]
    24ec:	2200      	movs	r2, #0
    24ee:	2600      	movs	r6, #0
    24f0:	2700      	movs	r7, #0
    24f2:	e711      	b.n	2318 <__aeabi_ddiv+0x2e8>
    24f4:	9b01      	ldr	r3, [sp, #4]
    24f6:	2200      	movs	r2, #0
    24f8:	402b      	ands	r3, r5
    24fa:	2600      	movs	r6, #0
    24fc:	2700      	movs	r7, #0
    24fe:	e70b      	b.n	2318 <__aeabi_ddiv+0x2e8>
    2500:	2701      	movs	r7, #1
    2502:	427f      	negs	r7, r7
    2504:	e759      	b.n	23ba <__aeabi_ddiv+0x38a>
    2506:	428a      	cmp	r2, r1
    2508:	d803      	bhi.n	2512 <__aeabi_ddiv+0x4e2>
    250a:	d000      	beq.n	250e <__aeabi_ddiv+0x4de>
    250c:	e6f7      	b.n	22fe <__aeabi_ddiv+0x2ce>
    250e:	4298      	cmp	r0, r3
    2510:	d2e2      	bcs.n	24d8 <__aeabi_ddiv+0x4a8>
    2512:	465d      	mov	r5, fp
    2514:	0068      	lsls	r0, r5, #1
    2516:	4558      	cmp	r0, fp
    2518:	41ad      	sbcs	r5, r5
    251a:	426d      	negs	r5, r5
    251c:	192c      	adds	r4, r5, r4
    251e:	3f01      	subs	r7, #1
    2520:	1909      	adds	r1, r1, r4
    2522:	e7d6      	b.n	24d2 <__aeabi_ddiv+0x4a2>
    2524:	2b1f      	cmp	r3, #31
    2526:	dc34      	bgt.n	2592 <__aeabi_ddiv+0x562>
    2528:	9c04      	ldr	r4, [sp, #16]
    252a:	4a2c      	ldr	r2, [pc, #176]	; (25dc <__aeabi_ddiv+0x5ac>)
    252c:	1c38      	adds	r0, r7, #0
    252e:	18a5      	adds	r5, r4, r2
    2530:	1c31      	adds	r1, r6, #0
    2532:	40af      	lsls	r7, r5
    2534:	40d8      	lsrs	r0, r3
    2536:	40a9      	lsls	r1, r5
    2538:	1c3c      	adds	r4, r7, #0
    253a:	4301      	orrs	r1, r0
    253c:	1e67      	subs	r7, r4, #1
    253e:	41bc      	sbcs	r4, r7
    2540:	1c0f      	adds	r7, r1, #0
    2542:	4327      	orrs	r7, r4
    2544:	40de      	lsrs	r6, r3
    2546:	230f      	movs	r3, #15
    2548:	403b      	ands	r3, r7
    254a:	2b04      	cmp	r3, #4
    254c:	d005      	beq.n	255a <__aeabi_ddiv+0x52a>
    254e:	1d3a      	adds	r2, r7, #4
    2550:	42ba      	cmp	r2, r7
    2552:	41bf      	sbcs	r7, r7
    2554:	427d      	negs	r5, r7
    2556:	1976      	adds	r6, r6, r5
    2558:	1c17      	adds	r7, r2, #0
    255a:	0232      	lsls	r2, r6, #8
    255c:	d511      	bpl.n	2582 <__aeabi_ddiv+0x552>
    255e:	9b01      	ldr	r3, [sp, #4]
    2560:	2201      	movs	r2, #1
    2562:	2600      	movs	r6, #0
    2564:	2700      	movs	r7, #0
    2566:	e6d7      	b.n	2318 <__aeabi_ddiv+0x2e8>
    2568:	4459      	add	r1, fp
    256a:	4559      	cmp	r1, fp
    256c:	4192      	sbcs	r2, r2
    256e:	4252      	negs	r2, r2
    2570:	1912      	adds	r2, r2, r4
    2572:	18d3      	adds	r3, r2, r3
    2574:	3e01      	subs	r6, #1
    2576:	1a1b      	subs	r3, r3, r0
    2578:	e659      	b.n	222e <__aeabi_ddiv+0x1fe>
    257a:	2b00      	cmp	r3, #0
    257c:	d1a4      	bne.n	24c8 <__aeabi_ddiv+0x498>
    257e:	2000      	movs	r0, #0
    2580:	e7aa      	b.n	24d8 <__aeabi_ddiv+0x4a8>
    2582:	0770      	lsls	r0, r6, #29
    2584:	08ff      	lsrs	r7, r7, #3
    2586:	0271      	lsls	r1, r6, #9
    2588:	4307      	orrs	r7, r0
    258a:	0b0e      	lsrs	r6, r1, #12
    258c:	9b01      	ldr	r3, [sp, #4]
    258e:	2200      	movs	r2, #0
    2590:	e6c2      	b.n	2318 <__aeabi_ddiv+0x2e8>
    2592:	4913      	ldr	r1, [pc, #76]	; (25e0 <__aeabi_ddiv+0x5b0>)
    2594:	9c04      	ldr	r4, [sp, #16]
    2596:	1c30      	adds	r0, r6, #0
    2598:	1b0a      	subs	r2, r1, r4
    259a:	40d0      	lsrs	r0, r2
    259c:	1c05      	adds	r5, r0, #0
    259e:	2b20      	cmp	r3, #32
    25a0:	d008      	beq.n	25b4 <__aeabi_ddiv+0x584>
    25a2:	4b10      	ldr	r3, [pc, #64]	; (25e4 <__aeabi_ddiv+0x5b4>)
    25a4:	18e1      	adds	r1, r4, r3
    25a6:	408e      	lsls	r6, r1
    25a8:	4337      	orrs	r7, r6
    25aa:	1e7b      	subs	r3, r7, #1
    25ac:	419f      	sbcs	r7, r3
    25ae:	432f      	orrs	r7, r5
    25b0:	2600      	movs	r6, #0
    25b2:	e7c8      	b.n	2546 <__aeabi_ddiv+0x516>
    25b4:	2600      	movs	r6, #0
    25b6:	e7f7      	b.n	25a8 <__aeabi_ddiv+0x578>
    25b8:	2280      	movs	r2, #128	; 0x80
    25ba:	0310      	lsls	r0, r2, #12
    25bc:	4306      	orrs	r6, r0
    25be:	0331      	lsls	r1, r6, #12
    25c0:	0b0e      	lsrs	r6, r1, #12
    25c2:	9b01      	ldr	r3, [sp, #4]
    25c4:	4a03      	ldr	r2, [pc, #12]	; (25d4 <__aeabi_ddiv+0x5a4>)
    25c6:	e6a7      	b.n	2318 <__aeabi_ddiv+0x2e8>
    25c8:	000003ff 	.word	0x000003ff
    25cc:	feffffff 	.word	0xfeffffff
    25d0:	000007fe 	.word	0x000007fe
    25d4:	000007ff 	.word	0x000007ff
    25d8:	fffffc02 	.word	0xfffffc02
    25dc:	0000041e 	.word	0x0000041e
    25e0:	fffffbe2 	.word	0xfffffbe2
    25e4:	0000043e 	.word	0x0000043e

000025e8 <__eqdf2>:
    25e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ea:	4694      	mov	ip, r2
    25ec:	4647      	mov	r7, r8
    25ee:	031a      	lsls	r2, r3, #12
    25f0:	1c06      	adds	r6, r0, #0
    25f2:	0058      	lsls	r0, r3, #1
    25f4:	b480      	push	{r7}
    25f6:	0b17      	lsrs	r7, r2, #12
    25f8:	0d42      	lsrs	r2, r0, #21
    25fa:	4819      	ldr	r0, [pc, #100]	; (2660 <__eqdf2+0x78>)
    25fc:	030d      	lsls	r5, r1, #12
    25fe:	004c      	lsls	r4, r1, #1
    2600:	0fdb      	lsrs	r3, r3, #31
    2602:	0b2d      	lsrs	r5, r5, #12
    2604:	0d64      	lsrs	r4, r4, #21
    2606:	0fc9      	lsrs	r1, r1, #31
    2608:	4698      	mov	r8, r3
    260a:	4284      	cmp	r4, r0
    260c:	d008      	beq.n	2620 <__eqdf2+0x38>
    260e:	4814      	ldr	r0, [pc, #80]	; (2660 <__eqdf2+0x78>)
    2610:	4282      	cmp	r2, r0
    2612:	d00d      	beq.n	2630 <__eqdf2+0x48>
    2614:	2001      	movs	r0, #1
    2616:	4294      	cmp	r4, r2
    2618:	d012      	beq.n	2640 <__eqdf2+0x58>
    261a:	bc04      	pop	{r2}
    261c:	4690      	mov	r8, r2
    261e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2620:	1c2b      	adds	r3, r5, #0
    2622:	4333      	orrs	r3, r6
    2624:	2001      	movs	r0, #1
    2626:	2b00      	cmp	r3, #0
    2628:	d1f7      	bne.n	261a <__eqdf2+0x32>
    262a:	480d      	ldr	r0, [pc, #52]	; (2660 <__eqdf2+0x78>)
    262c:	4282      	cmp	r2, r0
    262e:	d1f1      	bne.n	2614 <__eqdf2+0x2c>
    2630:	4663      	mov	r3, ip
    2632:	433b      	orrs	r3, r7
    2634:	2001      	movs	r0, #1
    2636:	2b00      	cmp	r3, #0
    2638:	d1ef      	bne.n	261a <__eqdf2+0x32>
    263a:	2001      	movs	r0, #1
    263c:	4294      	cmp	r4, r2
    263e:	d1ec      	bne.n	261a <__eqdf2+0x32>
    2640:	42bd      	cmp	r5, r7
    2642:	d1ea      	bne.n	261a <__eqdf2+0x32>
    2644:	4566      	cmp	r6, ip
    2646:	d1e8      	bne.n	261a <__eqdf2+0x32>
    2648:	4541      	cmp	r1, r8
    264a:	d006      	beq.n	265a <__eqdf2+0x72>
    264c:	2c00      	cmp	r4, #0
    264e:	d1e4      	bne.n	261a <__eqdf2+0x32>
    2650:	1c28      	adds	r0, r5, #0
    2652:	4330      	orrs	r0, r6
    2654:	1e45      	subs	r5, r0, #1
    2656:	41a8      	sbcs	r0, r5
    2658:	e7df      	b.n	261a <__eqdf2+0x32>
    265a:	2000      	movs	r0, #0
    265c:	e7dd      	b.n	261a <__eqdf2+0x32>
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	000007ff 	.word	0x000007ff

00002664 <__gedf2>:
    2664:	b5f0      	push	{r4, r5, r6, r7, lr}
    2666:	4657      	mov	r7, sl
    2668:	464e      	mov	r6, r9
    266a:	4645      	mov	r5, r8
    266c:	b4e0      	push	{r5, r6, r7}
    266e:	1c04      	adds	r4, r0, #0
    2670:	004e      	lsls	r6, r1, #1
    2672:	0308      	lsls	r0, r1, #12
    2674:	0fc9      	lsrs	r1, r1, #31
    2676:	468a      	mov	sl, r1
    2678:	1c17      	adds	r7, r2, #0
    267a:	0059      	lsls	r1, r3, #1
    267c:	031a      	lsls	r2, r3, #12
    267e:	0b05      	lsrs	r5, r0, #12
    2680:	0d70      	lsrs	r0, r6, #21
    2682:	0b16      	lsrs	r6, r2, #12
    2684:	0d4a      	lsrs	r2, r1, #21
    2686:	4930      	ldr	r1, [pc, #192]	; (2748 <__gedf2+0xe4>)
    2688:	0fdb      	lsrs	r3, r3, #31
    268a:	469c      	mov	ip, r3
    268c:	4288      	cmp	r0, r1
    268e:	d032      	beq.n	26f6 <__gedf2+0x92>
    2690:	492d      	ldr	r1, [pc, #180]	; (2748 <__gedf2+0xe4>)
    2692:	428a      	cmp	r2, r1
    2694:	d035      	beq.n	2702 <__gedf2+0x9e>
    2696:	2800      	cmp	r0, #0
    2698:	d10f      	bne.n	26ba <__gedf2+0x56>
    269a:	1c29      	adds	r1, r5, #0
    269c:	4321      	orrs	r1, r4
    269e:	424b      	negs	r3, r1
    26a0:	414b      	adcs	r3, r1
    26a2:	4698      	mov	r8, r3
    26a4:	2a00      	cmp	r2, #0
    26a6:	d00b      	beq.n	26c0 <__gedf2+0x5c>
    26a8:	2b00      	cmp	r3, #0
    26aa:	d11a      	bne.n	26e2 <__gedf2+0x7e>
    26ac:	45e2      	cmp	sl, ip
    26ae:	d02c      	beq.n	270a <__gedf2+0xa6>
    26b0:	4655      	mov	r5, sl
    26b2:	2d00      	cmp	r5, #0
    26b4:	d118      	bne.n	26e8 <__gedf2+0x84>
    26b6:	2001      	movs	r0, #1
    26b8:	e018      	b.n	26ec <__gedf2+0x88>
    26ba:	2a00      	cmp	r2, #0
    26bc:	d1f6      	bne.n	26ac <__gedf2+0x48>
    26be:	4690      	mov	r8, r2
    26c0:	1c31      	adds	r1, r6, #0
    26c2:	4339      	orrs	r1, r7
    26c4:	424b      	negs	r3, r1
    26c6:	414b      	adcs	r3, r1
    26c8:	4641      	mov	r1, r8
    26ca:	2900      	cmp	r1, #0
    26cc:	d106      	bne.n	26dc <__gedf2+0x78>
    26ce:	2b00      	cmp	r3, #0
    26d0:	d0ec      	beq.n	26ac <__gedf2+0x48>
    26d2:	4656      	mov	r6, sl
    26d4:	2001      	movs	r0, #1
    26d6:	2e00      	cmp	r6, #0
    26d8:	d008      	beq.n	26ec <__gedf2+0x88>
    26da:	e005      	b.n	26e8 <__gedf2+0x84>
    26dc:	2000      	movs	r0, #0
    26de:	2b00      	cmp	r3, #0
    26e0:	d104      	bne.n	26ec <__gedf2+0x88>
    26e2:	4667      	mov	r7, ip
    26e4:	2f00      	cmp	r7, #0
    26e6:	d1e6      	bne.n	26b6 <__gedf2+0x52>
    26e8:	2301      	movs	r3, #1
    26ea:	4258      	negs	r0, r3
    26ec:	bc1c      	pop	{r2, r3, r4}
    26ee:	4690      	mov	r8, r2
    26f0:	4699      	mov	r9, r3
    26f2:	46a2      	mov	sl, r4
    26f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26f6:	1c2b      	adds	r3, r5, #0
    26f8:	4323      	orrs	r3, r4
    26fa:	d0c9      	beq.n	2690 <__gedf2+0x2c>
    26fc:	2102      	movs	r1, #2
    26fe:	4248      	negs	r0, r1
    2700:	e7f4      	b.n	26ec <__gedf2+0x88>
    2702:	1c33      	adds	r3, r6, #0
    2704:	433b      	orrs	r3, r7
    2706:	d0c6      	beq.n	2696 <__gedf2+0x32>
    2708:	e7f8      	b.n	26fc <__gedf2+0x98>
    270a:	4290      	cmp	r0, r2
    270c:	dc05      	bgt.n	271a <__gedf2+0xb6>
    270e:	da09      	bge.n	2724 <__gedf2+0xc0>
    2710:	4652      	mov	r2, sl
    2712:	2a00      	cmp	r2, #0
    2714:	d0e8      	beq.n	26e8 <__gedf2+0x84>
    2716:	2001      	movs	r0, #1
    2718:	e7e8      	b.n	26ec <__gedf2+0x88>
    271a:	4654      	mov	r4, sl
    271c:	2c00      	cmp	r4, #0
    271e:	d1e3      	bne.n	26e8 <__gedf2+0x84>
    2720:	2001      	movs	r0, #1
    2722:	e7e3      	b.n	26ec <__gedf2+0x88>
    2724:	42b5      	cmp	r5, r6
    2726:	d8c3      	bhi.n	26b0 <__gedf2+0x4c>
    2728:	d007      	beq.n	273a <__gedf2+0xd6>
    272a:	2000      	movs	r0, #0
    272c:	42b5      	cmp	r5, r6
    272e:	d2dd      	bcs.n	26ec <__gedf2+0x88>
    2730:	4650      	mov	r0, sl
    2732:	2800      	cmp	r0, #0
    2734:	d0d8      	beq.n	26e8 <__gedf2+0x84>
    2736:	2001      	movs	r0, #1
    2738:	e7d8      	b.n	26ec <__gedf2+0x88>
    273a:	42bc      	cmp	r4, r7
    273c:	d8b8      	bhi.n	26b0 <__gedf2+0x4c>
    273e:	2000      	movs	r0, #0
    2740:	42bc      	cmp	r4, r7
    2742:	d3f5      	bcc.n	2730 <__gedf2+0xcc>
    2744:	e7d2      	b.n	26ec <__gedf2+0x88>
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	000007ff 	.word	0x000007ff

0000274c <__ledf2>:
    274c:	b5f0      	push	{r4, r5, r6, r7, lr}
    274e:	4644      	mov	r4, r8
    2750:	465f      	mov	r7, fp
    2752:	4656      	mov	r6, sl
    2754:	464d      	mov	r5, r9
    2756:	b4f0      	push	{r4, r5, r6, r7}
    2758:	4694      	mov	ip, r2
    275a:	1c06      	adds	r6, r0, #0
    275c:	031a      	lsls	r2, r3, #12
    275e:	0058      	lsls	r0, r3, #1
    2760:	0b17      	lsrs	r7, r2, #12
    2762:	0d42      	lsrs	r2, r0, #21
    2764:	482e      	ldr	r0, [pc, #184]	; (2820 <__ledf2+0xd4>)
    2766:	030d      	lsls	r5, r1, #12
    2768:	004c      	lsls	r4, r1, #1
    276a:	0fdb      	lsrs	r3, r3, #31
    276c:	0b2d      	lsrs	r5, r5, #12
    276e:	0d64      	lsrs	r4, r4, #21
    2770:	0fc9      	lsrs	r1, r1, #31
    2772:	4698      	mov	r8, r3
    2774:	4284      	cmp	r4, r0
    2776:	d033      	beq.n	27e0 <__ledf2+0x94>
    2778:	4829      	ldr	r0, [pc, #164]	; (2820 <__ledf2+0xd4>)
    277a:	4282      	cmp	r2, r0
    277c:	d036      	beq.n	27ec <__ledf2+0xa0>
    277e:	2c00      	cmp	r4, #0
    2780:	d019      	beq.n	27b6 <__ledf2+0x6a>
    2782:	2a00      	cmp	r2, #0
    2784:	d120      	bne.n	27c8 <__ledf2+0x7c>
    2786:	4693      	mov	fp, r2
    2788:	4663      	mov	r3, ip
    278a:	433b      	orrs	r3, r7
    278c:	4258      	negs	r0, r3
    278e:	4158      	adcs	r0, r3
    2790:	465b      	mov	r3, fp
    2792:	4682      	mov	sl, r0
    2794:	2b00      	cmp	r3, #0
    2796:	d01d      	beq.n	27d4 <__ledf2+0x88>
    2798:	4651      	mov	r1, sl
    279a:	2000      	movs	r0, #0
    279c:	2900      	cmp	r1, #0
    279e:	d104      	bne.n	27aa <__ledf2+0x5e>
    27a0:	4642      	mov	r2, r8
    27a2:	2a00      	cmp	r2, #0
    27a4:	d114      	bne.n	27d0 <__ledf2+0x84>
    27a6:	2401      	movs	r4, #1
    27a8:	4260      	negs	r0, r4
    27aa:	bc3c      	pop	{r2, r3, r4, r5}
    27ac:	4690      	mov	r8, r2
    27ae:	4699      	mov	r9, r3
    27b0:	46a2      	mov	sl, r4
    27b2:	46ab      	mov	fp, r5
    27b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27b6:	1c2b      	adds	r3, r5, #0
    27b8:	4333      	orrs	r3, r6
    27ba:	4258      	negs	r0, r3
    27bc:	4143      	adcs	r3, r0
    27be:	469b      	mov	fp, r3
    27c0:	2a00      	cmp	r2, #0
    27c2:	d0e1      	beq.n	2788 <__ledf2+0x3c>
    27c4:	2b00      	cmp	r3, #0
    27c6:	d1eb      	bne.n	27a0 <__ledf2+0x54>
    27c8:	4541      	cmp	r1, r8
    27ca:	d015      	beq.n	27f8 <__ledf2+0xac>
    27cc:	2900      	cmp	r1, #0
    27ce:	d1ea      	bne.n	27a6 <__ledf2+0x5a>
    27d0:	2001      	movs	r0, #1
    27d2:	e7ea      	b.n	27aa <__ledf2+0x5e>
    27d4:	2800      	cmp	r0, #0
    27d6:	d0f7      	beq.n	27c8 <__ledf2+0x7c>
    27d8:	2001      	movs	r0, #1
    27da:	2900      	cmp	r1, #0
    27dc:	d0e5      	beq.n	27aa <__ledf2+0x5e>
    27de:	e7e2      	b.n	27a6 <__ledf2+0x5a>
    27e0:	1c2b      	adds	r3, r5, #0
    27e2:	4333      	orrs	r3, r6
    27e4:	2002      	movs	r0, #2
    27e6:	2b00      	cmp	r3, #0
    27e8:	d1df      	bne.n	27aa <__ledf2+0x5e>
    27ea:	e7c5      	b.n	2778 <__ledf2+0x2c>
    27ec:	4663      	mov	r3, ip
    27ee:	433b      	orrs	r3, r7
    27f0:	2002      	movs	r0, #2
    27f2:	2b00      	cmp	r3, #0
    27f4:	d1d9      	bne.n	27aa <__ledf2+0x5e>
    27f6:	e7c2      	b.n	277e <__ledf2+0x32>
    27f8:	4294      	cmp	r4, r2
    27fa:	dce7      	bgt.n	27cc <__ledf2+0x80>
    27fc:	db05      	blt.n	280a <__ledf2+0xbe>
    27fe:	42bd      	cmp	r5, r7
    2800:	d8e4      	bhi.n	27cc <__ledf2+0x80>
    2802:	d006      	beq.n	2812 <__ledf2+0xc6>
    2804:	2000      	movs	r0, #0
    2806:	42bd      	cmp	r5, r7
    2808:	d2cf      	bcs.n	27aa <__ledf2+0x5e>
    280a:	2900      	cmp	r1, #0
    280c:	d0cb      	beq.n	27a6 <__ledf2+0x5a>
    280e:	2001      	movs	r0, #1
    2810:	e7cb      	b.n	27aa <__ledf2+0x5e>
    2812:	4566      	cmp	r6, ip
    2814:	d8da      	bhi.n	27cc <__ledf2+0x80>
    2816:	2000      	movs	r0, #0
    2818:	4566      	cmp	r6, ip
    281a:	d3f6      	bcc.n	280a <__ledf2+0xbe>
    281c:	e7c5      	b.n	27aa <__ledf2+0x5e>
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	000007ff 	.word	0x000007ff

00002824 <__aeabi_dmul>:
    2824:	b5f0      	push	{r4, r5, r6, r7, lr}
    2826:	4656      	mov	r6, sl
    2828:	4644      	mov	r4, r8
    282a:	465f      	mov	r7, fp
    282c:	464d      	mov	r5, r9
    282e:	b4f0      	push	{r4, r5, r6, r7}
    2830:	004f      	lsls	r7, r1, #1
    2832:	1c1d      	adds	r5, r3, #0
    2834:	030b      	lsls	r3, r1, #12
    2836:	1c14      	adds	r4, r2, #0
    2838:	0b1a      	lsrs	r2, r3, #12
    283a:	0d7b      	lsrs	r3, r7, #21
    283c:	b087      	sub	sp, #28
    283e:	1c06      	adds	r6, r0, #0
    2840:	4692      	mov	sl, r2
    2842:	4698      	mov	r8, r3
    2844:	0fcf      	lsrs	r7, r1, #31
    2846:	2b00      	cmp	r3, #0
    2848:	d121      	bne.n	288e <__aeabi_dmul+0x6a>
    284a:	4302      	orrs	r2, r0
    284c:	d100      	bne.n	2850 <__aeabi_dmul+0x2c>
    284e:	e149      	b.n	2ae4 <__aeabi_dmul+0x2c0>
    2850:	4653      	mov	r3, sl
    2852:	2b00      	cmp	r3, #0
    2854:	d100      	bne.n	2858 <__aeabi_dmul+0x34>
    2856:	e1e4      	b.n	2c22 <__aeabi_dmul+0x3fe>
    2858:	4650      	mov	r0, sl
    285a:	f000 fe77 	bl	354c <__clzsi2>
    285e:	1e03      	subs	r3, r0, #0
    2860:	2b27      	cmp	r3, #39	; 0x27
    2862:	dd00      	ble.n	2866 <__aeabi_dmul+0x42>
    2864:	e1d8      	b.n	2c18 <__aeabi_dmul+0x3f4>
    2866:	3b08      	subs	r3, #8
    2868:	4651      	mov	r1, sl
    286a:	4099      	lsls	r1, r3
    286c:	2228      	movs	r2, #40	; 0x28
    286e:	4688      	mov	r8, r1
    2870:	1a11      	subs	r1, r2, r0
    2872:	1c32      	adds	r2, r6, #0
    2874:	40ca      	lsrs	r2, r1
    2876:	4641      	mov	r1, r8
    2878:	430a      	orrs	r2, r1
    287a:	4692      	mov	sl, r2
    287c:	409e      	lsls	r6, r3
    287e:	4bd8      	ldr	r3, [pc, #864]	; (2be0 <__aeabi_dmul+0x3bc>)
    2880:	2200      	movs	r2, #0
    2882:	1a18      	subs	r0, r3, r0
    2884:	2100      	movs	r1, #0
    2886:	4680      	mov	r8, r0
    2888:	4691      	mov	r9, r2
    288a:	9103      	str	r1, [sp, #12]
    288c:	e011      	b.n	28b2 <__aeabi_dmul+0x8e>
    288e:	48d5      	ldr	r0, [pc, #852]	; (2be4 <__aeabi_dmul+0x3c0>)
    2890:	4283      	cmp	r3, r0
    2892:	d03e      	beq.n	2912 <__aeabi_dmul+0xee>
    2894:	2180      	movs	r1, #128	; 0x80
    2896:	4653      	mov	r3, sl
    2898:	034a      	lsls	r2, r1, #13
    289a:	431a      	orrs	r2, r3
    289c:	00d0      	lsls	r0, r2, #3
    289e:	0f71      	lsrs	r1, r6, #29
    28a0:	4308      	orrs	r0, r1
    28a2:	4ad1      	ldr	r2, [pc, #836]	; (2be8 <__aeabi_dmul+0x3c4>)
    28a4:	4682      	mov	sl, r0
    28a6:	2300      	movs	r3, #0
    28a8:	2000      	movs	r0, #0
    28aa:	00f6      	lsls	r6, r6, #3
    28ac:	4490      	add	r8, r2
    28ae:	4699      	mov	r9, r3
    28b0:	9003      	str	r0, [sp, #12]
    28b2:	1c29      	adds	r1, r5, #0
    28b4:	1c20      	adds	r0, r4, #0
    28b6:	1c25      	adds	r5, r4, #0
    28b8:	004a      	lsls	r2, r1, #1
    28ba:	030c      	lsls	r4, r1, #12
    28bc:	0fcb      	lsrs	r3, r1, #31
    28be:	0b24      	lsrs	r4, r4, #12
    28c0:	0d52      	lsrs	r2, r2, #21
    28c2:	469b      	mov	fp, r3
    28c4:	d131      	bne.n	292a <__aeabi_dmul+0x106>
    28c6:	1c21      	adds	r1, r4, #0
    28c8:	4301      	orrs	r1, r0
    28ca:	d100      	bne.n	28ce <__aeabi_dmul+0xaa>
    28cc:	e112      	b.n	2af4 <__aeabi_dmul+0x2d0>
    28ce:	2c00      	cmp	r4, #0
    28d0:	d100      	bne.n	28d4 <__aeabi_dmul+0xb0>
    28d2:	e19d      	b.n	2c10 <__aeabi_dmul+0x3ec>
    28d4:	1c20      	adds	r0, r4, #0
    28d6:	f000 fe39 	bl	354c <__clzsi2>
    28da:	2827      	cmp	r0, #39	; 0x27
    28dc:	dd00      	ble.n	28e0 <__aeabi_dmul+0xbc>
    28de:	e191      	b.n	2c04 <__aeabi_dmul+0x3e0>
    28e0:	1c03      	adds	r3, r0, #0
    28e2:	2228      	movs	r2, #40	; 0x28
    28e4:	3b08      	subs	r3, #8
    28e6:	1c29      	adds	r1, r5, #0
    28e8:	1a12      	subs	r2, r2, r0
    28ea:	409c      	lsls	r4, r3
    28ec:	40d1      	lsrs	r1, r2
    28ee:	430c      	orrs	r4, r1
    28f0:	409d      	lsls	r5, r3
    28f2:	4bbb      	ldr	r3, [pc, #748]	; (2be0 <__aeabi_dmul+0x3bc>)
    28f4:	4659      	mov	r1, fp
    28f6:	1a1a      	subs	r2, r3, r0
    28f8:	4079      	eors	r1, r7
    28fa:	2000      	movs	r0, #0
    28fc:	464b      	mov	r3, r9
    28fe:	9101      	str	r1, [sp, #4]
    2900:	4303      	orrs	r3, r0
    2902:	2b0f      	cmp	r3, #15
    2904:	d826      	bhi.n	2954 <__aeabi_dmul+0x130>
    2906:	0099      	lsls	r1, r3, #2
    2908:	4bb8      	ldr	r3, [pc, #736]	; (2bec <__aeabi_dmul+0x3c8>)
    290a:	468c      	mov	ip, r1
    290c:	4463      	add	r3, ip
    290e:	6819      	ldr	r1, [r3, #0]
    2910:	468f      	mov	pc, r1
    2912:	1c11      	adds	r1, r2, #0
    2914:	4331      	orrs	r1, r6
    2916:	d000      	beq.n	291a <__aeabi_dmul+0xf6>
    2918:	e0df      	b.n	2ada <__aeabi_dmul+0x2b6>
    291a:	2608      	movs	r6, #8
    291c:	2000      	movs	r0, #0
    291e:	2102      	movs	r1, #2
    2920:	46b1      	mov	r9, r6
    2922:	4682      	mov	sl, r0
    2924:	2600      	movs	r6, #0
    2926:	9103      	str	r1, [sp, #12]
    2928:	e7c3      	b.n	28b2 <__aeabi_dmul+0x8e>
    292a:	48ae      	ldr	r0, [pc, #696]	; (2be4 <__aeabi_dmul+0x3c0>)
    292c:	4282      	cmp	r2, r0
    292e:	d100      	bne.n	2932 <__aeabi_dmul+0x10e>
    2930:	e0c9      	b.n	2ac6 <__aeabi_dmul+0x2a2>
    2932:	2180      	movs	r1, #128	; 0x80
    2934:	034b      	lsls	r3, r1, #13
    2936:	431c      	orrs	r4, r3
    2938:	49ab      	ldr	r1, [pc, #684]	; (2be8 <__aeabi_dmul+0x3c4>)
    293a:	0f68      	lsrs	r0, r5, #29
    293c:	00e4      	lsls	r4, r4, #3
    293e:	4304      	orrs	r4, r0
    2940:	00ed      	lsls	r5, r5, #3
    2942:	1852      	adds	r2, r2, r1
    2944:	2000      	movs	r0, #0
    2946:	4659      	mov	r1, fp
    2948:	4079      	eors	r1, r7
    294a:	464b      	mov	r3, r9
    294c:	9101      	str	r1, [sp, #4]
    294e:	4303      	orrs	r3, r0
    2950:	2b0f      	cmp	r3, #15
    2952:	d9d8      	bls.n	2906 <__aeabi_dmul+0xe2>
    2954:	4442      	add	r2, r8
    2956:	0433      	lsls	r3, r6, #16
    2958:	0429      	lsls	r1, r5, #16
    295a:	9204      	str	r2, [sp, #16]
    295c:	0c1a      	lsrs	r2, r3, #16
    295e:	0c0f      	lsrs	r7, r1, #16
    2960:	1c10      	adds	r0, r2, #0
    2962:	4378      	muls	r0, r7
    2964:	0c36      	lsrs	r6, r6, #16
    2966:	1c33      	adds	r3, r6, #0
    2968:	4680      	mov	r8, r0
    296a:	0c2d      	lsrs	r5, r5, #16
    296c:	437b      	muls	r3, r7
    296e:	1c30      	adds	r0, r6, #0
    2970:	4368      	muls	r0, r5
    2972:	1c11      	adds	r1, r2, #0
    2974:	4369      	muls	r1, r5
    2976:	469c      	mov	ip, r3
    2978:	4643      	mov	r3, r8
    297a:	4683      	mov	fp, r0
    297c:	0c18      	lsrs	r0, r3, #16
    297e:	1808      	adds	r0, r1, r0
    2980:	4460      	add	r0, ip
    2982:	4584      	cmp	ip, r0
    2984:	d900      	bls.n	2988 <__aeabi_dmul+0x164>
    2986:	e11f      	b.n	2bc8 <__aeabi_dmul+0x3a4>
    2988:	0c01      	lsrs	r1, r0, #16
    298a:	4643      	mov	r3, r8
    298c:	9103      	str	r1, [sp, #12]
    298e:	0419      	lsls	r1, r3, #16
    2990:	0c0b      	lsrs	r3, r1, #16
    2992:	0400      	lsls	r0, r0, #16
    2994:	18c0      	adds	r0, r0, r3
    2996:	0421      	lsls	r1, r4, #16
    2998:	0c24      	lsrs	r4, r4, #16
    299a:	9005      	str	r0, [sp, #20]
    299c:	1c10      	adds	r0, r2, #0
    299e:	4362      	muls	r2, r4
    29a0:	0c09      	lsrs	r1, r1, #16
    29a2:	9202      	str	r2, [sp, #8]
    29a4:	4348      	muls	r0, r1
    29a6:	1c32      	adds	r2, r6, #0
    29a8:	4366      	muls	r6, r4
    29aa:	434a      	muls	r2, r1
    29ac:	9b02      	ldr	r3, [sp, #8]
    29ae:	46b1      	mov	r9, r6
    29b0:	0c06      	lsrs	r6, r0, #16
    29b2:	4690      	mov	r8, r2
    29b4:	46b4      	mov	ip, r6
    29b6:	1c1a      	adds	r2, r3, #0
    29b8:	4462      	add	r2, ip
    29ba:	4442      	add	r2, r8
    29bc:	4590      	cmp	r8, r2
    29be:	d902      	bls.n	29c6 <__aeabi_dmul+0x1a2>
    29c0:	2680      	movs	r6, #128	; 0x80
    29c2:	0273      	lsls	r3, r6, #9
    29c4:	4499      	add	r9, r3
    29c6:	0c16      	lsrs	r6, r2, #16
    29c8:	46b0      	mov	r8, r6
    29ca:	44c1      	add	r9, r8
    29cc:	0400      	lsls	r0, r0, #16
    29ce:	464b      	mov	r3, r9
    29d0:	0c06      	lsrs	r6, r0, #16
    29d2:	0412      	lsls	r2, r2, #16
    29d4:	9302      	str	r3, [sp, #8]
    29d6:	1993      	adds	r3, r2, r6
    29d8:	4656      	mov	r6, sl
    29da:	0432      	lsls	r2, r6, #16
    29dc:	0c10      	lsrs	r0, r2, #16
    29de:	1c02      	adds	r2, r0, #0
    29e0:	436a      	muls	r2, r5
    29e2:	469c      	mov	ip, r3
    29e4:	1c03      	adds	r3, r0, #0
    29e6:	437b      	muls	r3, r7
    29e8:	4691      	mov	r9, r2
    29ea:	0c32      	lsrs	r2, r6, #16
    29ec:	4357      	muls	r7, r2
    29ee:	4698      	mov	r8, r3
    29f0:	0c1b      	lsrs	r3, r3, #16
    29f2:	469a      	mov	sl, r3
    29f4:	44d1      	add	r9, sl
    29f6:	44b9      	add	r9, r7
    29f8:	4355      	muls	r5, r2
    29fa:	454f      	cmp	r7, r9
    29fc:	d902      	bls.n	2a04 <__aeabi_dmul+0x1e0>
    29fe:	2780      	movs	r7, #128	; 0x80
    2a00:	027e      	lsls	r6, r7, #9
    2a02:	19ad      	adds	r5, r5, r6
    2a04:	464b      	mov	r3, r9
    2a06:	0c1f      	lsrs	r7, r3, #16
    2a08:	4646      	mov	r6, r8
    2a0a:	19ed      	adds	r5, r5, r7
    2a0c:	041f      	lsls	r7, r3, #16
    2a0e:	0433      	lsls	r3, r6, #16
    2a10:	0c1e      	lsrs	r6, r3, #16
    2a12:	1c03      	adds	r3, r0, #0
    2a14:	434b      	muls	r3, r1
    2a16:	4360      	muls	r0, r4
    2a18:	4351      	muls	r1, r2
    2a1a:	4354      	muls	r4, r2
    2a1c:	0c1a      	lsrs	r2, r3, #16
    2a1e:	1880      	adds	r0, r0, r2
    2a20:	46b0      	mov	r8, r6
    2a22:	1840      	adds	r0, r0, r1
    2a24:	4447      	add	r7, r8
    2a26:	469a      	mov	sl, r3
    2a28:	4281      	cmp	r1, r0
    2a2a:	d902      	bls.n	2a32 <__aeabi_dmul+0x20e>
    2a2c:	2180      	movs	r1, #128	; 0x80
    2a2e:	024e      	lsls	r6, r1, #9
    2a30:	19a4      	adds	r4, r4, r6
    2a32:	9b03      	ldr	r3, [sp, #12]
    2a34:	1c1a      	adds	r2, r3, #0
    2a36:	4462      	add	r2, ip
    2a38:	445a      	add	r2, fp
    2a3a:	4562      	cmp	r2, ip
    2a3c:	4189      	sbcs	r1, r1
    2a3e:	424e      	negs	r6, r1
    2a40:	4651      	mov	r1, sl
    2a42:	46b3      	mov	fp, r6
    2a44:	0403      	lsls	r3, r0, #16
    2a46:	040e      	lsls	r6, r1, #16
    2a48:	469c      	mov	ip, r3
    2a4a:	9902      	ldr	r1, [sp, #8]
    2a4c:	0c33      	lsrs	r3, r6, #16
    2a4e:	4463      	add	r3, ip
    2a50:	18ce      	adds	r6, r1, r3
    2a52:	46b0      	mov	r8, r6
    2a54:	46c2      	mov	sl, r8
    2a56:	44da      	add	sl, fp
    2a58:	19d2      	adds	r2, r2, r7
    2a5a:	42ba      	cmp	r2, r7
    2a5c:	41bf      	sbcs	r7, r7
    2a5e:	4651      	mov	r1, sl
    2a60:	427b      	negs	r3, r7
    2a62:	186f      	adds	r7, r5, r1
    2a64:	18f9      	adds	r1, r7, r3
    2a66:	4699      	mov	r9, r3
    2a68:	45da      	cmp	sl, fp
    2a6a:	419b      	sbcs	r3, r3
    2a6c:	425e      	negs	r6, r3
    2a6e:	9b02      	ldr	r3, [sp, #8]
    2a70:	46b3      	mov	fp, r6
    2a72:	4598      	cmp	r8, r3
    2a74:	41b6      	sbcs	r6, r6
    2a76:	4276      	negs	r6, r6
    2a78:	465b      	mov	r3, fp
    2a7a:	431e      	orrs	r6, r3
    2a7c:	0c00      	lsrs	r0, r0, #16
    2a7e:	4549      	cmp	r1, r9
    2a80:	419b      	sbcs	r3, r3
    2a82:	42af      	cmp	r7, r5
    2a84:	41ad      	sbcs	r5, r5
    2a86:	1836      	adds	r6, r6, r0
    2a88:	426f      	negs	r7, r5
    2a8a:	4258      	negs	r0, r3
    2a8c:	4338      	orrs	r0, r7
    2a8e:	1836      	adds	r6, r6, r0
    2a90:	9805      	ldr	r0, [sp, #20]
    2a92:	1934      	adds	r4, r6, r4
    2a94:	0256      	lsls	r6, r2, #9
    2a96:	4306      	orrs	r6, r0
    2a98:	0dcb      	lsrs	r3, r1, #23
    2a9a:	0264      	lsls	r4, r4, #9
    2a9c:	1e70      	subs	r0, r6, #1
    2a9e:	4186      	sbcs	r6, r0
    2aa0:	0dd2      	lsrs	r2, r2, #23
    2aa2:	4316      	orrs	r6, r2
    2aa4:	0249      	lsls	r1, r1, #9
    2aa6:	431c      	orrs	r4, r3
    2aa8:	430e      	orrs	r6, r1
    2aaa:	01e0      	lsls	r0, r4, #7
    2aac:	d52f      	bpl.n	2b0e <__aeabi_dmul+0x2ea>
    2aae:	2701      	movs	r7, #1
    2ab0:	9d04      	ldr	r5, [sp, #16]
    2ab2:	4037      	ands	r7, r6
    2ab4:	0873      	lsrs	r3, r6, #1
    2ab6:	1c3e      	adds	r6, r7, #0
    2ab8:	07e0      	lsls	r0, r4, #31
    2aba:	3501      	adds	r5, #1
    2abc:	431e      	orrs	r6, r3
    2abe:	9504      	str	r5, [sp, #16]
    2ac0:	4306      	orrs	r6, r0
    2ac2:	0864      	lsrs	r4, r4, #1
    2ac4:	e023      	b.n	2b0e <__aeabi_dmul+0x2ea>
    2ac6:	1c23      	adds	r3, r4, #0
    2ac8:	432b      	orrs	r3, r5
    2aca:	2003      	movs	r0, #3
    2acc:	2b00      	cmp	r3, #0
    2ace:	d000      	beq.n	2ad2 <__aeabi_dmul+0x2ae>
    2ad0:	e739      	b.n	2946 <__aeabi_dmul+0x122>
    2ad2:	2400      	movs	r4, #0
    2ad4:	2500      	movs	r5, #0
    2ad6:	2002      	movs	r0, #2
    2ad8:	e735      	b.n	2946 <__aeabi_dmul+0x122>
    2ada:	220c      	movs	r2, #12
    2adc:	2303      	movs	r3, #3
    2ade:	4691      	mov	r9, r2
    2ae0:	9303      	str	r3, [sp, #12]
    2ae2:	e6e6      	b.n	28b2 <__aeabi_dmul+0x8e>
    2ae4:	2604      	movs	r6, #4
    2ae6:	2300      	movs	r3, #0
    2ae8:	2001      	movs	r0, #1
    2aea:	46b1      	mov	r9, r6
    2aec:	469a      	mov	sl, r3
    2aee:	2600      	movs	r6, #0
    2af0:	9003      	str	r0, [sp, #12]
    2af2:	e6de      	b.n	28b2 <__aeabi_dmul+0x8e>
    2af4:	2400      	movs	r4, #0
    2af6:	2500      	movs	r5, #0
    2af8:	2001      	movs	r0, #1
    2afa:	e724      	b.n	2946 <__aeabi_dmul+0x122>
    2afc:	9803      	ldr	r0, [sp, #12]
    2afe:	4654      	mov	r4, sl
    2b00:	2802      	cmp	r0, #2
    2b02:	d044      	beq.n	2b8e <__aeabi_dmul+0x36a>
    2b04:	2803      	cmp	r0, #3
    2b06:	d100      	bne.n	2b0a <__aeabi_dmul+0x2e6>
    2b08:	e0ea      	b.n	2ce0 <__aeabi_dmul+0x4bc>
    2b0a:	2801      	cmp	r0, #1
    2b0c:	d060      	beq.n	2bd0 <__aeabi_dmul+0x3ac>
    2b0e:	9a04      	ldr	r2, [sp, #16]
    2b10:	4937      	ldr	r1, [pc, #220]	; (2bf0 <__aeabi_dmul+0x3cc>)
    2b12:	1850      	adds	r0, r2, r1
    2b14:	2800      	cmp	r0, #0
    2b16:	dc00      	bgt.n	2b1a <__aeabi_dmul+0x2f6>
    2b18:	e095      	b.n	2c46 <__aeabi_dmul+0x422>
    2b1a:	270f      	movs	r7, #15
    2b1c:	4037      	ands	r7, r6
    2b1e:	2f04      	cmp	r7, #4
    2b20:	d005      	beq.n	2b2e <__aeabi_dmul+0x30a>
    2b22:	1d31      	adds	r1, r6, #4
    2b24:	42b1      	cmp	r1, r6
    2b26:	41b6      	sbcs	r6, r6
    2b28:	4275      	negs	r5, r6
    2b2a:	1964      	adds	r4, r4, r5
    2b2c:	1c0e      	adds	r6, r1, #0
    2b2e:	01e1      	lsls	r1, r4, #7
    2b30:	d505      	bpl.n	2b3e <__aeabi_dmul+0x31a>
    2b32:	4830      	ldr	r0, [pc, #192]	; (2bf4 <__aeabi_dmul+0x3d0>)
    2b34:	9a04      	ldr	r2, [sp, #16]
    2b36:	2380      	movs	r3, #128	; 0x80
    2b38:	00df      	lsls	r7, r3, #3
    2b3a:	4004      	ands	r4, r0
    2b3c:	19d0      	adds	r0, r2, r7
    2b3e:	492e      	ldr	r1, [pc, #184]	; (2bf8 <__aeabi_dmul+0x3d4>)
    2b40:	4288      	cmp	r0, r1
    2b42:	dc24      	bgt.n	2b8e <__aeabi_dmul+0x36a>
    2b44:	9b01      	ldr	r3, [sp, #4]
    2b46:	0765      	lsls	r5, r4, #29
    2b48:	08f6      	lsrs	r6, r6, #3
    2b4a:	0264      	lsls	r4, r4, #9
    2b4c:	0542      	lsls	r2, r0, #21
    2b4e:	2701      	movs	r7, #1
    2b50:	432e      	orrs	r6, r5
    2b52:	0b24      	lsrs	r4, r4, #12
    2b54:	0d52      	lsrs	r2, r2, #21
    2b56:	401f      	ands	r7, r3
    2b58:	2000      	movs	r0, #0
    2b5a:	2100      	movs	r1, #0
    2b5c:	0d09      	lsrs	r1, r1, #20
    2b5e:	050d      	lsls	r5, r1, #20
    2b60:	4325      	orrs	r5, r4
    2b62:	4c26      	ldr	r4, [pc, #152]	; (2bfc <__aeabi_dmul+0x3d8>)
    2b64:	0512      	lsls	r2, r2, #20
    2b66:	402c      	ands	r4, r5
    2b68:	4314      	orrs	r4, r2
    2b6a:	0063      	lsls	r3, r4, #1
    2b6c:	1c30      	adds	r0, r6, #0
    2b6e:	085e      	lsrs	r6, r3, #1
    2b70:	07ff      	lsls	r7, r7, #31
    2b72:	1c31      	adds	r1, r6, #0
    2b74:	4339      	orrs	r1, r7
    2b76:	b007      	add	sp, #28
    2b78:	bc3c      	pop	{r2, r3, r4, r5}
    2b7a:	4690      	mov	r8, r2
    2b7c:	4699      	mov	r9, r3
    2b7e:	46a2      	mov	sl, r4
    2b80:	46ab      	mov	fp, r5
    2b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b84:	465a      	mov	r2, fp
    2b86:	1c2e      	adds	r6, r5, #0
    2b88:	9201      	str	r2, [sp, #4]
    2b8a:	2802      	cmp	r0, #2
    2b8c:	d1ba      	bne.n	2b04 <__aeabi_dmul+0x2e0>
    2b8e:	9e01      	ldr	r6, [sp, #4]
    2b90:	2701      	movs	r7, #1
    2b92:	4037      	ands	r7, r6
    2b94:	4a13      	ldr	r2, [pc, #76]	; (2be4 <__aeabi_dmul+0x3c0>)
    2b96:	2400      	movs	r4, #0
    2b98:	2600      	movs	r6, #0
    2b9a:	e7dd      	b.n	2b58 <__aeabi_dmul+0x334>
    2b9c:	4654      	mov	r4, sl
    2b9e:	9701      	str	r7, [sp, #4]
    2ba0:	9803      	ldr	r0, [sp, #12]
    2ba2:	e7ad      	b.n	2b00 <__aeabi_dmul+0x2dc>
    2ba4:	2601      	movs	r6, #1
    2ba6:	2700      	movs	r7, #0
    2ba8:	4c15      	ldr	r4, [pc, #84]	; (2c00 <__aeabi_dmul+0x3dc>)
    2baa:	4276      	negs	r6, r6
    2bac:	4a0d      	ldr	r2, [pc, #52]	; (2be4 <__aeabi_dmul+0x3c0>)
    2bae:	e7d3      	b.n	2b58 <__aeabi_dmul+0x334>
    2bb0:	1c2e      	adds	r6, r5, #0
    2bb2:	e7a5      	b.n	2b00 <__aeabi_dmul+0x2dc>
    2bb4:	2280      	movs	r2, #128	; 0x80
    2bb6:	0313      	lsls	r3, r2, #12
    2bb8:	4651      	mov	r1, sl
    2bba:	4219      	tst	r1, r3
    2bbc:	d135      	bne.n	2c2a <__aeabi_dmul+0x406>
    2bbe:	430b      	orrs	r3, r1
    2bc0:	031d      	lsls	r5, r3, #12
    2bc2:	0b2c      	lsrs	r4, r5, #12
    2bc4:	4a07      	ldr	r2, [pc, #28]	; (2be4 <__aeabi_dmul+0x3c0>)
    2bc6:	e7c7      	b.n	2b58 <__aeabi_dmul+0x334>
    2bc8:	2180      	movs	r1, #128	; 0x80
    2bca:	024b      	lsls	r3, r1, #9
    2bcc:	449b      	add	fp, r3
    2bce:	e6db      	b.n	2988 <__aeabi_dmul+0x164>
    2bd0:	9b01      	ldr	r3, [sp, #4]
    2bd2:	2200      	movs	r2, #0
    2bd4:	4018      	ands	r0, r3
    2bd6:	b2c7      	uxtb	r7, r0
    2bd8:	2400      	movs	r4, #0
    2bda:	2600      	movs	r6, #0
    2bdc:	e7bc      	b.n	2b58 <__aeabi_dmul+0x334>
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	fffffc0d 	.word	0xfffffc0d
    2be4:	000007ff 	.word	0x000007ff
    2be8:	fffffc01 	.word	0xfffffc01
    2bec:	00003730 	.word	0x00003730
    2bf0:	000003ff 	.word	0x000003ff
    2bf4:	feffffff 	.word	0xfeffffff
    2bf8:	000007fe 	.word	0x000007fe
    2bfc:	800fffff 	.word	0x800fffff
    2c00:	000fffff 	.word	0x000fffff
    2c04:	1c04      	adds	r4, r0, #0
    2c06:	3c28      	subs	r4, #40	; 0x28
    2c08:	40a5      	lsls	r5, r4
    2c0a:	1c2c      	adds	r4, r5, #0
    2c0c:	2500      	movs	r5, #0
    2c0e:	e670      	b.n	28f2 <__aeabi_dmul+0xce>
    2c10:	f000 fc9c 	bl	354c <__clzsi2>
    2c14:	3020      	adds	r0, #32
    2c16:	e660      	b.n	28da <__aeabi_dmul+0xb6>
    2c18:	3b28      	subs	r3, #40	; 0x28
    2c1a:	409e      	lsls	r6, r3
    2c1c:	46b2      	mov	sl, r6
    2c1e:	2600      	movs	r6, #0
    2c20:	e62d      	b.n	287e <__aeabi_dmul+0x5a>
    2c22:	f000 fc93 	bl	354c <__clzsi2>
    2c26:	3020      	adds	r0, #32
    2c28:	e619      	b.n	285e <__aeabi_dmul+0x3a>
    2c2a:	421c      	tst	r4, r3
    2c2c:	d106      	bne.n	2c3c <__aeabi_dmul+0x418>
    2c2e:	431c      	orrs	r4, r3
    2c30:	0326      	lsls	r6, r4, #12
    2c32:	0b34      	lsrs	r4, r6, #12
    2c34:	465f      	mov	r7, fp
    2c36:	1c2e      	adds	r6, r5, #0
    2c38:	4a2e      	ldr	r2, [pc, #184]	; (2cf4 <__aeabi_dmul+0x4d0>)
    2c3a:	e78d      	b.n	2b58 <__aeabi_dmul+0x334>
    2c3c:	430b      	orrs	r3, r1
    2c3e:	0318      	lsls	r0, r3, #12
    2c40:	0b04      	lsrs	r4, r0, #12
    2c42:	4a2c      	ldr	r2, [pc, #176]	; (2cf4 <__aeabi_dmul+0x4d0>)
    2c44:	e788      	b.n	2b58 <__aeabi_dmul+0x334>
    2c46:	4f2c      	ldr	r7, [pc, #176]	; (2cf8 <__aeabi_dmul+0x4d4>)
    2c48:	9d04      	ldr	r5, [sp, #16]
    2c4a:	1b7b      	subs	r3, r7, r5
    2c4c:	2b38      	cmp	r3, #56	; 0x38
    2c4e:	dd06      	ble.n	2c5e <__aeabi_dmul+0x43a>
    2c50:	9e01      	ldr	r6, [sp, #4]
    2c52:	2701      	movs	r7, #1
    2c54:	4037      	ands	r7, r6
    2c56:	2200      	movs	r2, #0
    2c58:	2400      	movs	r4, #0
    2c5a:	2600      	movs	r6, #0
    2c5c:	e77c      	b.n	2b58 <__aeabi_dmul+0x334>
    2c5e:	2b1f      	cmp	r3, #31
    2c60:	dc21      	bgt.n	2ca6 <__aeabi_dmul+0x482>
    2c62:	9a04      	ldr	r2, [sp, #16]
    2c64:	4f25      	ldr	r7, [pc, #148]	; (2cfc <__aeabi_dmul+0x4d8>)
    2c66:	1c35      	adds	r5, r6, #0
    2c68:	19d1      	adds	r1, r2, r7
    2c6a:	1c20      	adds	r0, r4, #0
    2c6c:	408e      	lsls	r6, r1
    2c6e:	40dd      	lsrs	r5, r3
    2c70:	4088      	lsls	r0, r1
    2c72:	1c32      	adds	r2, r6, #0
    2c74:	4328      	orrs	r0, r5
    2c76:	1e56      	subs	r6, r2, #1
    2c78:	41b2      	sbcs	r2, r6
    2c7a:	1c06      	adds	r6, r0, #0
    2c7c:	4316      	orrs	r6, r2
    2c7e:	40dc      	lsrs	r4, r3
    2c80:	230f      	movs	r3, #15
    2c82:	4033      	ands	r3, r6
    2c84:	2b04      	cmp	r3, #4
    2c86:	d005      	beq.n	2c94 <__aeabi_dmul+0x470>
    2c88:	1d37      	adds	r7, r6, #4
    2c8a:	42b7      	cmp	r7, r6
    2c8c:	41b6      	sbcs	r6, r6
    2c8e:	4271      	negs	r1, r6
    2c90:	1864      	adds	r4, r4, r1
    2c92:	1c3e      	adds	r6, r7, #0
    2c94:	0225      	lsls	r5, r4, #8
    2c96:	d517      	bpl.n	2cc8 <__aeabi_dmul+0x4a4>
    2c98:	9b01      	ldr	r3, [sp, #4]
    2c9a:	2701      	movs	r7, #1
    2c9c:	401f      	ands	r7, r3
    2c9e:	2201      	movs	r2, #1
    2ca0:	2400      	movs	r4, #0
    2ca2:	2600      	movs	r6, #0
    2ca4:	e758      	b.n	2b58 <__aeabi_dmul+0x334>
    2ca6:	4816      	ldr	r0, [pc, #88]	; (2d00 <__aeabi_dmul+0x4dc>)
    2ca8:	9a04      	ldr	r2, [sp, #16]
    2caa:	1c21      	adds	r1, r4, #0
    2cac:	1a87      	subs	r7, r0, r2
    2cae:	40f9      	lsrs	r1, r7
    2cb0:	1c0d      	adds	r5, r1, #0
    2cb2:	2b20      	cmp	r3, #32
    2cb4:	d012      	beq.n	2cdc <__aeabi_dmul+0x4b8>
    2cb6:	4b13      	ldr	r3, [pc, #76]	; (2d04 <__aeabi_dmul+0x4e0>)
    2cb8:	18d0      	adds	r0, r2, r3
    2cba:	4084      	lsls	r4, r0
    2cbc:	4326      	orrs	r6, r4
    2cbe:	1e72      	subs	r2, r6, #1
    2cc0:	4196      	sbcs	r6, r2
    2cc2:	432e      	orrs	r6, r5
    2cc4:	2400      	movs	r4, #0
    2cc6:	e7db      	b.n	2c80 <__aeabi_dmul+0x45c>
    2cc8:	9a01      	ldr	r2, [sp, #4]
    2cca:	0765      	lsls	r5, r4, #29
    2ccc:	08f6      	lsrs	r6, r6, #3
    2cce:	0260      	lsls	r0, r4, #9
    2cd0:	2701      	movs	r7, #1
    2cd2:	4017      	ands	r7, r2
    2cd4:	432e      	orrs	r6, r5
    2cd6:	0b04      	lsrs	r4, r0, #12
    2cd8:	2200      	movs	r2, #0
    2cda:	e73d      	b.n	2b58 <__aeabi_dmul+0x334>
    2cdc:	2400      	movs	r4, #0
    2cde:	e7ed      	b.n	2cbc <__aeabi_dmul+0x498>
    2ce0:	2180      	movs	r1, #128	; 0x80
    2ce2:	030f      	lsls	r7, r1, #12
    2ce4:	433c      	orrs	r4, r7
    2ce6:	9801      	ldr	r0, [sp, #4]
    2ce8:	0324      	lsls	r4, r4, #12
    2cea:	2701      	movs	r7, #1
    2cec:	0b24      	lsrs	r4, r4, #12
    2cee:	4007      	ands	r7, r0
    2cf0:	4a00      	ldr	r2, [pc, #0]	; (2cf4 <__aeabi_dmul+0x4d0>)
    2cf2:	e731      	b.n	2b58 <__aeabi_dmul+0x334>
    2cf4:	000007ff 	.word	0x000007ff
    2cf8:	fffffc02 	.word	0xfffffc02
    2cfc:	0000041e 	.word	0x0000041e
    2d00:	fffffbe2 	.word	0xfffffbe2
    2d04:	0000043e 	.word	0x0000043e

00002d08 <__aeabi_dsub>:
    2d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d0a:	4657      	mov	r7, sl
    2d0c:	464e      	mov	r6, r9
    2d0e:	4645      	mov	r5, r8
    2d10:	b4e0      	push	{r5, r6, r7}
    2d12:	1c07      	adds	r7, r0, #0
    2d14:	030d      	lsls	r5, r1, #12
    2d16:	004e      	lsls	r6, r1, #1
    2d18:	0a68      	lsrs	r0, r5, #9
    2d1a:	0fcc      	lsrs	r4, r1, #31
    2d1c:	0f79      	lsrs	r1, r7, #29
    2d1e:	4308      	orrs	r0, r1
    2d20:	4684      	mov	ip, r0
    2d22:	1c11      	adds	r1, r2, #0
    2d24:	0318      	lsls	r0, r3, #12
    2d26:	005a      	lsls	r2, r3, #1
    2d28:	00fd      	lsls	r5, r7, #3
    2d2a:	0a40      	lsrs	r0, r0, #9
    2d2c:	0fdf      	lsrs	r7, r3, #31
    2d2e:	0f4b      	lsrs	r3, r1, #29
    2d30:	4318      	orrs	r0, r3
    2d32:	4bca      	ldr	r3, [pc, #808]	; (305c <__aeabi_dsub+0x354>)
    2d34:	00c9      	lsls	r1, r1, #3
    2d36:	0d76      	lsrs	r6, r6, #21
    2d38:	0d52      	lsrs	r2, r2, #21
    2d3a:	468a      	mov	sl, r1
    2d3c:	429a      	cmp	r2, r3
    2d3e:	d100      	bne.n	2d42 <__aeabi_dsub+0x3a>
    2d40:	e0e0      	b.n	2f04 <__aeabi_dsub+0x1fc>
    2d42:	2301      	movs	r3, #1
    2d44:	405f      	eors	r7, r3
    2d46:	46b9      	mov	r9, r7
    2d48:	42bc      	cmp	r4, r7
    2d4a:	d100      	bne.n	2d4e <__aeabi_dsub+0x46>
    2d4c:	e0a8      	b.n	2ea0 <__aeabi_dsub+0x198>
    2d4e:	1ab7      	subs	r7, r6, r2
    2d50:	2f00      	cmp	r7, #0
    2d52:	dc00      	bgt.n	2d56 <__aeabi_dsub+0x4e>
    2d54:	e110      	b.n	2f78 <__aeabi_dsub+0x270>
    2d56:	2a00      	cmp	r2, #0
    2d58:	d112      	bne.n	2d80 <__aeabi_dsub+0x78>
    2d5a:	4652      	mov	r2, sl
    2d5c:	4302      	orrs	r2, r0
    2d5e:	d100      	bne.n	2d62 <__aeabi_dsub+0x5a>
    2d60:	e0d4      	b.n	2f0c <__aeabi_dsub+0x204>
    2d62:	3f01      	subs	r7, #1
    2d64:	2f00      	cmp	r7, #0
    2d66:	d000      	beq.n	2d6a <__aeabi_dsub+0x62>
    2d68:	e160      	b.n	302c <__aeabi_dsub+0x324>
    2d6a:	4651      	mov	r1, sl
    2d6c:	1a6f      	subs	r7, r5, r1
    2d6e:	42bd      	cmp	r5, r7
    2d70:	41ad      	sbcs	r5, r5
    2d72:	4662      	mov	r2, ip
    2d74:	426b      	negs	r3, r5
    2d76:	1a10      	subs	r0, r2, r0
    2d78:	1c3d      	adds	r5, r7, #0
    2d7a:	1ac3      	subs	r3, r0, r3
    2d7c:	1c37      	adds	r7, r6, #0
    2d7e:	e024      	b.n	2dca <__aeabi_dsub+0xc2>
    2d80:	4ab6      	ldr	r2, [pc, #728]	; (305c <__aeabi_dsub+0x354>)
    2d82:	4296      	cmp	r6, r2
    2d84:	d100      	bne.n	2d88 <__aeabi_dsub+0x80>
    2d86:	e0e3      	b.n	2f50 <__aeabi_dsub+0x248>
    2d88:	2180      	movs	r1, #128	; 0x80
    2d8a:	040b      	lsls	r3, r1, #16
    2d8c:	4318      	orrs	r0, r3
    2d8e:	2f38      	cmp	r7, #56	; 0x38
    2d90:	dd00      	ble.n	2d94 <__aeabi_dsub+0x8c>
    2d92:	e123      	b.n	2fdc <__aeabi_dsub+0x2d4>
    2d94:	2f1f      	cmp	r7, #31
    2d96:	dd00      	ble.n	2d9a <__aeabi_dsub+0x92>
    2d98:	e166      	b.n	3068 <__aeabi_dsub+0x360>
    2d9a:	2120      	movs	r1, #32
    2d9c:	1bc9      	subs	r1, r1, r7
    2d9e:	1c02      	adds	r2, r0, #0
    2da0:	4653      	mov	r3, sl
    2da2:	408a      	lsls	r2, r1
    2da4:	40fb      	lsrs	r3, r7
    2da6:	431a      	orrs	r2, r3
    2da8:	4653      	mov	r3, sl
    2daa:	408b      	lsls	r3, r1
    2dac:	1c19      	adds	r1, r3, #0
    2dae:	1e4b      	subs	r3, r1, #1
    2db0:	4199      	sbcs	r1, r3
    2db2:	1c03      	adds	r3, r0, #0
    2db4:	430a      	orrs	r2, r1
    2db6:	40fb      	lsrs	r3, r7
    2db8:	1aaa      	subs	r2, r5, r2
    2dba:	4667      	mov	r7, ip
    2dbc:	4295      	cmp	r5, r2
    2dbe:	41ad      	sbcs	r5, r5
    2dc0:	1af8      	subs	r0, r7, r3
    2dc2:	426b      	negs	r3, r5
    2dc4:	1ac3      	subs	r3, r0, r3
    2dc6:	1c15      	adds	r5, r2, #0
    2dc8:	1c37      	adds	r7, r6, #0
    2dca:	021a      	lsls	r2, r3, #8
    2dcc:	d400      	bmi.n	2dd0 <__aeabi_dsub+0xc8>
    2dce:	e0c7      	b.n	2f60 <__aeabi_dsub+0x258>
    2dd0:	025e      	lsls	r6, r3, #9
    2dd2:	0a71      	lsrs	r1, r6, #9
    2dd4:	4688      	mov	r8, r1
    2dd6:	4642      	mov	r2, r8
    2dd8:	2a00      	cmp	r2, #0
    2dda:	d100      	bne.n	2dde <__aeabi_dsub+0xd6>
    2ddc:	e0f0      	b.n	2fc0 <__aeabi_dsub+0x2b8>
    2dde:	4640      	mov	r0, r8
    2de0:	f000 fbb4 	bl	354c <__clzsi2>
    2de4:	1c02      	adds	r2, r0, #0
    2de6:	3a08      	subs	r2, #8
    2de8:	2a1f      	cmp	r2, #31
    2dea:	dd00      	ble.n	2dee <__aeabi_dsub+0xe6>
    2dec:	e0f1      	b.n	2fd2 <__aeabi_dsub+0x2ca>
    2dee:	2328      	movs	r3, #40	; 0x28
    2df0:	1a18      	subs	r0, r3, r0
    2df2:	1c2e      	adds	r6, r5, #0
    2df4:	4641      	mov	r1, r8
    2df6:	40c6      	lsrs	r6, r0
    2df8:	4091      	lsls	r1, r2
    2dfa:	1c33      	adds	r3, r6, #0
    2dfc:	430b      	orrs	r3, r1
    2dfe:	4095      	lsls	r5, r2
    2e00:	4297      	cmp	r7, r2
    2e02:	dd00      	ble.n	2e06 <__aeabi_dsub+0xfe>
    2e04:	e0a9      	b.n	2f5a <__aeabi_dsub+0x252>
    2e06:	1bd0      	subs	r0, r2, r7
    2e08:	1c41      	adds	r1, r0, #1
    2e0a:	291f      	cmp	r1, #31
    2e0c:	dd00      	ble.n	2e10 <__aeabi_dsub+0x108>
    2e0e:	e112      	b.n	3036 <__aeabi_dsub+0x32e>
    2e10:	271f      	movs	r7, #31
    2e12:	1a3a      	subs	r2, r7, r0
    2e14:	1c2e      	adds	r6, r5, #0
    2e16:	1c18      	adds	r0, r3, #0
    2e18:	40ce      	lsrs	r6, r1
    2e1a:	4090      	lsls	r0, r2
    2e1c:	4095      	lsls	r5, r2
    2e1e:	4330      	orrs	r0, r6
    2e20:	1e6a      	subs	r2, r5, #1
    2e22:	4195      	sbcs	r5, r2
    2e24:	40cb      	lsrs	r3, r1
    2e26:	4305      	orrs	r5, r0
    2e28:	2101      	movs	r1, #1
    2e2a:	2700      	movs	r7, #0
    2e2c:	260f      	movs	r6, #15
    2e2e:	402e      	ands	r6, r5
    2e30:	2e04      	cmp	r6, #4
    2e32:	d100      	bne.n	2e36 <__aeabi_dsub+0x12e>
    2e34:	e072      	b.n	2f1c <__aeabi_dsub+0x214>
    2e36:	1d2e      	adds	r6, r5, #4
    2e38:	42ae      	cmp	r6, r5
    2e3a:	41ad      	sbcs	r5, r5
    2e3c:	4268      	negs	r0, r5
    2e3e:	2280      	movs	r2, #128	; 0x80
    2e40:	181b      	adds	r3, r3, r0
    2e42:	2501      	movs	r5, #1
    2e44:	0410      	lsls	r0, r2, #16
    2e46:	4018      	ands	r0, r3
    2e48:	402c      	ands	r4, r5
    2e4a:	2800      	cmp	r0, #0
    2e4c:	d007      	beq.n	2e5e <__aeabi_dsub+0x156>
    2e4e:	4f83      	ldr	r7, [pc, #524]	; (305c <__aeabi_dsub+0x354>)
    2e50:	42b9      	cmp	r1, r7
    2e52:	d100      	bne.n	2e56 <__aeabi_dsub+0x14e>
    2e54:	e0b0      	b.n	2fb8 <__aeabi_dsub+0x2b0>
    2e56:	4a82      	ldr	r2, [pc, #520]	; (3060 <__aeabi_dsub+0x358>)
    2e58:	1c0f      	adds	r7, r1, #0
    2e5a:	4013      	ands	r3, r2
    2e5c:	3101      	adds	r1, #1
    2e5e:	08f2      	lsrs	r2, r6, #3
    2e60:	0549      	lsls	r1, r1, #21
    2e62:	075e      	lsls	r6, r3, #29
    2e64:	4332      	orrs	r2, r6
    2e66:	08db      	lsrs	r3, r3, #3
    2e68:	0d48      	lsrs	r0, r1, #21
    2e6a:	2801      	cmp	r0, #1
    2e6c:	dc00      	bgt.n	2e70 <__aeabi_dsub+0x168>
    2e6e:	e079      	b.n	2f64 <__aeabi_dsub+0x25c>
    2e70:	031b      	lsls	r3, r3, #12
    2e72:	0578      	lsls	r0, r7, #21
    2e74:	0b1e      	lsrs	r6, r3, #12
    2e76:	0d47      	lsrs	r7, r0, #21
    2e78:	2000      	movs	r0, #0
    2e7a:	2100      	movs	r1, #0
    2e7c:	0d09      	lsrs	r1, r1, #20
    2e7e:	057d      	lsls	r5, r7, #21
    2e80:	050b      	lsls	r3, r1, #20
    2e82:	4f78      	ldr	r7, [pc, #480]	; (3064 <__aeabi_dsub+0x35c>)
    2e84:	431e      	orrs	r6, r3
    2e86:	1c10      	adds	r0, r2, #0
    2e88:	4037      	ands	r7, r6
    2e8a:	086a      	lsrs	r2, r5, #1
    2e8c:	4317      	orrs	r7, r2
    2e8e:	007e      	lsls	r6, r7, #1
    2e90:	0871      	lsrs	r1, r6, #1
    2e92:	07e4      	lsls	r4, r4, #31
    2e94:	4321      	orrs	r1, r4
    2e96:	bc1c      	pop	{r2, r3, r4}
    2e98:	4690      	mov	r8, r2
    2e9a:	4699      	mov	r9, r3
    2e9c:	46a2      	mov	sl, r4
    2e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ea0:	1ab3      	subs	r3, r6, r2
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	dc00      	bgt.n	2ea8 <__aeabi_dsub+0x1a0>
    2ea6:	e0a6      	b.n	2ff6 <__aeabi_dsub+0x2ee>
    2ea8:	2a00      	cmp	r2, #0
    2eaa:	d03e      	beq.n	2f2a <__aeabi_dsub+0x222>
    2eac:	4a6b      	ldr	r2, [pc, #428]	; (305c <__aeabi_dsub+0x354>)
    2eae:	4296      	cmp	r6, r2
    2eb0:	d04e      	beq.n	2f50 <__aeabi_dsub+0x248>
    2eb2:	2180      	movs	r1, #128	; 0x80
    2eb4:	040f      	lsls	r7, r1, #16
    2eb6:	4338      	orrs	r0, r7
    2eb8:	2b38      	cmp	r3, #56	; 0x38
    2eba:	dc00      	bgt.n	2ebe <__aeabi_dsub+0x1b6>
    2ebc:	e118      	b.n	30f0 <__aeabi_dsub+0x3e8>
    2ebe:	4653      	mov	r3, sl
    2ec0:	4318      	orrs	r0, r3
    2ec2:	2700      	movs	r7, #0
    2ec4:	2200      	movs	r2, #0
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d000      	beq.n	2ecc <__aeabi_dsub+0x1c4>
    2eca:	2201      	movs	r2, #1
    2ecc:	1952      	adds	r2, r2, r5
    2ece:	42aa      	cmp	r2, r5
    2ed0:	41ad      	sbcs	r5, r5
    2ed2:	4467      	add	r7, ip
    2ed4:	426b      	negs	r3, r5
    2ed6:	18fb      	adds	r3, r7, r3
    2ed8:	1c15      	adds	r5, r2, #0
    2eda:	1c37      	adds	r7, r6, #0
    2edc:	021e      	lsls	r6, r3, #8
    2ede:	d53f      	bpl.n	2f60 <__aeabi_dsub+0x258>
    2ee0:	485e      	ldr	r0, [pc, #376]	; (305c <__aeabi_dsub+0x354>)
    2ee2:	1c7e      	adds	r6, r7, #1
    2ee4:	4286      	cmp	r6, r0
    2ee6:	d100      	bne.n	2eea <__aeabi_dsub+0x1e2>
    2ee8:	e17b      	b.n	31e2 <__aeabi_dsub+0x4da>
    2eea:	495d      	ldr	r1, [pc, #372]	; (3060 <__aeabi_dsub+0x358>)
    2eec:	2201      	movs	r2, #1
    2eee:	402a      	ands	r2, r5
    2ef0:	400b      	ands	r3, r1
    2ef2:	0868      	lsrs	r0, r5, #1
    2ef4:	1c15      	adds	r5, r2, #0
    2ef6:	07d9      	lsls	r1, r3, #31
    2ef8:	4305      	orrs	r5, r0
    2efa:	430d      	orrs	r5, r1
    2efc:	085b      	lsrs	r3, r3, #1
    2efe:	1cb9      	adds	r1, r7, #2
    2f00:	1c37      	adds	r7, r6, #0
    2f02:	e793      	b.n	2e2c <__aeabi_dsub+0x124>
    2f04:	4301      	orrs	r1, r0
    2f06:	d100      	bne.n	2f0a <__aeabi_dsub+0x202>
    2f08:	e71b      	b.n	2d42 <__aeabi_dsub+0x3a>
    2f0a:	e71c      	b.n	2d46 <__aeabi_dsub+0x3e>
    2f0c:	1c71      	adds	r1, r6, #1
    2f0e:	1c37      	adds	r7, r6, #0
    2f10:	260f      	movs	r6, #15
    2f12:	4663      	mov	r3, ip
    2f14:	402e      	ands	r6, r5
    2f16:	2e04      	cmp	r6, #4
    2f18:	d000      	beq.n	2f1c <__aeabi_dsub+0x214>
    2f1a:	e78c      	b.n	2e36 <__aeabi_dsub+0x12e>
    2f1c:	2280      	movs	r2, #128	; 0x80
    2f1e:	2601      	movs	r6, #1
    2f20:	0410      	lsls	r0, r2, #16
    2f22:	4034      	ands	r4, r6
    2f24:	4018      	ands	r0, r3
    2f26:	1c2e      	adds	r6, r5, #0
    2f28:	e78f      	b.n	2e4a <__aeabi_dsub+0x142>
    2f2a:	4652      	mov	r2, sl
    2f2c:	4302      	orrs	r2, r0
    2f2e:	d0ed      	beq.n	2f0c <__aeabi_dsub+0x204>
    2f30:	3b01      	subs	r3, #1
    2f32:	2b00      	cmp	r3, #0
    2f34:	d109      	bne.n	2f4a <__aeabi_dsub+0x242>
    2f36:	4657      	mov	r7, sl
    2f38:	1979      	adds	r1, r7, r5
    2f3a:	42a9      	cmp	r1, r5
    2f3c:	4192      	sbcs	r2, r2
    2f3e:	4255      	negs	r5, r2
    2f40:	4460      	add	r0, ip
    2f42:	1943      	adds	r3, r0, r5
    2f44:	1c37      	adds	r7, r6, #0
    2f46:	1c0d      	adds	r5, r1, #0
    2f48:	e7c8      	b.n	2edc <__aeabi_dsub+0x1d4>
    2f4a:	4944      	ldr	r1, [pc, #272]	; (305c <__aeabi_dsub+0x354>)
    2f4c:	428e      	cmp	r6, r1
    2f4e:	d1b3      	bne.n	2eb8 <__aeabi_dsub+0x1b0>
    2f50:	2080      	movs	r0, #128	; 0x80
    2f52:	4663      	mov	r3, ip
    2f54:	0101      	lsls	r1, r0, #4
    2f56:	1c37      	adds	r7, r6, #0
    2f58:	e768      	b.n	2e2c <__aeabi_dsub+0x124>
    2f5a:	1abf      	subs	r7, r7, r2
    2f5c:	4a40      	ldr	r2, [pc, #256]	; (3060 <__aeabi_dsub+0x358>)
    2f5e:	4013      	ands	r3, r2
    2f60:	1c79      	adds	r1, r7, #1
    2f62:	e763      	b.n	2e2c <__aeabi_dsub+0x124>
    2f64:	1c15      	adds	r5, r2, #0
    2f66:	431d      	orrs	r5, r3
    2f68:	d100      	bne.n	2f6c <__aeabi_dsub+0x264>
    2f6a:	e221      	b.n	33b0 <__aeabi_dsub+0x6a8>
    2f6c:	2f00      	cmp	r7, #0
    2f6e:	d03e      	beq.n	2fee <__aeabi_dsub+0x2e6>
    2f70:	2680      	movs	r6, #128	; 0x80
    2f72:	0331      	lsls	r1, r6, #12
    2f74:	430b      	orrs	r3, r1
    2f76:	e77b      	b.n	2e70 <__aeabi_dsub+0x168>
    2f78:	2f00      	cmp	r7, #0
    2f7a:	d000      	beq.n	2f7e <__aeabi_dsub+0x276>
    2f7c:	e086      	b.n	308c <__aeabi_dsub+0x384>
    2f7e:	1c72      	adds	r2, r6, #1
    2f80:	0551      	lsls	r1, r2, #21
    2f82:	0d4b      	lsrs	r3, r1, #21
    2f84:	2b01      	cmp	r3, #1
    2f86:	dc00      	bgt.n	2f8a <__aeabi_dsub+0x282>
    2f88:	e0f0      	b.n	316c <__aeabi_dsub+0x464>
    2f8a:	4657      	mov	r7, sl
    2f8c:	1bea      	subs	r2, r5, r7
    2f8e:	4295      	cmp	r5, r2
    2f90:	419b      	sbcs	r3, r3
    2f92:	4667      	mov	r7, ip
    2f94:	1a39      	subs	r1, r7, r0
    2f96:	425b      	negs	r3, r3
    2f98:	1ac9      	subs	r1, r1, r3
    2f9a:	4688      	mov	r8, r1
    2f9c:	020b      	lsls	r3, r1, #8
    2f9e:	d400      	bmi.n	2fa2 <__aeabi_dsub+0x29a>
    2fa0:	e09d      	b.n	30de <__aeabi_dsub+0x3d6>
    2fa2:	4654      	mov	r4, sl
    2fa4:	1b65      	subs	r5, r4, r5
    2fa6:	45aa      	cmp	sl, r5
    2fa8:	4192      	sbcs	r2, r2
    2faa:	1bc0      	subs	r0, r0, r7
    2fac:	4257      	negs	r7, r2
    2fae:	1bc3      	subs	r3, r0, r7
    2fb0:	4698      	mov	r8, r3
    2fb2:	1c37      	adds	r7, r6, #0
    2fb4:	464c      	mov	r4, r9
    2fb6:	e70e      	b.n	2dd6 <__aeabi_dsub+0xce>
    2fb8:	1c0f      	adds	r7, r1, #0
    2fba:	2600      	movs	r6, #0
    2fbc:	2200      	movs	r2, #0
    2fbe:	e75b      	b.n	2e78 <__aeabi_dsub+0x170>
    2fc0:	1c28      	adds	r0, r5, #0
    2fc2:	f000 fac3 	bl	354c <__clzsi2>
    2fc6:	3020      	adds	r0, #32
    2fc8:	1c02      	adds	r2, r0, #0
    2fca:	3a08      	subs	r2, #8
    2fcc:	2a1f      	cmp	r2, #31
    2fce:	dc00      	bgt.n	2fd2 <__aeabi_dsub+0x2ca>
    2fd0:	e70d      	b.n	2dee <__aeabi_dsub+0xe6>
    2fd2:	3828      	subs	r0, #40	; 0x28
    2fd4:	4085      	lsls	r5, r0
    2fd6:	1c2b      	adds	r3, r5, #0
    2fd8:	2500      	movs	r5, #0
    2fda:	e711      	b.n	2e00 <__aeabi_dsub+0xf8>
    2fdc:	4657      	mov	r7, sl
    2fde:	4338      	orrs	r0, r7
    2fe0:	2300      	movs	r3, #0
    2fe2:	2200      	movs	r2, #0
    2fe4:	2800      	cmp	r0, #0
    2fe6:	d100      	bne.n	2fea <__aeabi_dsub+0x2e2>
    2fe8:	e6e6      	b.n	2db8 <__aeabi_dsub+0xb0>
    2fea:	2201      	movs	r2, #1
    2fec:	e6e4      	b.n	2db8 <__aeabi_dsub+0xb0>
    2fee:	031d      	lsls	r5, r3, #12
    2ff0:	0b2e      	lsrs	r6, r5, #12
    2ff2:	2700      	movs	r7, #0
    2ff4:	e740      	b.n	2e78 <__aeabi_dsub+0x170>
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d000      	beq.n	2ffc <__aeabi_dsub+0x2f4>
    2ffa:	e0d9      	b.n	31b0 <__aeabi_dsub+0x4a8>
    2ffc:	1c77      	adds	r7, r6, #1
    2ffe:	0579      	lsls	r1, r7, #21
    3000:	0d4a      	lsrs	r2, r1, #21
    3002:	2a01      	cmp	r2, #1
    3004:	dc00      	bgt.n	3008 <__aeabi_dsub+0x300>
    3006:	e095      	b.n	3134 <__aeabi_dsub+0x42c>
    3008:	4b14      	ldr	r3, [pc, #80]	; (305c <__aeabi_dsub+0x354>)
    300a:	429f      	cmp	r7, r3
    300c:	d100      	bne.n	3010 <__aeabi_dsub+0x308>
    300e:	e0fe      	b.n	320e <__aeabi_dsub+0x506>
    3010:	4651      	mov	r1, sl
    3012:	1949      	adds	r1, r1, r5
    3014:	42a9      	cmp	r1, r5
    3016:	41ad      	sbcs	r5, r5
    3018:	4662      	mov	r2, ip
    301a:	426b      	negs	r3, r5
    301c:	1880      	adds	r0, r0, r2
    301e:	18c2      	adds	r2, r0, r3
    3020:	0849      	lsrs	r1, r1, #1
    3022:	07d5      	lsls	r5, r2, #31
    3024:	430d      	orrs	r5, r1
    3026:	0853      	lsrs	r3, r2, #1
    3028:	1cb1      	adds	r1, r6, #2
    302a:	e6ff      	b.n	2e2c <__aeabi_dsub+0x124>
    302c:	490b      	ldr	r1, [pc, #44]	; (305c <__aeabi_dsub+0x354>)
    302e:	428e      	cmp	r6, r1
    3030:	d000      	beq.n	3034 <__aeabi_dsub+0x32c>
    3032:	e6ac      	b.n	2d8e <__aeabi_dsub+0x86>
    3034:	e78c      	b.n	2f50 <__aeabi_dsub+0x248>
    3036:	1c06      	adds	r6, r0, #0
    3038:	3e1f      	subs	r6, #31
    303a:	1c1f      	adds	r7, r3, #0
    303c:	40f7      	lsrs	r7, r6
    303e:	1c3e      	adds	r6, r7, #0
    3040:	2920      	cmp	r1, #32
    3042:	d073      	beq.n	312c <__aeabi_dsub+0x424>
    3044:	223f      	movs	r2, #63	; 0x3f
    3046:	1a10      	subs	r0, r2, r0
    3048:	4083      	lsls	r3, r0
    304a:	431d      	orrs	r5, r3
    304c:	1e6b      	subs	r3, r5, #1
    304e:	419d      	sbcs	r5, r3
    3050:	4335      	orrs	r5, r6
    3052:	2101      	movs	r1, #1
    3054:	2300      	movs	r3, #0
    3056:	2700      	movs	r7, #0
    3058:	e6e8      	b.n	2e2c <__aeabi_dsub+0x124>
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	000007ff 	.word	0x000007ff
    3060:	ff7fffff 	.word	0xff7fffff
    3064:	800fffff 	.word	0x800fffff
    3068:	1c3b      	adds	r3, r7, #0
    306a:	3b20      	subs	r3, #32
    306c:	1c01      	adds	r1, r0, #0
    306e:	40d9      	lsrs	r1, r3
    3070:	1c0b      	adds	r3, r1, #0
    3072:	2f20      	cmp	r7, #32
    3074:	d05c      	beq.n	3130 <__aeabi_dsub+0x428>
    3076:	2240      	movs	r2, #64	; 0x40
    3078:	1bd7      	subs	r7, r2, r7
    307a:	40b8      	lsls	r0, r7
    307c:	1c02      	adds	r2, r0, #0
    307e:	4650      	mov	r0, sl
    3080:	4302      	orrs	r2, r0
    3082:	1e51      	subs	r1, r2, #1
    3084:	418a      	sbcs	r2, r1
    3086:	431a      	orrs	r2, r3
    3088:	2300      	movs	r3, #0
    308a:	e695      	b.n	2db8 <__aeabi_dsub+0xb0>
    308c:	427f      	negs	r7, r7
    308e:	2e00      	cmp	r6, #0
    3090:	d040      	beq.n	3114 <__aeabi_dsub+0x40c>
    3092:	4cca      	ldr	r4, [pc, #808]	; (33bc <__aeabi_dsub+0x6b4>)
    3094:	42a2      	cmp	r2, r4
    3096:	d100      	bne.n	309a <__aeabi_dsub+0x392>
    3098:	e11f      	b.n	32da <__aeabi_dsub+0x5d2>
    309a:	2180      	movs	r1, #128	; 0x80
    309c:	4666      	mov	r6, ip
    309e:	040b      	lsls	r3, r1, #16
    30a0:	431e      	orrs	r6, r3
    30a2:	46b4      	mov	ip, r6
    30a4:	2f38      	cmp	r7, #56	; 0x38
    30a6:	dd00      	ble.n	30aa <__aeabi_dsub+0x3a2>
    30a8:	e0a9      	b.n	31fe <__aeabi_dsub+0x4f6>
    30aa:	2f1f      	cmp	r7, #31
    30ac:	dd00      	ble.n	30b0 <__aeabi_dsub+0x3a8>
    30ae:	e13d      	b.n	332c <__aeabi_dsub+0x624>
    30b0:	2320      	movs	r3, #32
    30b2:	1bde      	subs	r6, r3, r7
    30b4:	1c29      	adds	r1, r5, #0
    30b6:	4664      	mov	r4, ip
    30b8:	40b4      	lsls	r4, r6
    30ba:	40f9      	lsrs	r1, r7
    30bc:	40b5      	lsls	r5, r6
    30be:	1e6b      	subs	r3, r5, #1
    30c0:	419d      	sbcs	r5, r3
    30c2:	4321      	orrs	r1, r4
    30c4:	4663      	mov	r3, ip
    30c6:	430d      	orrs	r5, r1
    30c8:	40fb      	lsrs	r3, r7
    30ca:	4657      	mov	r7, sl
    30cc:	1b7d      	subs	r5, r7, r5
    30ce:	1ac0      	subs	r0, r0, r3
    30d0:	45aa      	cmp	sl, r5
    30d2:	419b      	sbcs	r3, r3
    30d4:	425f      	negs	r7, r3
    30d6:	1bc3      	subs	r3, r0, r7
    30d8:	464c      	mov	r4, r9
    30da:	1c17      	adds	r7, r2, #0
    30dc:	e675      	b.n	2dca <__aeabi_dsub+0xc2>
    30de:	1c0d      	adds	r5, r1, #0
    30e0:	4315      	orrs	r5, r2
    30e2:	d120      	bne.n	3126 <__aeabi_dsub+0x41e>
    30e4:	2400      	movs	r4, #0
    30e6:	2101      	movs	r1, #1
    30e8:	2300      	movs	r3, #0
    30ea:	2604      	movs	r6, #4
    30ec:	2700      	movs	r7, #0
    30ee:	e6b6      	b.n	2e5e <__aeabi_dsub+0x156>
    30f0:	2b1f      	cmp	r3, #31
    30f2:	dc4a      	bgt.n	318a <__aeabi_dsub+0x482>
    30f4:	2120      	movs	r1, #32
    30f6:	1ac9      	subs	r1, r1, r3
    30f8:	1c07      	adds	r7, r0, #0
    30fa:	4652      	mov	r2, sl
    30fc:	408f      	lsls	r7, r1
    30fe:	40da      	lsrs	r2, r3
    3100:	433a      	orrs	r2, r7
    3102:	4657      	mov	r7, sl
    3104:	408f      	lsls	r7, r1
    3106:	1c39      	adds	r1, r7, #0
    3108:	1e4f      	subs	r7, r1, #1
    310a:	41b9      	sbcs	r1, r7
    310c:	40d8      	lsrs	r0, r3
    310e:	430a      	orrs	r2, r1
    3110:	1c07      	adds	r7, r0, #0
    3112:	e6db      	b.n	2ecc <__aeabi_dsub+0x1c4>
    3114:	4664      	mov	r4, ip
    3116:	432c      	orrs	r4, r5
    3118:	d169      	bne.n	31ee <__aeabi_dsub+0x4e6>
    311a:	1c51      	adds	r1, r2, #1
    311c:	1c03      	adds	r3, r0, #0
    311e:	4655      	mov	r5, sl
    3120:	1c17      	adds	r7, r2, #0
    3122:	464c      	mov	r4, r9
    3124:	e682      	b.n	2e2c <__aeabi_dsub+0x124>
    3126:	1c15      	adds	r5, r2, #0
    3128:	1c37      	adds	r7, r6, #0
    312a:	e654      	b.n	2dd6 <__aeabi_dsub+0xce>
    312c:	2300      	movs	r3, #0
    312e:	e78c      	b.n	304a <__aeabi_dsub+0x342>
    3130:	2200      	movs	r2, #0
    3132:	e7a4      	b.n	307e <__aeabi_dsub+0x376>
    3134:	4667      	mov	r7, ip
    3136:	432f      	orrs	r7, r5
    3138:	2e00      	cmp	r6, #0
    313a:	d000      	beq.n	313e <__aeabi_dsub+0x436>
    313c:	e0d4      	b.n	32e8 <__aeabi_dsub+0x5e0>
    313e:	2f00      	cmp	r7, #0
    3140:	d100      	bne.n	3144 <__aeabi_dsub+0x43c>
    3142:	e126      	b.n	3392 <__aeabi_dsub+0x68a>
    3144:	4653      	mov	r3, sl
    3146:	4303      	orrs	r3, r0
    3148:	d100      	bne.n	314c <__aeabi_dsub+0x444>
    314a:	e0e4      	b.n	3316 <__aeabi_dsub+0x60e>
    314c:	4651      	mov	r1, sl
    314e:	194f      	adds	r7, r1, r5
    3150:	42af      	cmp	r7, r5
    3152:	41ad      	sbcs	r5, r5
    3154:	4460      	add	r0, ip
    3156:	426e      	negs	r6, r5
    3158:	1983      	adds	r3, r0, r6
    315a:	021e      	lsls	r6, r3, #8
    315c:	d400      	bmi.n	3160 <__aeabi_dsub+0x458>
    315e:	e14e      	b.n	33fe <__aeabi_dsub+0x6f6>
    3160:	4897      	ldr	r0, [pc, #604]	; (33c0 <__aeabi_dsub+0x6b8>)
    3162:	1c3d      	adds	r5, r7, #0
    3164:	4003      	ands	r3, r0
    3166:	2102      	movs	r1, #2
    3168:	2701      	movs	r7, #1
    316a:	e65f      	b.n	2e2c <__aeabi_dsub+0x124>
    316c:	4661      	mov	r1, ip
    316e:	4329      	orrs	r1, r5
    3170:	2e00      	cmp	r6, #0
    3172:	d129      	bne.n	31c8 <__aeabi_dsub+0x4c0>
    3174:	2900      	cmp	r1, #0
    3176:	d176      	bne.n	3266 <__aeabi_dsub+0x55e>
    3178:	4651      	mov	r1, sl
    317a:	4301      	orrs	r1, r0
    317c:	d0b2      	beq.n	30e4 <__aeabi_dsub+0x3dc>
    317e:	1c03      	adds	r3, r0, #0
    3180:	4655      	mov	r5, sl
    3182:	464c      	mov	r4, r9
    3184:	2101      	movs	r1, #1
    3186:	2700      	movs	r7, #0
    3188:	e650      	b.n	2e2c <__aeabi_dsub+0x124>
    318a:	1c1f      	adds	r7, r3, #0
    318c:	3f20      	subs	r7, #32
    318e:	1c01      	adds	r1, r0, #0
    3190:	40f9      	lsrs	r1, r7
    3192:	1c0f      	adds	r7, r1, #0
    3194:	2b20      	cmp	r3, #32
    3196:	d100      	bne.n	319a <__aeabi_dsub+0x492>
    3198:	e0c6      	b.n	3328 <__aeabi_dsub+0x620>
    319a:	2240      	movs	r2, #64	; 0x40
    319c:	1ad3      	subs	r3, r2, r3
    319e:	4098      	lsls	r0, r3
    31a0:	1c02      	adds	r2, r0, #0
    31a2:	4650      	mov	r0, sl
    31a4:	4302      	orrs	r2, r0
    31a6:	1e53      	subs	r3, r2, #1
    31a8:	419a      	sbcs	r2, r3
    31aa:	433a      	orrs	r2, r7
    31ac:	2700      	movs	r7, #0
    31ae:	e68d      	b.n	2ecc <__aeabi_dsub+0x1c4>
    31b0:	425b      	negs	r3, r3
    31b2:	2e00      	cmp	r6, #0
    31b4:	d130      	bne.n	3218 <__aeabi_dsub+0x510>
    31b6:	4667      	mov	r7, ip
    31b8:	432f      	orrs	r7, r5
    31ba:	d000      	beq.n	31be <__aeabi_dsub+0x4b6>
    31bc:	e0c8      	b.n	3350 <__aeabi_dsub+0x648>
    31be:	1c51      	adds	r1, r2, #1
    31c0:	1c03      	adds	r3, r0, #0
    31c2:	4655      	mov	r5, sl
    31c4:	1c17      	adds	r7, r2, #0
    31c6:	e631      	b.n	2e2c <__aeabi_dsub+0x124>
    31c8:	2900      	cmp	r1, #0
    31ca:	d165      	bne.n	3298 <__aeabi_dsub+0x590>
    31cc:	4657      	mov	r7, sl
    31ce:	4307      	orrs	r7, r0
    31d0:	d100      	bne.n	31d4 <__aeabi_dsub+0x4cc>
    31d2:	e0c8      	b.n	3366 <__aeabi_dsub+0x65e>
    31d4:	1c03      	adds	r3, r0, #0
    31d6:	2080      	movs	r0, #128	; 0x80
    31d8:	4655      	mov	r5, sl
    31da:	464c      	mov	r4, r9
    31dc:	0101      	lsls	r1, r0, #4
    31de:	4f77      	ldr	r7, [pc, #476]	; (33bc <__aeabi_dsub+0x6b4>)
    31e0:	e624      	b.n	2e2c <__aeabi_dsub+0x124>
    31e2:	2380      	movs	r3, #128	; 0x80
    31e4:	1c37      	adds	r7, r6, #0
    31e6:	0119      	lsls	r1, r3, #4
    31e8:	2604      	movs	r6, #4
    31ea:	2300      	movs	r3, #0
    31ec:	e637      	b.n	2e5e <__aeabi_dsub+0x156>
    31ee:	3f01      	subs	r7, #1
    31f0:	2f00      	cmp	r7, #0
    31f2:	d16e      	bne.n	32d2 <__aeabi_dsub+0x5ca>
    31f4:	4654      	mov	r4, sl
    31f6:	4661      	mov	r1, ip
    31f8:	1b65      	subs	r5, r4, r5
    31fa:	1a40      	subs	r0, r0, r1
    31fc:	e768      	b.n	30d0 <__aeabi_dsub+0x3c8>
    31fe:	4667      	mov	r7, ip
    3200:	433d      	orrs	r5, r7
    3202:	2300      	movs	r3, #0
    3204:	2d00      	cmp	r5, #0
    3206:	d100      	bne.n	320a <__aeabi_dsub+0x502>
    3208:	e75f      	b.n	30ca <__aeabi_dsub+0x3c2>
    320a:	2501      	movs	r5, #1
    320c:	e75d      	b.n	30ca <__aeabi_dsub+0x3c2>
    320e:	2680      	movs	r6, #128	; 0x80
    3210:	0131      	lsls	r1, r6, #4
    3212:	2300      	movs	r3, #0
    3214:	2604      	movs	r6, #4
    3216:	e622      	b.n	2e5e <__aeabi_dsub+0x156>
    3218:	4968      	ldr	r1, [pc, #416]	; (33bc <__aeabi_dsub+0x6b4>)
    321a:	428a      	cmp	r2, r1
    321c:	d100      	bne.n	3220 <__aeabi_dsub+0x518>
    321e:	e0c1      	b.n	33a4 <__aeabi_dsub+0x69c>
    3220:	2780      	movs	r7, #128	; 0x80
    3222:	4666      	mov	r6, ip
    3224:	0439      	lsls	r1, r7, #16
    3226:	430e      	orrs	r6, r1
    3228:	46b4      	mov	ip, r6
    322a:	2b38      	cmp	r3, #56	; 0x38
    322c:	dd00      	ble.n	3230 <__aeabi_dsub+0x528>
    322e:	e0a2      	b.n	3376 <__aeabi_dsub+0x66e>
    3230:	2b1f      	cmp	r3, #31
    3232:	dd00      	ble.n	3236 <__aeabi_dsub+0x52e>
    3234:	e0d0      	b.n	33d8 <__aeabi_dsub+0x6d0>
    3236:	2120      	movs	r1, #32
    3238:	1ac9      	subs	r1, r1, r3
    323a:	1c2e      	adds	r6, r5, #0
    323c:	4667      	mov	r7, ip
    323e:	408f      	lsls	r7, r1
    3240:	408d      	lsls	r5, r1
    3242:	40de      	lsrs	r6, r3
    3244:	433e      	orrs	r6, r7
    3246:	1c29      	adds	r1, r5, #0
    3248:	4667      	mov	r7, ip
    324a:	1e4d      	subs	r5, r1, #1
    324c:	41a9      	sbcs	r1, r5
    324e:	40df      	lsrs	r7, r3
    3250:	1c35      	adds	r5, r6, #0
    3252:	430d      	orrs	r5, r1
    3254:	1c3e      	adds	r6, r7, #0
    3256:	4455      	add	r5, sl
    3258:	4555      	cmp	r5, sl
    325a:	419b      	sbcs	r3, r3
    325c:	1830      	adds	r0, r6, r0
    325e:	425e      	negs	r6, r3
    3260:	1983      	adds	r3, r0, r6
    3262:	1c17      	adds	r7, r2, #0
    3264:	e63a      	b.n	2edc <__aeabi_dsub+0x1d4>
    3266:	4656      	mov	r6, sl
    3268:	4306      	orrs	r6, r0
    326a:	d054      	beq.n	3316 <__aeabi_dsub+0x60e>
    326c:	4657      	mov	r7, sl
    326e:	1bea      	subs	r2, r5, r7
    3270:	4663      	mov	r3, ip
    3272:	4295      	cmp	r5, r2
    3274:	41b6      	sbcs	r6, r6
    3276:	1a19      	subs	r1, r3, r0
    3278:	4273      	negs	r3, r6
    327a:	1acb      	subs	r3, r1, r3
    327c:	021e      	lsls	r6, r3, #8
    327e:	d400      	bmi.n	3282 <__aeabi_dsub+0x57a>
    3280:	e0a2      	b.n	33c8 <__aeabi_dsub+0x6c0>
    3282:	1b7d      	subs	r5, r7, r5
    3284:	4664      	mov	r4, ip
    3286:	45aa      	cmp	sl, r5
    3288:	41bf      	sbcs	r7, r7
    328a:	1b00      	subs	r0, r0, r4
    328c:	427a      	negs	r2, r7
    328e:	1a83      	subs	r3, r0, r2
    3290:	464c      	mov	r4, r9
    3292:	2101      	movs	r1, #1
    3294:	2700      	movs	r7, #0
    3296:	e5c9      	b.n	2e2c <__aeabi_dsub+0x124>
    3298:	4656      	mov	r6, sl
    329a:	4306      	orrs	r6, r0
    329c:	d03f      	beq.n	331e <__aeabi_dsub+0x616>
    329e:	4662      	mov	r2, ip
    32a0:	2180      	movs	r1, #128	; 0x80
    32a2:	0757      	lsls	r7, r2, #29
    32a4:	08ed      	lsrs	r5, r5, #3
    32a6:	08d3      	lsrs	r3, r2, #3
    32a8:	030a      	lsls	r2, r1, #12
    32aa:	433d      	orrs	r5, r7
    32ac:	4213      	tst	r3, r2
    32ae:	d008      	beq.n	32c2 <__aeabi_dsub+0x5ba>
    32b0:	08c6      	lsrs	r6, r0, #3
    32b2:	4216      	tst	r6, r2
    32b4:	d105      	bne.n	32c2 <__aeabi_dsub+0x5ba>
    32b6:	4655      	mov	r5, sl
    32b8:	08ec      	lsrs	r4, r5, #3
    32ba:	0745      	lsls	r5, r0, #29
    32bc:	4325      	orrs	r5, r4
    32be:	1c33      	adds	r3, r6, #0
    32c0:	464c      	mov	r4, r9
    32c2:	0f68      	lsrs	r0, r5, #29
    32c4:	00db      	lsls	r3, r3, #3
    32c6:	2680      	movs	r6, #128	; 0x80
    32c8:	4303      	orrs	r3, r0
    32ca:	00ed      	lsls	r5, r5, #3
    32cc:	0131      	lsls	r1, r6, #4
    32ce:	4f3b      	ldr	r7, [pc, #236]	; (33bc <__aeabi_dsub+0x6b4>)
    32d0:	e5ac      	b.n	2e2c <__aeabi_dsub+0x124>
    32d2:	493a      	ldr	r1, [pc, #232]	; (33bc <__aeabi_dsub+0x6b4>)
    32d4:	428a      	cmp	r2, r1
    32d6:	d000      	beq.n	32da <__aeabi_dsub+0x5d2>
    32d8:	e6e4      	b.n	30a4 <__aeabi_dsub+0x39c>
    32da:	2680      	movs	r6, #128	; 0x80
    32dc:	1c03      	adds	r3, r0, #0
    32de:	4655      	mov	r5, sl
    32e0:	464c      	mov	r4, r9
    32e2:	0131      	lsls	r1, r6, #4
    32e4:	1c17      	adds	r7, r2, #0
    32e6:	e5a1      	b.n	2e2c <__aeabi_dsub+0x124>
    32e8:	2f00      	cmp	r7, #0
    32ea:	d04c      	beq.n	3386 <__aeabi_dsub+0x67e>
    32ec:	4653      	mov	r3, sl
    32ee:	4303      	orrs	r3, r0
    32f0:	d015      	beq.n	331e <__aeabi_dsub+0x616>
    32f2:	4662      	mov	r2, ip
    32f4:	2680      	movs	r6, #128	; 0x80
    32f6:	08ed      	lsrs	r5, r5, #3
    32f8:	0751      	lsls	r1, r2, #29
    32fa:	08d3      	lsrs	r3, r2, #3
    32fc:	0337      	lsls	r7, r6, #12
    32fe:	430d      	orrs	r5, r1
    3300:	423b      	tst	r3, r7
    3302:	d0de      	beq.n	32c2 <__aeabi_dsub+0x5ba>
    3304:	08c2      	lsrs	r2, r0, #3
    3306:	423a      	tst	r2, r7
    3308:	d1db      	bne.n	32c2 <__aeabi_dsub+0x5ba>
    330a:	4655      	mov	r5, sl
    330c:	08e9      	lsrs	r1, r5, #3
    330e:	0745      	lsls	r5, r0, #29
    3310:	1c13      	adds	r3, r2, #0
    3312:	430d      	orrs	r5, r1
    3314:	e7d5      	b.n	32c2 <__aeabi_dsub+0x5ba>
    3316:	4663      	mov	r3, ip
    3318:	2101      	movs	r1, #1
    331a:	2700      	movs	r7, #0
    331c:	e586      	b.n	2e2c <__aeabi_dsub+0x124>
    331e:	2780      	movs	r7, #128	; 0x80
    3320:	0139      	lsls	r1, r7, #4
    3322:	4663      	mov	r3, ip
    3324:	4f25      	ldr	r7, [pc, #148]	; (33bc <__aeabi_dsub+0x6b4>)
    3326:	e581      	b.n	2e2c <__aeabi_dsub+0x124>
    3328:	2200      	movs	r2, #0
    332a:	e73a      	b.n	31a2 <__aeabi_dsub+0x49a>
    332c:	1c3c      	adds	r4, r7, #0
    332e:	3c20      	subs	r4, #32
    3330:	4666      	mov	r6, ip
    3332:	40e6      	lsrs	r6, r4
    3334:	1c33      	adds	r3, r6, #0
    3336:	2f20      	cmp	r7, #32
    3338:	d05f      	beq.n	33fa <__aeabi_dsub+0x6f2>
    333a:	2440      	movs	r4, #64	; 0x40
    333c:	1be7      	subs	r7, r4, r7
    333e:	4666      	mov	r6, ip
    3340:	40be      	lsls	r6, r7
    3342:	1c31      	adds	r1, r6, #0
    3344:	430d      	orrs	r5, r1
    3346:	1e69      	subs	r1, r5, #1
    3348:	418d      	sbcs	r5, r1
    334a:	431d      	orrs	r5, r3
    334c:	2300      	movs	r3, #0
    334e:	e6bc      	b.n	30ca <__aeabi_dsub+0x3c2>
    3350:	3b01      	subs	r3, #1
    3352:	2b00      	cmp	r3, #0
    3354:	d122      	bne.n	339c <__aeabi_dsub+0x694>
    3356:	4455      	add	r5, sl
    3358:	4555      	cmp	r5, sl
    335a:	41bf      	sbcs	r7, r7
    335c:	427b      	negs	r3, r7
    335e:	4460      	add	r0, ip
    3360:	18c3      	adds	r3, r0, r3
    3362:	1c17      	adds	r7, r2, #0
    3364:	e5ba      	b.n	2edc <__aeabi_dsub+0x1d4>
    3366:	2180      	movs	r1, #128	; 0x80
    3368:	2204      	movs	r2, #4
    336a:	2400      	movs	r4, #0
    336c:	0109      	lsls	r1, r1, #4
    336e:	4b15      	ldr	r3, [pc, #84]	; (33c4 <__aeabi_dsub+0x6bc>)
    3370:	4256      	negs	r6, r2
    3372:	4f12      	ldr	r7, [pc, #72]	; (33bc <__aeabi_dsub+0x6b4>)
    3374:	e573      	b.n	2e5e <__aeabi_dsub+0x156>
    3376:	4663      	mov	r3, ip
    3378:	431d      	orrs	r5, r3
    337a:	2600      	movs	r6, #0
    337c:	2d00      	cmp	r5, #0
    337e:	d100      	bne.n	3382 <__aeabi_dsub+0x67a>
    3380:	e769      	b.n	3256 <__aeabi_dsub+0x54e>
    3382:	2501      	movs	r5, #1
    3384:	e767      	b.n	3256 <__aeabi_dsub+0x54e>
    3386:	2280      	movs	r2, #128	; 0x80
    3388:	1c03      	adds	r3, r0, #0
    338a:	4655      	mov	r5, sl
    338c:	0111      	lsls	r1, r2, #4
    338e:	4f0b      	ldr	r7, [pc, #44]	; (33bc <__aeabi_dsub+0x6b4>)
    3390:	e54c      	b.n	2e2c <__aeabi_dsub+0x124>
    3392:	1c03      	adds	r3, r0, #0
    3394:	4655      	mov	r5, sl
    3396:	2101      	movs	r1, #1
    3398:	2700      	movs	r7, #0
    339a:	e547      	b.n	2e2c <__aeabi_dsub+0x124>
    339c:	4907      	ldr	r1, [pc, #28]	; (33bc <__aeabi_dsub+0x6b4>)
    339e:	428a      	cmp	r2, r1
    33a0:	d000      	beq.n	33a4 <__aeabi_dsub+0x69c>
    33a2:	e742      	b.n	322a <__aeabi_dsub+0x522>
    33a4:	2180      	movs	r1, #128	; 0x80
    33a6:	1c03      	adds	r3, r0, #0
    33a8:	4655      	mov	r5, sl
    33aa:	0109      	lsls	r1, r1, #4
    33ac:	1c17      	adds	r7, r2, #0
    33ae:	e53d      	b.n	2e2c <__aeabi_dsub+0x124>
    33b0:	057f      	lsls	r7, r7, #21
    33b2:	0d7f      	lsrs	r7, r7, #21
    33b4:	2600      	movs	r6, #0
    33b6:	2200      	movs	r2, #0
    33b8:	e55e      	b.n	2e78 <__aeabi_dsub+0x170>
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	000007ff 	.word	0x000007ff
    33c0:	ff7fffff 	.word	0xff7fffff
    33c4:	007fffff 	.word	0x007fffff
    33c8:	1c1d      	adds	r5, r3, #0
    33ca:	4315      	orrs	r5, r2
    33cc:	d100      	bne.n	33d0 <__aeabi_dsub+0x6c8>
    33ce:	e689      	b.n	30e4 <__aeabi_dsub+0x3dc>
    33d0:	1c15      	adds	r5, r2, #0
    33d2:	2101      	movs	r1, #1
    33d4:	2700      	movs	r7, #0
    33d6:	e529      	b.n	2e2c <__aeabi_dsub+0x124>
    33d8:	1c1f      	adds	r7, r3, #0
    33da:	3f20      	subs	r7, #32
    33dc:	4661      	mov	r1, ip
    33de:	40f9      	lsrs	r1, r7
    33e0:	2b20      	cmp	r3, #32
    33e2:	d010      	beq.n	3406 <__aeabi_dsub+0x6fe>
    33e4:	2640      	movs	r6, #64	; 0x40
    33e6:	1af3      	subs	r3, r6, r3
    33e8:	4667      	mov	r7, ip
    33ea:	409f      	lsls	r7, r3
    33ec:	1c3b      	adds	r3, r7, #0
    33ee:	431d      	orrs	r5, r3
    33f0:	1e6b      	subs	r3, r5, #1
    33f2:	419d      	sbcs	r5, r3
    33f4:	430d      	orrs	r5, r1
    33f6:	2600      	movs	r6, #0
    33f8:	e72d      	b.n	3256 <__aeabi_dsub+0x54e>
    33fa:	2100      	movs	r1, #0
    33fc:	e7a2      	b.n	3344 <__aeabi_dsub+0x63c>
    33fe:	1c3d      	adds	r5, r7, #0
    3400:	2101      	movs	r1, #1
    3402:	2700      	movs	r7, #0
    3404:	e512      	b.n	2e2c <__aeabi_dsub+0x124>
    3406:	2300      	movs	r3, #0
    3408:	e7f1      	b.n	33ee <__aeabi_dsub+0x6e6>
    340a:	46c0      	nop			; (mov r8, r8)

0000340c <__aeabi_d2iz>:
    340c:	4a13      	ldr	r2, [pc, #76]	; (345c <__aeabi_d2iz+0x50>)
    340e:	030b      	lsls	r3, r1, #12
    3410:	b530      	push	{r4, r5, lr}
    3412:	1c05      	adds	r5, r0, #0
    3414:	0048      	lsls	r0, r1, #1
    3416:	0b1c      	lsrs	r4, r3, #12
    3418:	0fc9      	lsrs	r1, r1, #31
    341a:	0d43      	lsrs	r3, r0, #21
    341c:	2000      	movs	r0, #0
    341e:	4293      	cmp	r3, r2
    3420:	dd11      	ble.n	3446 <__aeabi_d2iz+0x3a>
    3422:	480f      	ldr	r0, [pc, #60]	; (3460 <__aeabi_d2iz+0x54>)
    3424:	4283      	cmp	r3, r0
    3426:	dc0f      	bgt.n	3448 <__aeabi_d2iz+0x3c>
    3428:	2280      	movs	r2, #128	; 0x80
    342a:	0350      	lsls	r0, r2, #13
    342c:	4a0d      	ldr	r2, [pc, #52]	; (3464 <__aeabi_d2iz+0x58>)
    342e:	4304      	orrs	r4, r0
    3430:	1ad0      	subs	r0, r2, r3
    3432:	281f      	cmp	r0, #31
    3434:	dd0b      	ble.n	344e <__aeabi_d2iz+0x42>
    3436:	4d0c      	ldr	r5, [pc, #48]	; (3468 <__aeabi_d2iz+0x5c>)
    3438:	1aeb      	subs	r3, r5, r3
    343a:	40dc      	lsrs	r4, r3
    343c:	1c22      	adds	r2, r4, #0
    343e:	4250      	negs	r0, r2
    3440:	2900      	cmp	r1, #0
    3442:	d100      	bne.n	3446 <__aeabi_d2iz+0x3a>
    3444:	1c10      	adds	r0, r2, #0
    3446:	bd30      	pop	{r4, r5, pc}
    3448:	4c08      	ldr	r4, [pc, #32]	; (346c <__aeabi_d2iz+0x60>)
    344a:	1908      	adds	r0, r1, r4
    344c:	e7fb      	b.n	3446 <__aeabi_d2iz+0x3a>
    344e:	40c5      	lsrs	r5, r0
    3450:	4807      	ldr	r0, [pc, #28]	; (3470 <__aeabi_d2iz+0x64>)
    3452:	1c2a      	adds	r2, r5, #0
    3454:	181d      	adds	r5, r3, r0
    3456:	40ac      	lsls	r4, r5
    3458:	4322      	orrs	r2, r4
    345a:	e7f0      	b.n	343e <__aeabi_d2iz+0x32>
    345c:	000003fe 	.word	0x000003fe
    3460:	0000041d 	.word	0x0000041d
    3464:	00000433 	.word	0x00000433
    3468:	00000413 	.word	0x00000413
    346c:	7fffffff 	.word	0x7fffffff
    3470:	fffffbed 	.word	0xfffffbed

00003474 <__aeabi_i2d>:
    3474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3476:	1e04      	subs	r4, r0, #0
    3478:	d02d      	beq.n	34d6 <__aeabi_i2d+0x62>
    347a:	0fc5      	lsrs	r5, r0, #31
    347c:	d000      	beq.n	3480 <__aeabi_i2d+0xc>
    347e:	4244      	negs	r4, r0
    3480:	1c20      	adds	r0, r4, #0
    3482:	f000 f863 	bl	354c <__clzsi2>
    3486:	4916      	ldr	r1, [pc, #88]	; (34e0 <__aeabi_i2d+0x6c>)
    3488:	1a0a      	subs	r2, r1, r0
    348a:	280a      	cmp	r0, #10
    348c:	dd16      	ble.n	34bc <__aeabi_i2d+0x48>
    348e:	380b      	subs	r0, #11
    3490:	4084      	lsls	r4, r0
    3492:	0557      	lsls	r7, r2, #21
    3494:	0326      	lsls	r6, r4, #12
    3496:	0d7a      	lsrs	r2, r7, #21
    3498:	0b36      	lsrs	r6, r6, #12
    349a:	2700      	movs	r7, #0
    349c:	2000      	movs	r0, #0
    349e:	2100      	movs	r1, #0
    34a0:	1c38      	adds	r0, r7, #0
    34a2:	0d0f      	lsrs	r7, r1, #20
    34a4:	053b      	lsls	r3, r7, #20
    34a6:	4c0f      	ldr	r4, [pc, #60]	; (34e4 <__aeabi_i2d+0x70>)
    34a8:	4333      	orrs	r3, r6
    34aa:	401c      	ands	r4, r3
    34ac:	0516      	lsls	r6, r2, #20
    34ae:	4334      	orrs	r4, r6
    34b0:	0061      	lsls	r1, r4, #1
    34b2:	084a      	lsrs	r2, r1, #1
    34b4:	07ed      	lsls	r5, r5, #31
    34b6:	1c11      	adds	r1, r2, #0
    34b8:	4329      	orrs	r1, r5
    34ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34bc:	260b      	movs	r6, #11
    34be:	1c01      	adds	r1, r0, #0
    34c0:	1a30      	subs	r0, r6, r0
    34c2:	3115      	adds	r1, #21
    34c4:	1c23      	adds	r3, r4, #0
    34c6:	40c4      	lsrs	r4, r0
    34c8:	408b      	lsls	r3, r1
    34ca:	0552      	lsls	r2, r2, #21
    34cc:	0321      	lsls	r1, r4, #12
    34ce:	1c1f      	adds	r7, r3, #0
    34d0:	0b0e      	lsrs	r6, r1, #12
    34d2:	0d52      	lsrs	r2, r2, #21
    34d4:	e7e2      	b.n	349c <__aeabi_i2d+0x28>
    34d6:	2500      	movs	r5, #0
    34d8:	2200      	movs	r2, #0
    34da:	2600      	movs	r6, #0
    34dc:	2700      	movs	r7, #0
    34de:	e7dd      	b.n	349c <__aeabi_i2d+0x28>
    34e0:	0000041e 	.word	0x0000041e
    34e4:	800fffff 	.word	0x800fffff

000034e8 <__aeabi_ui2d>:
    34e8:	b570      	push	{r4, r5, r6, lr}
    34ea:	1e04      	subs	r4, r0, #0
    34ec:	d026      	beq.n	353c <__aeabi_ui2d+0x54>
    34ee:	f000 f82d 	bl	354c <__clzsi2>
    34f2:	4914      	ldr	r1, [pc, #80]	; (3544 <__aeabi_ui2d+0x5c>)
    34f4:	1a0a      	subs	r2, r1, r0
    34f6:	280a      	cmp	r0, #10
    34f8:	dd13      	ble.n	3522 <__aeabi_ui2d+0x3a>
    34fa:	380b      	subs	r0, #11
    34fc:	4084      	lsls	r4, r0
    34fe:	0556      	lsls	r6, r2, #21
    3500:	0324      	lsls	r4, r4, #12
    3502:	0d72      	lsrs	r2, r6, #21
    3504:	0b25      	lsrs	r5, r4, #12
    3506:	2600      	movs	r6, #0
    3508:	2000      	movs	r0, #0
    350a:	2100      	movs	r1, #0
    350c:	1c30      	adds	r0, r6, #0
    350e:	0d0e      	lsrs	r6, r1, #20
    3510:	0533      	lsls	r3, r6, #20
    3512:	4c0d      	ldr	r4, [pc, #52]	; (3548 <__aeabi_ui2d+0x60>)
    3514:	432b      	orrs	r3, r5
    3516:	0511      	lsls	r1, r2, #20
    3518:	401c      	ands	r4, r3
    351a:	430c      	orrs	r4, r1
    351c:	0065      	lsls	r5, r4, #1
    351e:	0869      	lsrs	r1, r5, #1
    3520:	bd70      	pop	{r4, r5, r6, pc}
    3522:	230b      	movs	r3, #11
    3524:	1c05      	adds	r5, r0, #0
    3526:	1a18      	subs	r0, r3, r0
    3528:	3515      	adds	r5, #21
    352a:	1c21      	adds	r1, r4, #0
    352c:	40c4      	lsrs	r4, r0
    352e:	40a9      	lsls	r1, r5
    3530:	0552      	lsls	r2, r2, #21
    3532:	0325      	lsls	r5, r4, #12
    3534:	1c0e      	adds	r6, r1, #0
    3536:	0b2d      	lsrs	r5, r5, #12
    3538:	0d52      	lsrs	r2, r2, #21
    353a:	e7e5      	b.n	3508 <__aeabi_ui2d+0x20>
    353c:	2200      	movs	r2, #0
    353e:	2500      	movs	r5, #0
    3540:	2600      	movs	r6, #0
    3542:	e7e1      	b.n	3508 <__aeabi_ui2d+0x20>
    3544:	0000041e 	.word	0x0000041e
    3548:	800fffff 	.word	0x800fffff

0000354c <__clzsi2>:
    354c:	211c      	movs	r1, #28
    354e:	2301      	movs	r3, #1
    3550:	041b      	lsls	r3, r3, #16
    3552:	4298      	cmp	r0, r3
    3554:	d301      	bcc.n	355a <__clzsi2+0xe>
    3556:	0c00      	lsrs	r0, r0, #16
    3558:	3910      	subs	r1, #16
    355a:	0a1b      	lsrs	r3, r3, #8
    355c:	4298      	cmp	r0, r3
    355e:	d301      	bcc.n	3564 <__clzsi2+0x18>
    3560:	0a00      	lsrs	r0, r0, #8
    3562:	3908      	subs	r1, #8
    3564:	091b      	lsrs	r3, r3, #4
    3566:	4298      	cmp	r0, r3
    3568:	d301      	bcc.n	356e <__clzsi2+0x22>
    356a:	0900      	lsrs	r0, r0, #4
    356c:	3904      	subs	r1, #4
    356e:	a202      	add	r2, pc, #8	; (adr r2, 3578 <__clzsi2+0x2c>)
    3570:	5c10      	ldrb	r0, [r2, r0]
    3572:	1840      	adds	r0, r0, r1
    3574:	4770      	bx	lr
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	02020304 	.word	0x02020304
    357c:	01010101 	.word	0x01010101
	...

00003588 <_ZL18port_to_output_PGM>:
    3588:	00000000 50003ffc 50013ffc 00000000     .....?.P.?.P....
    3598:	00000000                                ....

0000359c <_ZL27digital_pin_to_bit_mask_PGM>:
    359c:	00800040 02000100 00040002 00100008     @...............
    35ac:	01000080 04000200 00400020 00010020     ........ .@. ...
    35bc:	00040002 00100008                       ........

000035c4 <_ZL23digital_pin_to_port_PGM>:
    35c4:	02020202 01010101 01010101 02020101     ................
    35d4:	02020202                                ....

000035d8 <_ZL16port_to_mode_PGM>:
    35d8:	00000000 50008000 50018000 00000000     .......P...P....
    35e8:	00000000 6e69614d 6e654d20 202d2075     ....Main Menu - 
    35f8:	74736552 74636972 5020726f 6574616c     Restrictor Plate
    3608:	2e307620 2e310031 454c2020 4e4f2044      v0.1.1.  LED ON
    3618:	202e3200 44454c20 46464f20 202e3300     .2.  LED OFF.3. 
    3628:	55504d20 30353036 4f485720 5f4d415f      MPU6050 WHO_AM_
    3638:	2e340049 6c432020 20726165 65656c73     I.4.  Clear slee
    3648:	2e350070 65522020 58206461 3e3d3d00     p.5.  Read X.==>
    3658:	504d0020 35303655 48572030 4d415f4f      .MPU6050 WHO_AM
    3668:	203a495f 4d007830 30365550 58203035     _I: 0x.MPU6050 X
    3678:	6978612d 504d0073 35303655 20582030     -axis.MPU6050 X 
    3688:	73697861 7830203a 55504d00 30353036     axis: 0x.MPU6050
    3698:	6d655420 504d0070 35303655 65742030      Temp.MPU6050 te
    36a8:	2820706d 203a2946 00000000 00000000     mp (F): ........

000036b8 <_ZTV14HardwareSerial>:
	...
    36c0:	000005fd 00000afd 00000591 000005cd     ................
    36d0:	000005a9 000005f9 006e616e 00666e69     ........nan.inf.
    36e0:	0066766f 0000002e 00000043              ovf.....C...

000036ec <_global_impure_ptr>:
    36ec:	10000008 00002144 00002310 00002404     ....D!...#...$..
    36fc:	000023a0 00002404 0000237a 00002404     .#...$..z#...$..
    370c:	000023a0 00002310 00002310 0000237a     .#...#...#..z#..
    371c:	000023a0 00002426 00002426 00002426     .#..&$..&$..&$..
    372c:	0000240c 00002954 00002bb0 00002bb0     .$..T)...+...+..
    373c:	00002b84 00002afc 00002afc 00002ba4     .+...*...*...+..
    374c:	00002b84 00002afc 00002ba4 00002afc     .+...*...+...*..
    375c:	00002b84 00002b9c 00002b9c 00002b9c     .+...+...+...+..
    376c:	00002bb4                                .+..

00003770 <_init>:
    3770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3772:	46c0      	nop			; (mov r8, r8)
    3774:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3776:	bc08      	pop	{r3}
    3778:	469e      	mov	lr, r3
    377a:	4770      	bx	lr

0000377c <__init_array_start>:
    377c:	000014d5 	.word	0x000014d5

00003780 <__frame_dummy_init_array_entry>:
    3780:	000000c9 000007f5                       ........

00003788 <_fini>:
    3788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    378e:	bc08      	pop	{r3}
    3790:	469e      	mov	lr, r3
    3792:	4770      	bx	lr

00003794 <__fini_array_start>:
    3794:	000000a1 	.word	0x000000a1
