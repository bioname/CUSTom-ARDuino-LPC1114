
out/project.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__text_start>:
       0:	10000f28 	.word	0x10000f28
       4:	00000101 	.word	0x00000101
	...
      7c:	00000759 	.word	0x00000759
      80:	000001f9 	.word	0x000001f9
	...
      94:	000005a5 	.word	0x000005a5
	...

000000a0 <__do_global_dtors_aux>:
      a0:	b510      	push	{r4, lr}
      a2:	4c06      	ldr	r4, [pc, #24]	; (bc <__do_global_dtors_aux+0x1c>)
      a4:	7823      	ldrb	r3, [r4, #0]
      a6:	2b00      	cmp	r3, #0
      a8:	d107      	bne.n	ba <__do_global_dtors_aux+0x1a>
      aa:	4805      	ldr	r0, [pc, #20]	; (c0 <__do_global_dtors_aux+0x20>)
      ac:	2800      	cmp	r0, #0
      ae:	d002      	beq.n	b6 <__do_global_dtors_aux+0x16>
      b0:	4804      	ldr	r0, [pc, #16]	; (c4 <__do_global_dtors_aux+0x24>)
      b2:	e000      	b.n	b6 <__do_global_dtors_aux+0x16>
      b4:	bf00      	nop
      b6:	2101      	movs	r1, #1
      b8:	7021      	strb	r1, [r4, #0]
      ba:	bd10      	pop	{r4, pc}
      bc:	10000840 	.word	0x10000840
      c0:	00000000 	.word	0x00000000
      c4:	00001678 	.word	0x00001678

000000c8 <frame_dummy>:
      c8:	b508      	push	{r3, lr}
      ca:	4b08      	ldr	r3, [pc, #32]	; (ec <frame_dummy+0x24>)
      cc:	2b00      	cmp	r3, #0
      ce:	d003      	beq.n	d8 <frame_dummy+0x10>
      d0:	4807      	ldr	r0, [pc, #28]	; (f0 <frame_dummy+0x28>)
      d2:	4908      	ldr	r1, [pc, #32]	; (f4 <frame_dummy+0x2c>)
      d4:	e000      	b.n	d8 <frame_dummy+0x10>
      d6:	bf00      	nop
      d8:	4807      	ldr	r0, [pc, #28]	; (f8 <frame_dummy+0x30>)
      da:	6801      	ldr	r1, [r0, #0]
      dc:	2900      	cmp	r1, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x20>
      e0:	4a06      	ldr	r2, [pc, #24]	; (fc <frame_dummy+0x34>)
      e2:	2a00      	cmp	r2, #0
      e4:	d000      	beq.n	e8 <frame_dummy+0x20>
      e6:	4790      	blx	r2
      e8:	bd08      	pop	{r3, pc}
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	00000000 	.word	0x00000000
      f0:	00001678 	.word	0x00001678
      f4:	10000844 	.word	0x10000844
      f8:	1000083c 	.word	0x1000083c
      fc:	00000000 	.word	0x00000000

00000100 <__startup>:
      0,          /* IRQ20 - SPI0    */
      UART_IRQHandler           /* IRQ21 - UART    */

};

void __startup(void){
     100:	b510      	push	{r4, lr}
   extern int __init_array_end;
   
	 int *s, *d, *e;

	 // clear .bss section 
	 d = & __bss_start;
     102:	4911      	ldr	r1, [pc, #68]	; (148 <__startup+0x48>)
	 e = & __bss_end;
	 while( d != e ){
     104:	4a11      	ldr	r2, [pc, #68]	; (14c <__startup+0x4c>)
     106:	4291      	cmp	r1, r2
     108:	d002      	beq.n	110 <__startup+0x10>
	    *d++ = 0;
     10a:	2200      	movs	r2, #0
     10c:	c104      	stmia	r1!, {r2}
     10e:	e7f9      	b.n	104 <__startup+0x4>
      0,          /* IRQ20 - SPI0    */
      UART_IRQHandler           /* IRQ21 - UART    */

};

void __startup(void){
     110:	490f      	ldr	r1, [pc, #60]	; (150 <__startup+0x50>)
     112:	4a10      	ldr	r2, [pc, #64]	; (154 <__startup+0x54>)
     114:	1a88      	subs	r0, r1, r2
     116:	0883      	lsrs	r3, r0, #2
     118:	3301      	adds	r3, #1
     11a:	0099      	lsls	r1, r3, #2
     11c:	2300      	movs	r3, #0
     11e:	3304      	adds	r3, #4
	 
	 // copy .data section from flash to ram
	 s = & __data_init_start;
	 d = & __data_start;
	 e = & __data_end;
	 while( d != e ){ 
     120:	428b      	cmp	r3, r1
     122:	d007      	beq.n	134 <__startup+0x34>
      0,          /* IRQ20 - SPI0    */
      UART_IRQHandler           /* IRQ21 - UART    */

};

void __startup(void){
     124:	4c0c      	ldr	r4, [pc, #48]	; (158 <__startup+0x58>)
     126:	18d0      	adds	r0, r2, r3
     128:	191c      	adds	r4, r3, r4
     12a:	3c04      	subs	r4, #4
	 // copy .data section from flash to ram
	 s = & __data_init_start;
	 d = & __data_start;
	 e = & __data_end;
	 while( d != e ){ 
	    *d++ = *s++;
     12c:	6824      	ldr	r4, [r4, #0]
      0,          /* IRQ20 - SPI0    */
      UART_IRQHandler           /* IRQ21 - UART    */

};

void __startup(void){
     12e:	3804      	subs	r0, #4
	 // copy .data section from flash to ram
	 s = & __data_init_start;
	 d = & __data_start;
	 e = & __data_end;
	 while( d != e ){ 
	    *d++ = *s++;
     130:	6004      	str	r4, [r0, #0]
     132:	e7f4      	b.n	11e <__startup+0x1e>
	 
	 // copy .data section from flash to ram
	 s = & __data_init_start;
	 d = & __data_start;
	 e = & __data_end;
	 while( d != e ){ 
     134:	4c09      	ldr	r4, [pc, #36]	; (15c <__startup+0x5c>)
	 } 
	 
	 // call the constructorts of global objects
	 s = & __init_array_start;
	 e = & __init_array_end;
	 while( s != e ){
     136:	4a0a      	ldr	r2, [pc, #40]	; (160 <__startup+0x60>)
     138:	4294      	cmp	r4, r2
     13a:	d002      	beq.n	142 <__startup+0x42>
	    (*((void(**)())s++))();
     13c:	cc02      	ldmia	r4!, {r1}
     13e:	4788      	blx	r1
     140:	e7f9      	b.n	136 <__startup+0x36>
	 }
  
   // call main   
   (void) main(); 
     142:	f000 fb01 	bl	748 <main>
     146:	e7fe      	b.n	146 <__startup+0x46>
     148:	10000840 	.word	0x10000840
     14c:	10000b24 	.word	0x10000b24
     150:	1000083c 	.word	0x1000083c
     154:	10000000 	.word	0x10000000
     158:	000016a0 	.word	0x000016a0
     15c:	00001684 	.word	0x00001684
     160:	00001690 	.word	0x00001690

00000164 <_Z7pinModehh>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     164:	b510      	push	{r4, lr}
	uint32_t bit = digitalPinToBitMask(pin);
	uint32_t port = digitalPinToPort(pin);
     166:	4c12      	ldr	r4, [pc, #72]	; (1b0 <_Z7pinModehh+0x4c>)
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint32_t bit = digitalPinToBitMask(pin);
     168:	0042      	lsls	r2, r0, #1
     16a:	4b12      	ldr	r3, [pc, #72]	; (1b4 <_Z7pinModehh+0x50>)
	uint32_t port = digitalPinToPort(pin);
     16c:	5c20      	ldrb	r0, [r4, r0]
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint32_t bit = digitalPinToBitMask(pin);
     16e:	5ad2      	ldrh	r2, [r2, r3]
	uint32_t port = digitalPinToPort(pin);
	volatile uint32_t *reg, *out;

	if (port == NOT_A_PIN) return;
     170:	2800      	cmp	r0, #0
     172:	d01b      	beq.n	1ac <_Z7pinModehh+0x48>

	// JWS: can I let the optimizer do this?
	reg = (uint32_t *)portModeRegister(port);
     174:	4b10      	ldr	r3, [pc, #64]	; (1b8 <_Z7pinModehh+0x54>)
	out = (uint32_t *)portOutputRegister(port);
     176:	4c11      	ldr	r4, [pc, #68]	; (1bc <_Z7pinModehh+0x58>)
	volatile uint32_t *reg, *out;

	if (port == NOT_A_PIN) return;

	// JWS: can I let the optimizer do this?
	reg = (uint32_t *)portModeRegister(port);
     178:	0080      	lsls	r0, r0, #2
     17a:	581b      	ldr	r3, [r3, r0]
	out = (uint32_t *)portOutputRegister(port);
     17c:	5820      	ldr	r0, [r4, r0]

	if (mode == INPUT) { 
	        noInterrupts();
     17e:	b672      	cpsid	i

	// JWS: can I let the optimizer do this?
	reg = (uint32_t *)portModeRegister(port);
	out = (uint32_t *)portOutputRegister(port);

	if (mode == INPUT) { 
     180:	2900      	cmp	r1, #0
     182:	d106      	bne.n	192 <_Z7pinModehh+0x2e>
	        noInterrupts();
         	*reg &= ~bit;
     184:	6819      	ldr	r1, [r3, #0]
     186:	43d2      	mvns	r2, r2
     188:	4011      	ands	r1, r2
     18a:	6019      	str	r1, [r3, #0]
		*out &= ~bit;
     18c:	6804      	ldr	r4, [r0, #0]
     18e:	4022      	ands	r2, r4
     190:	e006      	b.n	1a0 <_Z7pinModehh+0x3c>
		interrupts();
	} else if (mode == INPUT_PULLUP) {
     192:	2902      	cmp	r1, #2
     194:	d106      	bne.n	1a4 <_Z7pinModehh+0x40>
	        noInterrupts();
		*reg &= ~bit;
     196:	681c      	ldr	r4, [r3, #0]
     198:	4394      	bics	r4, r2
     19a:	601c      	str	r4, [r3, #0]
		*out |= bit;
     19c:	6803      	ldr	r3, [r0, #0]
     19e:	431a      	orrs	r2, r3
     1a0:	6002      	str	r2, [r0, #0]
     1a2:	e002      	b.n	1aa <_Z7pinModehh+0x46>
		interrupts();
	} else {
	        noInterrupts();
		*reg |= bit;
     1a4:	6819      	ldr	r1, [r3, #0]
     1a6:	430a      	orrs	r2, r1
     1a8:	601a      	str	r2, [r3, #0]
		interrupts();
     1aa:	b662      	cpsie	i
	}
}
     1ac:	bd10      	pop	{r4, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	00001594 	.word	0x00001594
     1b4:	0000156c 	.word	0x0000156c
     1b8:	000015a8 	.word	0x000015a8
     1bc:	00001558 	.word	0x00001558

000001c0 <_Z12digitalWritehh>:
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint32_t timer = digitalPinToTimer(pin);
	uint32_t bit = digitalPinToBitMask(pin);
     1c0:	4b0a      	ldr	r3, [pc, #40]	; (1ec <_Z12digitalWritehh+0x2c>)
     1c2:	0042      	lsls	r2, r0, #1
     1c4:	5ad2      	ldrh	r2, [r2, r3]
	uint32_t port = digitalPinToPort(pin);
     1c6:	4b0a      	ldr	r3, [pc, #40]	; (1f0 <_Z12digitalWritehh+0x30>)
     1c8:	5c18      	ldrb	r0, [r3, r0]
	uint32_t *out;

	if (port == NOT_A_PIN) return;
     1ca:	2800      	cmp	r0, #0
     1cc:	d00c      	beq.n	1e8 <_Z12digitalWritehh+0x28>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = (uint32_t *)portOutputRegister(port);
     1ce:	0083      	lsls	r3, r0, #2
     1d0:	4808      	ldr	r0, [pc, #32]	; (1f4 <_Z12digitalWritehh+0x34>)
     1d2:	581b      	ldr	r3, [r3, r0]

	noInterrupts();
     1d4:	b672      	cpsid	i
     1d6:	6818      	ldr	r0, [r3, #0]

	if (val == LOW) {
     1d8:	2900      	cmp	r1, #0
     1da:	d102      	bne.n	1e2 <_Z12digitalWritehh+0x22>
		*out &= ~bit;
     1dc:	4390      	bics	r0, r2
     1de:	6018      	str	r0, [r3, #0]
     1e0:	e001      	b.n	1e6 <_Z12digitalWritehh+0x26>
	} else {
		*out |= bit;
     1e2:	4302      	orrs	r2, r0
     1e4:	601a      	str	r2, [r3, #0]
	}

	interrupts();
     1e6:	b662      	cpsie	i
}
     1e8:	4770      	bx	lr
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	0000156c 	.word	0x0000156c
     1f0:	00001594 	.word	0x00001594
     1f4:	00001558 	.word	0x00001558

000001f8 <_Z15TIMER0_OVF_vectv>:
void TIMER0_OVF_vect()
{
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;
     1f8:	490a      	ldr	r1, [pc, #40]	; (224 <_Z15TIMER0_OVF_vectv+0x2c>)

void TIMER0_OVF_vect()
{
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = timer0_millis;
     1fa:	480b      	ldr	r0, [pc, #44]	; (228 <_Z15TIMER0_OVF_vectv+0x30>)
  unsigned char f = timer0_fract;
     1fc:	780b      	ldrb	r3, [r1, #0]

void TIMER0_OVF_vect()
{
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = timer0_millis;
     1fe:	6802      	ldr	r2, [r0, #0]
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
     200:	2b7c      	cmp	r3, #124	; 0x7c
     202:	d801      	bhi.n	208 <_Z15TIMER0_OVF_vectv+0x10>
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = timer0_millis;
  unsigned char f = timer0_fract;

  m += MILLIS_INC;
     204:	3201      	adds	r2, #1
     206:	e002      	b.n	20e <_Z15TIMER0_OVF_vectv+0x16>
  f += FRACT_INC;
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
     208:	3b7d      	subs	r3, #125	; 0x7d
     20a:	b2db      	uxtb	r3, r3
    m += 1;
     20c:	3202      	adds	r2, #2
  }

  timer0_fract = f;
  timer0_millis = m;
     20e:	6002      	str	r2, [r0, #0]
  timer0_overflow_count++;
     210:	4806      	ldr	r0, [pc, #24]	; (22c <_Z15TIMER0_OVF_vectv+0x34>)
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += 1;
  }

  timer0_fract = f;
     212:	700b      	strb	r3, [r1, #0]
  timer0_millis = m;
  timer0_overflow_count++;
     214:	6802      	ldr	r2, [r0, #0]

  //  Clear the interrupt flag
  TMR16B0IR     = 1;
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <_Z15TIMER0_OVF_vectv+0x38>)
    m += 1;
  }

  timer0_fract = f;
  timer0_millis = m;
  timer0_overflow_count++;
     218:	3201      	adds	r2, #1

  //  Clear the interrupt flag
  TMR16B0IR     = 1;
     21a:	2101      	movs	r1, #1
    m += 1;
  }

  timer0_fract = f;
  timer0_millis = m;
  timer0_overflow_count++;
     21c:	6002      	str	r2, [r0, #0]

  //  Clear the interrupt flag
  TMR16B0IR     = 1;
     21e:	6019      	str	r1, [r3, #0]
}
     220:	4770      	bx	lr
     222:	46c0      	nop			; (mov r8, r8)
     224:	10000860 	.word	0x10000860
     228:	10000864 	.word	0x10000864
     22c:	1000085c 	.word	0x1000085c
     230:	4000c000 	.word	0x4000c000

00000234 <_Z4initv>:
void init()
{
  uint32_t i;

  //  run the PLL at 48 mhz using the 12 mhz internal resonator as the source
  PDRUNCFG     &= ~(1 << 5);          // Power-up System Osc      
     234:	4a21      	ldr	r2, [pc, #132]	; (2bc <_Z4initv+0x88>)
     236:	2120      	movs	r1, #32
     238:	6813      	ldr	r3, [r2, #0]
  SYSOSCCTRL    = 0x00000000;
     23a:	2000      	movs	r0, #0
void init()
{
  uint32_t i;

  //  run the PLL at 48 mhz using the 12 mhz internal resonator as the source
  PDRUNCFG     &= ~(1 << 5);          // Power-up System Osc      
     23c:	438b      	bics	r3, r1
     23e:	6013      	str	r3, [r2, #0]
  SYSOSCCTRL    = 0x00000000;
     240:	4b1f      	ldr	r3, [pc, #124]	; (2c0 <_Z4initv+0x8c>)
     242:	1c11      	adds	r1, r2, #0
     244:	6018      	str	r0, [r3, #0]
     246:	23c8      	movs	r3, #200	; 0xc8
  for (i = 0; i < 200; i++) asm("nop");
     248:	46c0      	nop			; (mov r8, r8)
     24a:	3b01      	subs	r3, #1
     24c:	2b00      	cmp	r3, #0
     24e:	d1fb      	bne.n	248 <_Z4initv+0x14>
  SYSPLLCLKSEL  = 0x00000000;         // Select PLL Input         
     250:	4a1c      	ldr	r2, [pc, #112]	; (2c4 <_Z4initv+0x90>)
  SYSPLLCLKUEN  = 0x01;               // Update Clock Source      
     252:	2001      	movs	r0, #1

  //  run the PLL at 48 mhz using the 12 mhz internal resonator as the source
  PDRUNCFG     &= ~(1 << 5);          // Power-up System Osc      
  SYSOSCCTRL    = 0x00000000;
  for (i = 0; i < 200; i++) asm("nop");
  SYSPLLCLKSEL  = 0x00000000;         // Select PLL Input         
     254:	6013      	str	r3, [r2, #0]
  SYSPLLCLKUEN  = 0x01;               // Update Clock Source      
     256:	4a1c      	ldr	r2, [pc, #112]	; (2c8 <_Z4initv+0x94>)
     258:	6010      	str	r0, [r2, #0]
  SYSPLLCLKUEN  = 0x00;               // Toggle Update Register   
     25a:	6013      	str	r3, [r2, #0]
  SYSPLLCLKUEN  = 0x01;
     25c:	6010      	str	r0, [r2, #0]
  while (!(SYSPLLCLKUEN & 0x01));     // Wait Until Updated       
     25e:	6813      	ldr	r3, [r2, #0]
     260:	07d8      	lsls	r0, r3, #31
     262:	d5fc      	bpl.n	25e <_Z4initv+0x2a>
  SYSPLLCTRL    = 0x00000023;
     264:	4819      	ldr	r0, [pc, #100]	; (2cc <_Z4initv+0x98>)
     266:	2223      	movs	r2, #35	; 0x23
     268:	6002      	str	r2, [r0, #0]
  PDRUNCFG     &= ~(1 << 7);          // Power-up SYSPLL          
     26a:	680b      	ldr	r3, [r1, #0]
     26c:	2280      	movs	r2, #128	; 0x80
     26e:	4393      	bics	r3, r2
     270:	600b      	str	r3, [r1, #0]
  while (!(SYSPLLSTAT & 0x01));       // Wait Until PLL Locked    
     272:	4917      	ldr	r1, [pc, #92]	; (2d0 <_Z4initv+0x9c>)
     274:	2201      	movs	r2, #1
     276:	6808      	ldr	r0, [r1, #0]
     278:	4210      	tst	r0, r2
     27a:	d0fa      	beq.n	272 <_Z4initv+0x3e>
  MAINCLKSEL    = 0x00000003;         // Select PLL Clock Output  
     27c:	4b15      	ldr	r3, [pc, #84]	; (2d4 <_Z4initv+0xa0>)
  MAINCLKUEN    = 0x01;               // Update MCLK Clock Source 
     27e:	4816      	ldr	r0, [pc, #88]	; (2d8 <_Z4initv+0xa4>)
  SYSPLLCLKUEN  = 0x01;
  while (!(SYSPLLCLKUEN & 0x01));     // Wait Until Updated       
  SYSPLLCTRL    = 0x00000023;
  PDRUNCFG     &= ~(1 << 7);          // Power-up SYSPLL          
  while (!(SYSPLLSTAT & 0x01));       // Wait Until PLL Locked    
  MAINCLKSEL    = 0x00000003;         // Select PLL Clock Output  
     280:	2103      	movs	r1, #3
     282:	6019      	str	r1, [r3, #0]
  MAINCLKUEN    = 0x01;               // Update MCLK Clock Source 
  MAINCLKUEN    = 0x00;               // Toggle Update Register   
     284:	2100      	movs	r1, #0
  while (!(SYSPLLCLKUEN & 0x01));     // Wait Until Updated       
  SYSPLLCTRL    = 0x00000023;
  PDRUNCFG     &= ~(1 << 7);          // Power-up SYSPLL          
  while (!(SYSPLLSTAT & 0x01));       // Wait Until PLL Locked    
  MAINCLKSEL    = 0x00000003;         // Select PLL Clock Output  
  MAINCLKUEN    = 0x01;               // Update MCLK Clock Source 
     286:	6002      	str	r2, [r0, #0]
  MAINCLKUEN    = 0x00;               // Toggle Update Register   
     288:	6001      	str	r1, [r0, #0]
  MAINCLKUEN    = 0x01;
     28a:	6002      	str	r2, [r0, #0]
  while (!(MAINCLKUEN & 0x01));       // Wait Until Updated       
     28c:	6803      	ldr	r3, [r0, #0]
     28e:	2201      	movs	r2, #1
     290:	4213      	tst	r3, r2
     292:	d0fb      	beq.n	28c <_Z4initv+0x58>
  
  //  enable clocks on advanced high-performance bus
  SYSAHBCLKCTRL = 0x3FFFF;
     294:	4811      	ldr	r0, [pc, #68]	; (2dc <_Z4initv+0xa8>)
     296:	4912      	ldr	r1, [pc, #72]	; (2e0 <_Z4initv+0xac>)

  //  configure timers
  //  the concept here is to run the TMR16B0 at 1 Mhz (tick per microsecond) 
  //  and run the ISR ever millisecond.
  TMR16B0PR     = 47;                  // divide the 48 Mhz clock by 48
     298:	4b12      	ldr	r3, [pc, #72]	; (2e4 <_Z4initv+0xb0>)
  MAINCLKUEN    = 0x00;               // Toggle Update Register   
  MAINCLKUEN    = 0x01;
  while (!(MAINCLKUEN & 0x01));       // Wait Until Updated       
  
  //  enable clocks on advanced high-performance bus
  SYSAHBCLKCTRL = 0x3FFFF;
     29a:	6008      	str	r0, [r1, #0]

  //  configure timers
  //  the concept here is to run the TMR16B0 at 1 Mhz (tick per microsecond) 
  //  and run the ISR ever millisecond.
  TMR16B0PR     = 47;                  // divide the 48 Mhz clock by 48
     29c:	202f      	movs	r0, #47	; 0x2f
     29e:	6018      	str	r0, [r3, #0]
  TMR16B0MCR    = 3;                   // reset and interrupt on match
     2a0:	4811      	ldr	r0, [pc, #68]	; (2e8 <_Z4initv+0xb4>)
     2a2:	2103      	movs	r1, #3
     2a4:	6001      	str	r1, [r0, #0]
  TMR16B0MR0    = 1000;                // matching on 1000
     2a6:	23fa      	movs	r3, #250	; 0xfa
     2a8:	4810      	ldr	r0, [pc, #64]	; (2ec <_Z4initv+0xb8>)
     2aa:	0099      	lsls	r1, r3, #2
  ISER          = 0x10000;             // enable timer0 interrupt
     2ac:	2380      	movs	r3, #128	; 0x80
  //  configure timers
  //  the concept here is to run the TMR16B0 at 1 Mhz (tick per microsecond) 
  //  and run the ISR ever millisecond.
  TMR16B0PR     = 47;                  // divide the 48 Mhz clock by 48
  TMR16B0MCR    = 3;                   // reset and interrupt on match
  TMR16B0MR0    = 1000;                // matching on 1000
     2ae:	6001      	str	r1, [r0, #0]
  ISER          = 0x10000;             // enable timer0 interrupt
     2b0:	0259      	lsls	r1, r3, #9
     2b2:	480f      	ldr	r0, [pc, #60]	; (2f0 <_Z4initv+0xbc>)
  TMR16B0TCR    = 0x1;                 // enable timer
     2b4:	4b0f      	ldr	r3, [pc, #60]	; (2f4 <_Z4initv+0xc0>)
  //  the concept here is to run the TMR16B0 at 1 Mhz (tick per microsecond) 
  //  and run the ISR ever millisecond.
  TMR16B0PR     = 47;                  // divide the 48 Mhz clock by 48
  TMR16B0MCR    = 3;                   // reset and interrupt on match
  TMR16B0MR0    = 1000;                // matching on 1000
  ISER          = 0x10000;             // enable timer0 interrupt
     2b6:	6001      	str	r1, [r0, #0]
  TMR16B0TCR    = 0x1;                 // enable timer
     2b8:	601a      	str	r2, [r3, #0]

}
     2ba:	4770      	bx	lr
     2bc:	40048238 	.word	0x40048238
     2c0:	40048020 	.word	0x40048020
     2c4:	40048040 	.word	0x40048040
     2c8:	40048044 	.word	0x40048044
     2cc:	40048008 	.word	0x40048008
     2d0:	4004800c 	.word	0x4004800c
     2d4:	40048070 	.word	0x40048070
     2d8:	40048074 	.word	0x40048074
     2dc:	0003ffff 	.word	0x0003ffff
     2e0:	40048080 	.word	0x40048080
     2e4:	4000c00c 	.word	0x4000c00c
     2e8:	4000c014 	.word	0x4000c014
     2ec:	4000c018 	.word	0x4000c018
     2f0:	e000e100 	.word	0xe000e100
     2f4:	4000c004 	.word	0x4000c004

000002f8 <_Z8mainmenuv>:
    }
  
}

void mainmenu()
{
     2f8:	b510      	push	{r4, lr}
  Serial.println("Main Menu - Restrictor Plate v0.1");
     2fa:	4c0f      	ldr	r4, [pc, #60]	; (338 <_Z8mainmenuv+0x40>)
     2fc:	490f      	ldr	r1, [pc, #60]	; (33c <_Z8mainmenuv+0x44>)
     2fe:	1c20      	adds	r0, r4, #0
     300:	f000 fbd2 	bl	aa8 <_ZN5Print7printlnEPKc>
  Serial.println("1.  LED ON");
     304:	1c20      	adds	r0, r4, #0
     306:	490e      	ldr	r1, [pc, #56]	; (340 <_Z8mainmenuv+0x48>)
     308:	f000 fbce 	bl	aa8 <_ZN5Print7printlnEPKc>
  Serial.println("2.  LED OFF");
     30c:	1c20      	adds	r0, r4, #0
     30e:	490d      	ldr	r1, [pc, #52]	; (344 <_Z8mainmenuv+0x4c>)
     310:	f000 fbca 	bl	aa8 <_ZN5Print7printlnEPKc>
  Serial.println("3.  MPU6050 WHO_AM_I");
     314:	1c20      	adds	r0, r4, #0
     316:	490c      	ldr	r1, [pc, #48]	; (348 <_Z8mainmenuv+0x50>)
     318:	f000 fbc6 	bl	aa8 <_ZN5Print7printlnEPKc>
  Serial.println("4.  Clear sleep");
     31c:	1c20      	adds	r0, r4, #0
     31e:	490b      	ldr	r1, [pc, #44]	; (34c <_Z8mainmenuv+0x54>)
     320:	f000 fbc2 	bl	aa8 <_ZN5Print7printlnEPKc>
  Serial.println("5.  Read X");
     324:	1c20      	adds	r0, r4, #0
     326:	490a      	ldr	r1, [pc, #40]	; (350 <_Z8mainmenuv+0x58>)
     328:	f000 fbbe 	bl	aa8 <_ZN5Print7printlnEPKc>
  Serial.print("==> ");
     32c:	1c20      	adds	r0, r4, #0
     32e:	4909      	ldr	r1, [pc, #36]	; (354 <_Z8mainmenuv+0x5c>)
     330:	f000 fba5 	bl	a7e <_ZN5Print5printEPKc>
}
     334:	bd10      	pop	{r4, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	100008b4 	.word	0x100008b4
     33c:	000015bc 	.word	0x000015bc
     340:	000015de 	.word	0x000015de
     344:	000015e9 	.word	0x000015e9
     348:	000015f5 	.word	0x000015f5
     34c:	0000160a 	.word	0x0000160a
     350:	0000161a 	.word	0x0000161a
     354:	00001625 	.word	0x00001625

00000358 <_Z5setupv>:
void mainmenu();

void setup()
{
  foo_double = 1.23456;
  foo_double = foo_double * 1.2;
     358:	490d      	ldr	r1, [pc, #52]	; (390 <_Z5setupv+0x38>)
#define MPU6050_ACCEL_XOUT_L     (uint8_t)0x3C

void mainmenu();

void setup()
{
     35a:	b508      	push	{r3, lr}
  foo_double = 1.23456;
  foo_double = foo_double * 1.2;
     35c:	4b0b      	ldr	r3, [pc, #44]	; (38c <_Z5setupv+0x34>)
     35e:	4a0a      	ldr	r2, [pc, #40]	; (388 <_Z5setupv+0x30>)
     360:	600a      	str	r2, [r1, #0]
     362:	604b      	str	r3, [r1, #4]
  Serial.begin(9600);
     364:	2396      	movs	r3, #150	; 0x96
     366:	0199      	lsls	r1, r3, #6
     368:	480a      	ldr	r0, [pc, #40]	; (394 <_Z5setupv+0x3c>)
     36a:	f000 f98d 	bl	688 <_ZN14HardwareSerial5beginEm>
  Wire.begin();
     36e:	480a      	ldr	r0, [pc, #40]	; (398 <_Z5setupv+0x40>)
     370:	f000 fb12 	bl	998 <_ZN7TwoWire5beginEv>
  pinMode(LEDPIN, OUTPUT);
     374:	200e      	movs	r0, #14
     376:	2101      	movs	r1, #1
     378:	f7ff fef4 	bl	164 <_Z7pinModehh>
  mainmenu();
     37c:	f7ff ffbc 	bl	2f8 <_Z8mainmenuv>
}
     380:	bd08      	pop	{r3, pc}
     382:	46c0      	nop			; (mov r8, r8)
     384:	46c0      	nop			; (mov r8, r8)
     386:	46c0      	nop			; (mov r8, r8)
     388:	fbdf0910 	.word	0xfbdf0910
     38c:	3ff7b41b 	.word	0x3ff7b41b
     390:	10000868 	.word	0x10000868
     394:	100008b4 	.word	0x100008b4
     398:	10000a58 	.word	0x10000a58
     39c:	46c0      	nop			; (mov r8, r8)
     39e:	46c0      	nop			; (mov r8, r8)

000003a0 <_Z4loopv>:

void loop()
{
     3a0:	b570      	push	{r4, r5, r6, lr}

  if(Serial.available())
     3a2:	4c43      	ldr	r4, [pc, #268]	; (4b0 <__main_stack_size+0xb0>)
     3a4:	1c20      	adds	r0, r4, #0
     3a6:	f000 f895 	bl	4d4 <_ZN14HardwareSerial9availableEv>
     3aa:	2800      	cmp	r0, #0
     3ac:	d07f      	beq.n	4ae <__main_stack_size+0xae>
    {
      ch = Serial.read();
     3ae:	1c20      	adds	r0, r4, #0
     3b0:	f000 f8ae 	bl	510 <_ZN14HardwareSerial4readEv>
     3b4:	4d3f      	ldr	r5, [pc, #252]	; (4b4 <__main_stack_size+0xb4>)
     3b6:	b2c1      	uxtb	r1, r0

      Serial.println(ch);
     3b8:	1c20      	adds	r0, r4, #0
void loop()
{

  if(Serial.available())
    {
      ch = Serial.read();
     3ba:	7029      	strb	r1, [r5, #0]

      Serial.println(ch);
     3bc:	f000 fb7e 	bl	abc <_ZN5Print7printlnEc>

      switch (ch)
     3c0:	7828      	ldrb	r0, [r5, #0]
     3c2:	3831      	subs	r0, #49	; 0x31
     3c4:	2804      	cmp	r0, #4
     3c6:	d870      	bhi.n	4aa <__main_stack_size+0xaa>
     3c8:	f001 f86c 	bl	14a4 <__gnu_thumb1_case_uqi>
     3cc:	371d0f03 	.word	0x371d0f03
     3d0:	4c          	.byte	0x4c
     3d1:	00          	.byte	0x00
	{
	case '1':
	  Serial.println("LED ON");
     3d2:	4939      	ldr	r1, [pc, #228]	; (4b8 <__main_stack_size+0xb8>)
     3d4:	1c20      	adds	r0, r4, #0
     3d6:	f000 fb67 	bl	aa8 <_ZN5Print7printlnEPKc>
	  digitalWrite(LEDPIN, HIGH);
     3da:	200e      	movs	r0, #14
     3dc:	2101      	movs	r1, #1
     3de:	f7ff feef 	bl	1c0 <_Z12digitalWritehh>
	  Serial.print(10, HEX);
     3e2:	1c20      	adds	r0, r4, #0
     3e4:	210a      	movs	r1, #10
     3e6:	2210      	movs	r2, #16
     3e8:	e00a      	b.n	400 <__main_stack_size>
	  break;
	case '2':
	  Serial.println("LED OFF");
     3ea:	4934      	ldr	r1, [pc, #208]	; (4bc <__main_stack_size+0xbc>)
     3ec:	1c20      	adds	r0, r4, #0
     3ee:	f000 fb5b 	bl	aa8 <_ZN5Print7printlnEPKc>
	  digitalWrite(LEDPIN, LOW);
     3f2:	200e      	movs	r0, #14
     3f4:	2100      	movs	r1, #0
     3f6:	f7ff fee3 	bl	1c0 <_Z12digitalWritehh>
	  Serial.print(10, DEC);
     3fa:	210a      	movs	r1, #10
     3fc:	1c20      	adds	r0, r4, #0
     3fe:	1c0a      	adds	r2, r1, #0
     400:	f000 fbb7 	bl	b72 <_ZN5Print5printEii>
	  break;
     404:	e051      	b.n	4aa <__main_stack_size+0xaa>
	case '3':
	  Serial.println("MPU6050 WHO_AM_I");
     406:	1c20      	adds	r0, r4, #0
     408:	492d      	ldr	r1, [pc, #180]	; (4c0 <__main_stack_size+0xc0>)
     40a:	f000 fb4d 	bl	aa8 <_ZN5Print7printlnEPKc>
	  Wire.beginTransmission(MPU6050_ADDRESS);
     40e:	4d2d      	ldr	r5, [pc, #180]	; (4c4 <__main_stack_size+0xc4>)
     410:	21d0      	movs	r1, #208	; 0xd0
     412:	1c28      	adds	r0, r5, #0
     414:	f000 fae2 	bl	9dc <_ZN7TwoWire17beginTransmissionEh>
	  Wire.requestFrom(MPU6050_WHO_AM_I,1);
     418:	2175      	movs	r1, #117	; 0x75
     41a:	2201      	movs	r2, #1
     41c:	1c28      	adds	r0, r5, #0
     41e:	f000 fad5 	bl	9cc <_ZN7TwoWire11requestFromEii>
	  Wire.endTransmission();
     422:	1c28      	adds	r0, r5, #0
     424:	f000 faea 	bl	9fc <_ZN7TwoWire15endTransmissionEv>
	  Serial.print(Wire.read());
     428:	1c28      	adds	r0, r5, #0
     42a:	f000 fafb 	bl	a24 <_ZN7TwoWire4readEv>
     42e:	220a      	movs	r2, #10
     430:	1c01      	adds	r1, r0, #0
     432:	1c20      	adds	r0, r4, #0
     434:	f000 fb7b 	bl	b2e <_ZN5Print5printEhi>
	  break;
     438:	e037      	b.n	4aa <__main_stack_size+0xaa>
	case '4':
	  Serial.println("Clear sleep");
     43a:	1c20      	adds	r0, r4, #0
     43c:	4922      	ldr	r1, [pc, #136]	; (4c8 <__main_stack_size+0xc8>)
     43e:	f000 fb33 	bl	aa8 <_ZN5Print7printlnEPKc>
	  Wire.beginTransmission(MPU6050_ADDRESS);
     442:	4e20      	ldr	r6, [pc, #128]	; (4c4 <__main_stack_size+0xc4>)
     444:	21d0      	movs	r1, #208	; 0xd0
     446:	1c30      	adds	r0, r6, #0
     448:	f000 fac8 	bl	9dc <_ZN7TwoWire17beginTransmissionEh>
	  Wire.write(MPU6050_PWR_MGMT_1);
     44c:	1c30      	adds	r0, r6, #0
     44e:	216b      	movs	r1, #107	; 0x6b
     450:	f000 fada 	bl	a08 <_ZN7TwoWire5writeEh>
	  Wire.write(0);
     454:	1c30      	adds	r0, r6, #0
     456:	2100      	movs	r1, #0
     458:	f000 fad6 	bl	a08 <_ZN7TwoWire5writeEh>
	  Wire.endTransmission();
     45c:	1c30      	adds	r0, r6, #0
     45e:	f000 facd 	bl	9fc <_ZN7TwoWire15endTransmissionEv>
	  break;
     462:	e022      	b.n	4aa <__main_stack_size+0xaa>
	case '5':
	  Serial.println("MPU6050 X-axis");
     464:	4919      	ldr	r1, [pc, #100]	; (4cc <__main_stack_size+0xcc>)
     466:	1c20      	adds	r0, r4, #0
     468:	f000 fb1e 	bl	aa8 <_ZN5Print7printlnEPKc>
	  Wire.beginTransmission(MPU6050_ADDRESS);
     46c:	4d15      	ldr	r5, [pc, #84]	; (4c4 <__main_stack_size+0xc4>)
     46e:	21d0      	movs	r1, #208	; 0xd0
     470:	1c28      	adds	r0, r5, #0
     472:	f000 fab3 	bl	9dc <_ZN7TwoWire17beginTransmissionEh>
	  Wire.requestFrom(MPU6050_ACCEL_XOUT_H,2);
     476:	2202      	movs	r2, #2
     478:	213b      	movs	r1, #59	; 0x3b
     47a:	1c28      	adds	r0, r5, #0
     47c:	f000 faa6 	bl	9cc <_ZN7TwoWire11requestFromEii>
	  Wire.endTransmission();
     480:	1c28      	adds	r0, r5, #0
     482:	f000 fabb 	bl	9fc <_ZN7TwoWire15endTransmissionEv>
	  Serial.print("MPU6050 X axis: 0x");
     486:	4912      	ldr	r1, [pc, #72]	; (4d0 <__main_stack_size+0xd0>)
     488:	1c20      	adds	r0, r4, #0
     48a:	f000 faf8 	bl	a7e <_ZN5Print5printEPKc>
	  Serial.println((int16_t)((Wire.read()) + (Wire.read()<<8)), HEX);
     48e:	1c28      	adds	r0, r5, #0
     490:	f000 fac8 	bl	a24 <_ZN7TwoWire4readEv>
     494:	1c06      	adds	r6, r0, #0
     496:	1c28      	adds	r0, r5, #0
     498:	f000 fac4 	bl	a24 <_ZN7TwoWire4readEv>
     49c:	0201      	lsls	r1, r0, #8
     49e:	1870      	adds	r0, r6, r1
     4a0:	b201      	sxth	r1, r0
     4a2:	2210      	movs	r2, #16
     4a4:	1c20      	adds	r0, r4, #0
     4a6:	f000 fb68 	bl	b7a <_ZN5Print7printlnEii>
	  break;
	default:
	  break;
	}
      mainmenu();
     4aa:	f7ff ff25 	bl	2f8 <_Z8mainmenuv>
    }
  
}
     4ae:	bd70      	pop	{r4, r5, r6, pc}
     4b0:	100008b4 	.word	0x100008b4
     4b4:	10000870 	.word	0x10000870
     4b8:	000015e2 	.word	0x000015e2
     4bc:	000015ed 	.word	0x000015ed
     4c0:	000015f9 	.word	0x000015f9
     4c4:	10000a58 	.word	0x10000a58
     4c8:	0000160e 	.word	0x0000160e
     4cc:	0000162a 	.word	0x0000162a
     4d0:	00001639 	.word	0x00001639

000004d4 <_ZN14HardwareSerial9availableEv>:

}

int HardwareSerial::available(void)
{
  return ((uart_rx_extract_idx-uart_rx_insert_idx)!=0);
     4d4:	4b03      	ldr	r3, [pc, #12]	; (4e4 <_ZN14HardwareSerial9availableEv+0x10>)
     4d6:	4904      	ldr	r1, [pc, #16]	; (4e8 <_ZN14HardwareSerial9availableEv+0x14>)
     4d8:	7818      	ldrb	r0, [r3, #0]
     4da:	780a      	ldrb	r2, [r1, #0]
     4dc:	1a80      	subs	r0, r0, r2
     4de:	1e43      	subs	r3, r0, #1
     4e0:	4198      	sbcs	r0, r3
}
     4e2:	4770      	bx	lr
     4e4:	100008c4 	.word	0x100008c4
     4e8:	100008c6 	.word	0x100008c6

000004ec <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (uart_rx_extract_idx==uart_rx_insert_idx) {
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <_ZN14HardwareSerial4peekEv+0x18>)
     4ee:	4a06      	ldr	r2, [pc, #24]	; (508 <_ZN14HardwareSerial4peekEv+0x1c>)
     4f0:	7818      	ldrb	r0, [r3, #0]
     4f2:	7811      	ldrb	r1, [r2, #0]
     4f4:	4281      	cmp	r1, r0
     4f6:	d002      	beq.n	4fe <_ZN14HardwareSerial4peekEv+0x12>
    return -1;
  } else {
    return uart_rx_buffer[uart_rx_extract_idx];
     4f8:	4b04      	ldr	r3, [pc, #16]	; (50c <_ZN14HardwareSerial4peekEv+0x20>)
     4fa:	5c18      	ldrb	r0, [r3, r0]
     4fc:	e001      	b.n	502 <_ZN14HardwareSerial4peekEv+0x16>
}

int HardwareSerial::peek(void)
{
  if (uart_rx_extract_idx==uart_rx_insert_idx) {
    return -1;
     4fe:	2001      	movs	r0, #1
     500:	4240      	negs	r0, r0
  } else {
    return uart_rx_buffer[uart_rx_extract_idx];
  }
}
     502:	4770      	bx	lr
     504:	100008c4 	.word	0x100008c4
     508:	100008c6 	.word	0x100008c6
     50c:	10000871 	.word	0x10000871

00000510 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  uint8_t ch;
  
  if (uart_rx_insert_idx == uart_rx_extract_idx) // check if character is available
     510:	4a07      	ldr	r2, [pc, #28]	; (530 <_ZN14HardwareSerial4readEv+0x20>)
     512:	4908      	ldr	r1, [pc, #32]	; (534 <_ZN14HardwareSerial4readEv+0x24>)
     514:	7813      	ldrb	r3, [r2, #0]
     516:	7808      	ldrb	r0, [r1, #0]
     518:	4298      	cmp	r0, r3
     51a:	d006      	beq.n	52a <_ZN14HardwareSerial4readEv+0x1a>
    return -1;

  ch = uart_rx_buffer[uart_rx_extract_idx++]; // get character, bump pointer
     51c:	4906      	ldr	r1, [pc, #24]	; (538 <_ZN14HardwareSerial4readEv+0x28>)
     51e:	5cc8      	ldrb	r0, [r1, r3]
     520:	3301      	adds	r3, #1
  uart_rx_extract_idx %= UART_RX_BUFFER_LENGTH; // limit the pointer
     522:	213f      	movs	r1, #63	; 0x3f
     524:	400b      	ands	r3, r1
     526:	7013      	strb	r3, [r2, #0]
  return ch;
     528:	e001      	b.n	52e <_ZN14HardwareSerial4readEv+0x1e>
int HardwareSerial::read(void)
{
  uint8_t ch;
  
  if (uart_rx_insert_idx == uart_rx_extract_idx) // check if character is available
    return -1;
     52a:	2201      	movs	r2, #1
     52c:	4250      	negs	r0, r2

  ch = uart_rx_buffer[uart_rx_extract_idx++]; // get character, bump pointer
  uart_rx_extract_idx %= UART_RX_BUFFER_LENGTH; // limit the pointer
  return ch;
}
     52e:	4770      	bx	lr
     530:	100008c4 	.word	0x100008c4
     534:	100008c6 	.word	0x100008c6
     538:	10000871 	.word	0x10000871

0000053c <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{

}
     53c:	4770      	bx	lr
	...

00000540 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t ch)
{
     540:	b570      	push	{r4, r5, r6, lr}
  uint16_t temp;

  temp = (uart_tx_insert_idx + 1) % UART_TX_BUFFER_LENGTH;
     542:	4811      	ldr	r0, [pc, #68]	; (588 <_ZN14HardwareSerial5writeEh+0x48>)

  if (temp == uart_tx_extract_idx)
     544:	4b11      	ldr	r3, [pc, #68]	; (58c <_ZN14HardwareSerial5writeEh+0x4c>)

size_t HardwareSerial::write(uint8_t ch)
{
  uint16_t temp;

  temp = (uart_tx_insert_idx + 1) % UART_TX_BUFFER_LENGTH;
     546:	7805      	ldrb	r5, [r0, #0]

  if (temp == uart_tx_extract_idx)
     548:	781a      	ldrb	r2, [r3, #0]

size_t HardwareSerial::write(uint8_t ch)
{
  uint16_t temp;

  temp = (uart_tx_insert_idx + 1) % UART_TX_BUFFER_LENGTH;
     54a:	1c6c      	adds	r4, r5, #1
     54c:	b2e4      	uxtb	r4, r4

  if (temp == uart_tx_extract_idx)
     54e:	42a2      	cmp	r2, r4
     550:	d017      	beq.n	582 <_ZN14HardwareSerial5writeEh+0x42>
    return -1;                          // no room
  
  //NVIC_DisableIRQ(UART_IRQn);
  bitClear(ISER,21);
     552:	4b0f      	ldr	r3, [pc, #60]	; (590 <_ZN14HardwareSerial5writeEh+0x50>)
     554:	4a0f      	ldr	r2, [pc, #60]	; (594 <_ZN14HardwareSerial5writeEh+0x54>)
     556:	681e      	ldr	r6, [r3, #0]
     558:	4032      	ands	r2, r6
     55a:	601a      	str	r2, [r3, #0]

  // check if in process of sending data
  if (uart_tx_running)
     55c:	4a0e      	ldr	r2, [pc, #56]	; (598 <_ZN14HardwareSerial5writeEh+0x58>)
     55e:	7816      	ldrb	r6, [r2, #0]
     560:	2e00      	cmp	r6, #0
     562:	d003      	beq.n	56c <_ZN14HardwareSerial5writeEh+0x2c>
    {
      // add to queue
      uart_tx_buffer[uart_tx_insert_idx] = (uint8_t)ch;
     564:	4a0d      	ldr	r2, [pc, #52]	; (59c <_ZN14HardwareSerial5writeEh+0x5c>)
      uart_tx_insert_idx = temp;
     566:	7004      	strb	r4, [r0, #0]

  // check if in process of sending data
  if (uart_tx_running)
    {
      // add to queue
      uart_tx_buffer[uart_tx_insert_idx] = (uint8_t)ch;
     568:	5551      	strb	r1, [r2, r5]
     56a:	e003      	b.n	574 <_ZN14HardwareSerial5writeEh+0x34>
    }
  else
    {
      // set running flag and write to output register
      uart_tx_running = 1;
      U0THR = (uint8_t)ch;
     56c:	4d0c      	ldr	r5, [pc, #48]	; (5a0 <_ZN14HardwareSerial5writeEh+0x60>)
      uart_tx_insert_idx = temp;
    }
  else
    {
      // set running flag and write to output register
      uart_tx_running = 1;
     56e:	2001      	movs	r0, #1
     570:	7010      	strb	r0, [r2, #0]
      U0THR = (uint8_t)ch;
     572:	6029      	str	r1, [r5, #0]
    }

  bitSet(ISER,21);
     574:	681c      	ldr	r4, [r3, #0]
     576:	2680      	movs	r6, #128	; 0x80
     578:	03b0      	lsls	r0, r6, #14
     57a:	4320      	orrs	r0, r4
     57c:	6018      	str	r0, [r3, #0]

  return (uint8_t)ch;
     57e:	1c08      	adds	r0, r1, #0
     580:	e001      	b.n	586 <_ZN14HardwareSerial5writeEh+0x46>
  uint16_t temp;

  temp = (uart_tx_insert_idx + 1) % UART_TX_BUFFER_LENGTH;

  if (temp == uart_tx_extract_idx)
    return -1;                          // no room
     582:	2101      	movs	r1, #1
     584:	4248      	negs	r0, r1
    }

  bitSet(ISER,21);

  return (uint8_t)ch;
}
     586:	bd70      	pop	{r4, r5, r6, pc}
     588:	100008b2 	.word	0x100008b2
     58c:	100008c8 	.word	0x100008c8
     590:	e000e100 	.word	0xe000e100
     594:	ffdfffff 	.word	0xffdfffff
     598:	100008c5 	.word	0x100008c5
     59c:	100008c9 	.word	0x100008c9
     5a0:	40008000 	.word	0x40008000

000005a4 <_Z15UART_IRQHandlerv>:
uint8_t uart_tx_insert_idx, uart_tx_extract_idx;
uint8_t uart_tx_running;
#define uart_data_available() ((uart_rx_extract_idx-uart_rx_insert_idx)!=0)

//  UART handler
void UART_IRQHandler(void) {
     5a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
          if (temp != uart_rx_extract_idx)			  
     5a6:	4b26      	ldr	r3, [pc, #152]	; (640 <_Z15UART_IRQHandlerv+0x9c>)
     5a8:	4c26      	ldr	r4, [pc, #152]	; (644 <_Z15UART_IRQHandlerv+0xa0>)
	    uart_rx_insert_idx = temp;                            
	} while (U0LSR & 0x01);
	break;
      case (1 << 1):               		    // THR Empty
	while (U0LSR & 0x20) {
	  if (uart_tx_insert_idx != uart_tx_extract_idx) {	   
     5aa:	4927      	ldr	r1, [pc, #156]	; (648 <_Z15UART_IRQHandlerv+0xa4>)
     5ac:	4a27      	ldr	r2, [pc, #156]	; (64c <_Z15UART_IRQHandlerv+0xa8>)
     5ae:	4d28      	ldr	r5, [pc, #160]	; (650 <_Z15UART_IRQHandlerv+0xac>)
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
          if (temp != uart_rx_extract_idx)			  
     5b0:	7818      	ldrb	r0, [r3, #0]
	    uart_rx_insert_idx = temp;                            
	} while (U0LSR & 0x01);
	break;
      case (1 << 1):               		    // THR Empty
	while (U0LSR & 0x20) {
	  if (uart_tx_insert_idx != uart_tx_extract_idx) {	   
     5b2:	780e      	ldrb	r6, [r1, #0]
     5b4:	7823      	ldrb	r3, [r4, #0]
     5b6:	7812      	ldrb	r2, [r2, #0]
     5b8:	782c      	ldrb	r4, [r5, #0]
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
          if (temp != uart_rx_extract_idx)			  
     5ba:	9001      	str	r0, [sp, #4]

//  UART handler
void UART_IRQHandler(void) {
  static volatile uint8_t iid, temp;

  while (((iid = U0IIR) & 0x01) == 0) {            // Service all interrupts
     5bc:	4f25      	ldr	r7, [pc, #148]	; (654 <_Z15UART_IRQHandlerv+0xb0>)
     5be:	4926      	ldr	r1, [pc, #152]	; (658 <_Z15UART_IRQHandlerv+0xb4>)
     5c0:	6838      	ldr	r0, [r7, #0]
     5c2:	b2c5      	uxtb	r5, r0
     5c4:	700d      	strb	r5, [r1, #0]
     5c6:	07c5      	lsls	r5, r0, #31
     5c8:	d432      	bmi.n	630 <_Z15UART_IRQHandlerv+0x8c>
    switch (iid & 0x0E) {	                    
     5ca:	7808      	ldrb	r0, [r1, #0]
     5cc:	270e      	movs	r7, #14
     5ce:	4038      	ands	r0, r7
     5d0:	3802      	subs	r0, #2
     5d2:	4922      	ldr	r1, [pc, #136]	; (65c <_Z15UART_IRQHandlerv+0xb8>)
     5d4:	280a      	cmp	r0, #10
     5d6:	d827      	bhi.n	628 <_Z15UART_IRQHandlerv+0x84>
     5d8:	f000 ff64 	bl	14a4 <__gnu_thumb1_case_uqi>
     5dc:	26092618 	.word	0x26092618
     5e0:	26262628 	.word	0x26262628
     5e4:	2626      	.short	0x2626
     5e6:	09          	.byte	0x09
     5e7:	00          	.byte	0x00
      case (3 << 1):                                // Receive Line Status
	U0LSR;                                     // Read LSR to clear
	break;
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
     5e8:	6808      	ldr	r0, [r1, #0]
     5ea:	07c7      	lsls	r7, r0, #31
     5ec:	d5e6      	bpl.n	5bc <_Z15UART_IRQHandlerv+0x18>
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
     5ee:	203f      	movs	r0, #63	; 0x3f
     5f0:	1c55      	adds	r5, r2, #1
     5f2:	4005      	ands	r5, r0
     5f4:	481a      	ldr	r0, [pc, #104]	; (660 <_Z15UART_IRQHandlerv+0xbc>)
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
     5f6:	4f1b      	ldr	r7, [pc, #108]	; (664 <_Z15UART_IRQHandlerv+0xc0>)
	U0LSR;                                     // Read LSR to clear
	break;
      case (6 << 1):             	            // Character Timeout
      case (2 << 1):                	            // Receive Data Available
	do {
	  temp = (uart_rx_insert_idx + 1) % UART_RX_BUFFER_LENGTH;
     5f8:	7005      	strb	r5, [r0, #0]
          uart_rx_buffer[uart_rx_insert_idx] = U0RBR;
     5fa:	683d      	ldr	r5, [r7, #0]
     5fc:	4f1a      	ldr	r7, [pc, #104]	; (668 <_Z15UART_IRQHandlerv+0xc4>)
     5fe:	54bd      	strb	r5, [r7, r2]
          if (temp != uart_rx_extract_idx)			  
     600:	7807      	ldrb	r7, [r0, #0]
     602:	9d01      	ldr	r5, [sp, #4]
     604:	42af      	cmp	r7, r5
     606:	d0ef      	beq.n	5e8 <_Z15UART_IRQHandlerv+0x44>
	    uart_rx_insert_idx = temp;                            
     608:	7802      	ldrb	r2, [r0, #0]
     60a:	e7ed      	b.n	5e8 <_Z15UART_IRQHandlerv+0x44>
	} while (U0LSR & 0x01);
	break;
      case (1 << 1):               		    // THR Empty
	while (U0LSR & 0x20) {
     60c:	6809      	ldr	r1, [r1, #0]
     60e:	0688      	lsls	r0, r1, #26
     610:	d5d4      	bpl.n	5bc <_Z15UART_IRQHandlerv+0x18>
	  if (uart_tx_insert_idx != uart_tx_extract_idx) {	   
     612:	429e      	cmp	r6, r3
     614:	d101      	bne.n	61a <_Z15UART_IRQHandlerv+0x76>
	    U0THR = uart_tx_buffer[uart_tx_extract_idx++];
	    uart_tx_extract_idx %= UART_TX_BUFFER_LENGTH;
	  } else
	    uart_tx_running = 0;       				   
     616:	2400      	movs	r4, #0
     618:	e7d0      	b.n	5bc <_Z15UART_IRQHandlerv+0x18>
	} while (U0LSR & 0x01);
	break;
      case (1 << 1):               		    // THR Empty
	while (U0LSR & 0x20) {
	  if (uart_tx_insert_idx != uart_tx_extract_idx) {	   
	    U0THR = uart_tx_buffer[uart_tx_extract_idx++];
     61a:	4f14      	ldr	r7, [pc, #80]	; (66c <_Z15UART_IRQHandlerv+0xc8>)
     61c:	4811      	ldr	r0, [pc, #68]	; (664 <_Z15UART_IRQHandlerv+0xc0>)
     61e:	5cfd      	ldrb	r5, [r7, r3]
     620:	3301      	adds	r3, #1
     622:	6005      	str	r5, [r0, #0]
     624:	b2db      	uxtb	r3, r3
     626:	e7c9      	b.n	5bc <_Z15UART_IRQHandlerv+0x18>
	    uart_tx_running = 0;       				   
	  break;
        }
	break;
      default:           			    // Unknown Interrupt
        U0LSR;
     628:	6809      	ldr	r1, [r1, #0]
	U0RBR;
     62a:	490e      	ldr	r1, [pc, #56]	; (664 <_Z15UART_IRQHandlerv+0xc0>)
     62c:	6809      	ldr	r1, [r1, #0]
	break;
     62e:	e7c5      	b.n	5bc <_Z15UART_IRQHandlerv+0x18>
     630:	4e06      	ldr	r6, [pc, #24]	; (64c <_Z15UART_IRQHandlerv+0xa8>)
    }
  }
}
     632:	7032      	strb	r2, [r6, #0]
     634:	4a03      	ldr	r2, [pc, #12]	; (644 <_Z15UART_IRQHandlerv+0xa0>)
     636:	7013      	strb	r3, [r2, #0]
     638:	4b05      	ldr	r3, [pc, #20]	; (650 <_Z15UART_IRQHandlerv+0xac>)
     63a:	701c      	strb	r4, [r3, #0]
     63c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	100008c4 	.word	0x100008c4
     644:	100008c8 	.word	0x100008c8
     648:	100008b2 	.word	0x100008b2
     64c:	100008c6 	.word	0x100008c6
     650:	100008c5 	.word	0x100008c5
     654:	40008008 	.word	0x40008008
     658:	100008c7 	.word	0x100008c7
     65c:	40008014 	.word	0x40008014
     660:	100008b1 	.word	0x100008b1
     664:	40008000 	.word	0x40008000
     668:	10000871 	.word	0x10000871
     66c:	100008c9 	.word	0x100008c9

00000670 <_ZN14HardwareSerialC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     670:	2300      	movs	r3, #0
     672:	6043      	str	r3, [r0, #4]

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial()
     674:	4b03      	ldr	r3, [pc, #12]	; (684 <_ZN14HardwareSerialC1Ev+0x14>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     676:	21fa      	movs	r1, #250	; 0xfa
     678:	008a      	lsls	r2, r1, #2
     67a:	3308      	adds	r3, #8
     67c:	6082      	str	r2, [r0, #8]
     67e:	6003      	str	r3, [r0, #0]
{

}
     680:	4770      	bx	lr
     682:	46c0      	nop			; (mov r8, r8)
     684:	00001650 	.word	0x00001650

00000688 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
  IOCON_PIO1_6 = 0xD1;  // UART RXD
     688:	4a1c      	ldr	r2, [pc, #112]	; (6fc <_ZN14HardwareSerial5beginEm+0x74>)
  IOCON_PIO1_7 = 0xD1;  // UART TXD
     68a:	481d      	ldr	r0, [pc, #116]	; (700 <_ZN14HardwareSerial5beginEm+0x78>)

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
  IOCON_PIO1_6 = 0xD1;  // UART RXD
     68c:	23d1      	movs	r3, #209	; 0xd1
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     68e:	b510      	push	{r4, lr}
  IOCON_PIO1_6 = 0xD1;  // UART RXD
     690:	6013      	str	r3, [r2, #0]
  IOCON_PIO1_7 = 0xD1;  // UART TXD
     692:	6003      	str	r3, [r0, #0]

  //  UART Setup -> Serial.begin()
  UARTCLKDIV = 0x1;
     694:	4b1b      	ldr	r3, [pc, #108]	; (704 <_ZN14HardwareSerial5beginEm+0x7c>)
     696:	2401      	movs	r4, #1
     698:	601c      	str	r4, [r3, #0]
  U0LCR = 0x83;             	 
     69a:	4c1b      	ldr	r4, [pc, #108]	; (708 <_ZN14HardwareSerial5beginEm+0x80>)
     69c:	2283      	movs	r2, #131	; 0x83
     69e:	6022      	str	r2, [r4, #0]
  U0DLM = (48000000 / 16 / baud ) / 256;
     6a0:	481a      	ldr	r0, [pc, #104]	; (70c <_ZN14HardwareSerial5beginEm+0x84>)
     6a2:	f000 ff09 	bl	14b8 <__aeabi_uidiv>
     6a6:	491a      	ldr	r1, [pc, #104]	; (710 <_ZN14HardwareSerial5beginEm+0x88>)
     6a8:	0a03      	lsrs	r3, r0, #8
     6aa:	600b      	str	r3, [r1, #0]
  U0DLL = (48000000 / 16 / baud ) % 256;
     6ac:	4b19      	ldr	r3, [pc, #100]	; (714 <_ZN14HardwareSerial5beginEm+0x8c>)
     6ae:	b2c0      	uxtb	r0, r0
     6b0:	6018      	str	r0, [r3, #0]
  U0LCR = 0x03;				
     6b2:	2203      	movs	r2, #3
  U0FCR = 0x07;				
     6b4:	4818      	ldr	r0, [pc, #96]	; (718 <_ZN14HardwareSerial5beginEm+0x90>)
  //  UART Setup -> Serial.begin()
  UARTCLKDIV = 0x1;
  U0LCR = 0x83;             	 
  U0DLM = (48000000 / 16 / baud ) / 256;
  U0DLL = (48000000 / 16 / baud ) % 256;
  U0LCR = 0x03;				
     6b6:	6022      	str	r2, [r4, #0]
  U0FCR = 0x07;				
     6b8:	2407      	movs	r4, #7
  U0LSR;				
     6ba:	4a18      	ldr	r2, [pc, #96]	; (71c <_ZN14HardwareSerial5beginEm+0x94>)
  UARTCLKDIV = 0x1;
  U0LCR = 0x83;             	 
  U0DLM = (48000000 / 16 / baud ) / 256;
  U0DLL = (48000000 / 16 / baud ) % 256;
  U0LCR = 0x03;				
  U0FCR = 0x07;				
     6bc:	6004      	str	r4, [r0, #0]
  U0LSR;				
     6be:	6810      	ldr	r0, [r2, #0]
     6c0:	1c1c      	adds	r4, r3, #0
  while (( U0LSR & 0x60) != 0x60 );	
     6c2:	6810      	ldr	r0, [r2, #0]
     6c4:	2360      	movs	r3, #96	; 0x60
     6c6:	4003      	ands	r3, r0
     6c8:	2b60      	cmp	r3, #96	; 0x60
     6ca:	d1fa      	bne.n	6c2 <_ZN14HardwareSerial5beginEm+0x3a>
  while ( U0LSR & 0x01 ) { U0RBR; }
     6cc:	6813      	ldr	r3, [r2, #0]
     6ce:	2001      	movs	r0, #1
     6d0:	4003      	ands	r3, r0
     6d2:	d001      	beq.n	6d8 <_ZN14HardwareSerial5beginEm+0x50>
     6d4:	6823      	ldr	r3, [r4, #0]
     6d6:	e7f9      	b.n	6cc <_ZN14HardwareSerial5beginEm+0x44>
  uart_tx_extract_idx = uart_tx_insert_idx = 0;
     6d8:	4a11      	ldr	r2, [pc, #68]	; (720 <_ZN14HardwareSerial5beginEm+0x98>)
     6da:	4c12      	ldr	r4, [pc, #72]	; (724 <_ZN14HardwareSerial5beginEm+0x9c>)
     6dc:	7013      	strb	r3, [r2, #0]
     6de:	7023      	strb	r3, [r4, #0]
  uart_rx_extract_idx = uart_rx_insert_idx = 0;
     6e0:	4811      	ldr	r0, [pc, #68]	; (728 <_ZN14HardwareSerial5beginEm+0xa0>)
     6e2:	4a12      	ldr	r2, [pc, #72]	; (72c <_ZN14HardwareSerial5beginEm+0xa4>)
  uart_tx_running = 0;
     6e4:	4c12      	ldr	r4, [pc, #72]	; (730 <_ZN14HardwareSerial5beginEm+0xa8>)
  U0FCR = 0x07;				
  U0LSR;				
  while (( U0LSR & 0x60) != 0x60 );	
  while ( U0LSR & 0x01 ) { U0RBR; }
  uart_tx_extract_idx = uart_tx_insert_idx = 0;
  uart_rx_extract_idx = uart_rx_insert_idx = 0;
     6e6:	7003      	strb	r3, [r0, #0]
     6e8:	7013      	strb	r3, [r2, #0]
  uart_tx_running = 0;
     6ea:	7023      	strb	r3, [r4, #0]
  ISER = 0x200000;
     6ec:	4a11      	ldr	r2, [pc, #68]	; (734 <_ZN14HardwareSerial5beginEm+0xac>)
     6ee:	2380      	movs	r3, #128	; 0x80
     6f0:	0398      	lsls	r0, r3, #14
  U0IER = 0x07;
     6f2:	2407      	movs	r4, #7
  while (( U0LSR & 0x60) != 0x60 );	
  while ( U0LSR & 0x01 ) { U0RBR; }
  uart_tx_extract_idx = uart_tx_insert_idx = 0;
  uart_rx_extract_idx = uart_rx_insert_idx = 0;
  uart_tx_running = 0;
  ISER = 0x200000;
     6f4:	6010      	str	r0, [r2, #0]
  U0IER = 0x07;
     6f6:	600c      	str	r4, [r1, #0]
}
     6f8:	bd10      	pop	{r4, pc}
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	400440a4 	.word	0x400440a4
     700:	400440a8 	.word	0x400440a8
     704:	40048098 	.word	0x40048098
     708:	4000800c 	.word	0x4000800c
     70c:	002dc6c0 	.word	0x002dc6c0
     710:	40008004 	.word	0x40008004
     714:	40008000 	.word	0x40008000
     718:	40008008 	.word	0x40008008
     71c:	40008014 	.word	0x40008014
     720:	100008b2 	.word	0x100008b2
     724:	100008c8 	.word	0x100008c8
     728:	100008c6 	.word	0x100008c6
     72c:	100008c4 	.word	0x100008c4
     730:	100008c5 	.word	0x100008c5
     734:	e000e100 	.word	0xe000e100

00000738 <_GLOBAL__sub_I_uart_rx_buffer>:
	return true;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial = HardwareSerial();
     738:	b508      	push	{r3, lr}
     73a:	4802      	ldr	r0, [pc, #8]	; (744 <_GLOBAL__sub_I_uart_rx_buffer+0xc>)
     73c:	f7ff ff98 	bl	670 <_ZN14HardwareSerialC1Ev>
     740:	bd08      	pop	{r3, pc}
     742:	46c0      	nop			; (mov r8, r8)
     744:	100008b4 	.word	0x100008b4

00000748 <main>:
#include <Arduino.h>

int main(void)
{
     748:	b508      	push	{r3, lr}
  init();
     74a:	f7ff fd73 	bl	234 <_Z4initv>

#if defined(USBCON)
  USBDevice.attach();
#endif

  setup();
     74e:	f7ff fe03 	bl	358 <_Z5setupv>
    
  for (;;) {
    loop();
     752:	f7ff fe25 	bl	3a0 <_Z4loopv>
     756:	e7fc      	b.n	752 <main+0xa>

00000758 <_Z14I2C_IRQHandlerv>:

void I2C_IRQHandler(void) 
{
  uint8_t StatValue;

  timeout = 0;
     758:	4b47      	ldr	r3, [pc, #284]	; (878 <_Z14I2C_IRQHandlerv+0x120>)
     75a:	2100      	movs	r1, #0
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
     75c:	4847      	ldr	r0, [pc, #284]	; (87c <_Z14I2C_IRQHandlerv+0x124>)

volatile uint32_t RdIndex = 0;
volatile uint32_t WrIndex = 0;

void I2C_IRQHandler(void) 
{
     75e:	b510      	push	{r4, lr}
  uint8_t StatValue;

  timeout = 0;
     760:	6019      	str	r1, [r3, #0]
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
     762:	6802      	ldr	r2, [r0, #0]
}


// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     764:	b2d4      	uxtb	r4, r2
     766:	4a46      	ldr	r2, [pc, #280]	; (880 <_Z14I2C_IRQHandlerv+0x128>)
  uint8_t StatValue;

  timeout = 0;
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
  switch ( StatValue )
     768:	2c28      	cmp	r4, #40	; 0x28
     76a:	d042      	beq.n	7f2 <_Z14I2C_IRQHandlerv+0x9a>
     76c:	dc0c      	bgt.n	788 <_Z14I2C_IRQHandlerv+0x30>
     76e:	2c10      	cmp	r4, #16
     770:	d027      	beq.n	7c2 <_Z14I2C_IRQHandlerv+0x6a>
     772:	dc04      	bgt.n	77e <_Z14I2C_IRQHandlerv+0x26>
     774:	2c08      	cmp	r4, #8
     776:	d179      	bne.n	86c <_Z14I2C_IRQHandlerv+0x114>
  {
	case 0x08:			/* A Start condition is issued. */
	WrIndex = 0;
     778:	4b42      	ldr	r3, [pc, #264]	; (884 <_Z14I2C_IRQHandlerv+0x12c>)
     77a:	6019      	str	r1, [r3, #0]
     77c:	e024      	b.n	7c8 <_Z14I2C_IRQHandlerv+0x70>
  uint8_t StatValue;

  timeout = 0;
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
  switch ( StatValue )
     77e:	2c18      	cmp	r4, #24
     780:	d02b      	beq.n	7da <_Z14I2C_IRQHandlerv+0x82>
     782:	2c20      	cmp	r4, #32
     784:	d172      	bne.n	86c <_Z14I2C_IRQHandlerv+0x114>
     786:	e069      	b.n	85c <_Z14I2C_IRQHandlerv+0x104>
     788:	2c48      	cmp	r4, #72	; 0x48
     78a:	d067      	beq.n	85c <_Z14I2C_IRQHandlerv+0x104>
     78c:	dc05      	bgt.n	79a <_Z14I2C_IRQHandlerv+0x42>
     78e:	2c30      	cmp	r4, #48	; 0x30
     790:	d048      	beq.n	824 <_Z14I2C_IRQHandlerv+0xcc>
     792:	2c40      	cmp	r4, #64	; 0x40
     794:	d16a      	bne.n	86c <_Z14I2C_IRQHandlerv+0x114>
	 I2CMasterState = I2C_NACK_ON_DATA;
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x40:	/* Master Receive, SLA_R has been sent */
	 if ( (RdIndex + 1) < I2CReadLength )
     796:	4b3c      	ldr	r3, [pc, #240]	; (888 <_Z14I2C_IRQHandlerv+0x130>)
     798:	e053      	b.n	842 <_Z14I2C_IRQHandlerv+0xea>
  uint8_t StatValue;

  timeout = 0;
  /* this handler deals with master read and master write only */
  StatValue = I2C0STAT;
  switch ( StatValue )
     79a:	2c50      	cmp	r4, #80	; 0x50
     79c:	d048      	beq.n	830 <_Z14I2C_IRQHandlerv+0xd8>
     79e:	2c58      	cmp	r4, #88	; 0x58
     7a0:	d164      	bne.n	86c <_Z14I2C_IRQHandlerv+0x114>
	 }
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x58:
	 I2CSlaveBuffer[RdIndex++] = I2C0DAT;
     7a2:	4b39      	ldr	r3, [pc, #228]	; (888 <_Z14I2C_IRQHandlerv+0x130>)
     7a4:	4839      	ldr	r0, [pc, #228]	; (88c <_Z14I2C_IRQHandlerv+0x134>)
     7a6:	6819      	ldr	r1, [r3, #0]
     7a8:	6804      	ldr	r4, [r0, #0]
     7aa:	4839      	ldr	r0, [pc, #228]	; (890 <_Z14I2C_IRQHandlerv+0x138>)
     7ac:	b2e4      	uxtb	r4, r4
     7ae:	5444      	strb	r4, [r0, r1]
     7b0:	3101      	adds	r1, #1
     7b2:	6019      	str	r1, [r3, #0]
	 I2CMasterState = I2C_OK;
     7b4:	4b37      	ldr	r3, [pc, #220]	; (894 <_Z14I2C_IRQHandlerv+0x13c>)
     7b6:	210c      	movs	r1, #12
	 I2C0CONSET = I2CONSET_STO;	/* Set Stop flag */ 
     7b8:	2480      	movs	r4, #128	; 0x80
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x58:
	 I2CSlaveBuffer[RdIndex++] = I2C0DAT;
	 I2CMasterState = I2C_OK;
     7ba:	6019      	str	r1, [r3, #0]
	 I2C0CONSET = I2CONSET_STO;	/* Set Stop flag */ 
     7bc:	2110      	movs	r1, #16
     7be:	05e3      	lsls	r3, r4, #23
     7c0:	e056      	b.n	870 <_Z14I2C_IRQHandlerv+0x118>
	I2C0DAT = I2CMasterBuffer[WrIndex++];
	I2C0CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
	break;
	
	case 0x10:			/* A repeated started is issued */
	RdIndex = 0;
     7c2:	4b31      	ldr	r3, [pc, #196]	; (888 <_Z14I2C_IRQHandlerv+0x130>)
     7c4:	6019      	str	r1, [r3, #0]
	/* Send SLA with R bit set, */
	I2C0DAT = I2CMasterBuffer[WrIndex++];
     7c6:	4b2f      	ldr	r3, [pc, #188]	; (884 <_Z14I2C_IRQHandlerv+0x12c>)
     7c8:	6819      	ldr	r1, [r3, #0]
     7ca:	4833      	ldr	r0, [pc, #204]	; (898 <_Z14I2C_IRQHandlerv+0x140>)
     7cc:	5c44      	ldrb	r4, [r0, r1]
     7ce:	482f      	ldr	r0, [pc, #188]	; (88c <_Z14I2C_IRQHandlerv+0x134>)
     7d0:	3101      	adds	r1, #1
     7d2:	6004      	str	r4, [r0, #0]
     7d4:	6019      	str	r1, [r3, #0]
	I2C0CONCLR = (I2CONCLR_SIC | I2CONCLR_STAC);
     7d6:	2328      	movs	r3, #40	; 0x28
     7d8:	e04c      	b.n	874 <_Z14I2C_IRQHandlerv+0x11c>
	break;
	
	case 0x18:			/* Regardless, it's a ACK */
	if ( I2CWriteLength == 1 )
     7da:	4930      	ldr	r1, [pc, #192]	; (89c <_Z14I2C_IRQHandlerv+0x144>)
     7dc:	680b      	ldr	r3, [r1, #0]
     7de:	2b01      	cmp	r3, #1
     7e0:	d105      	bne.n	7ee <_Z14I2C_IRQHandlerv+0x96>
	{
	  I2C0CONSET = I2CONSET_STO;      /* Set Stop flag */
     7e2:	2480      	movs	r4, #128	; 0x80
     7e4:	05e1      	lsls	r1, r4, #23
     7e6:	2010      	movs	r0, #16
     7e8:	6008      	str	r0, [r1, #0]
	  I2CMasterState = I2C_NO_DATA;
     7ea:	2107      	movs	r1, #7
     7ec:	e03f      	b.n	86e <_Z14I2C_IRQHandlerv+0x116>
	}
	else
	 {
	   I2C0DAT = I2CMasterBuffer[WrIndex++];
     7ee:	4b25      	ldr	r3, [pc, #148]	; (884 <_Z14I2C_IRQHandlerv+0x12c>)
     7f0:	e005      	b.n	7fe <_Z14I2C_IRQHandlerv+0xa6>
	 }
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x28:	/* Data byte has been transmitted, regardless ACK or NACK */
	 if ( WrIndex < I2CWriteLength )
     7f2:	4b24      	ldr	r3, [pc, #144]	; (884 <_Z14I2C_IRQHandlerv+0x12c>)
     7f4:	4c29      	ldr	r4, [pc, #164]	; (89c <_Z14I2C_IRQHandlerv+0x144>)
     7f6:	6818      	ldr	r0, [r3, #0]
     7f8:	6821      	ldr	r1, [r4, #0]
     7fa:	4288      	cmp	r0, r1
     7fc:	d206      	bcs.n	80c <_Z14I2C_IRQHandlerv+0xb4>
	 {   
	   I2C0DAT = I2CMasterBuffer[WrIndex++]; /* this should be the last one */
     7fe:	6819      	ldr	r1, [r3, #0]
     800:	4825      	ldr	r0, [pc, #148]	; (898 <_Z14I2C_IRQHandlerv+0x140>)
     802:	5c44      	ldrb	r4, [r0, r1]
     804:	4821      	ldr	r0, [pc, #132]	; (88c <_Z14I2C_IRQHandlerv+0x134>)
     806:	3101      	adds	r1, #1
     808:	6004      	str	r4, [r0, #0]
     80a:	e031      	b.n	870 <_Z14I2C_IRQHandlerv+0x118>
	 }
	 else
	 {
	   if ( I2CReadLength != 0 )
     80c:	4b24      	ldr	r3, [pc, #144]	; (8a0 <_Z14I2C_IRQHandlerv+0x148>)
     80e:	2480      	movs	r4, #128	; 0x80
     810:	6818      	ldr	r0, [r3, #0]
     812:	05e3      	lsls	r3, r4, #23
     814:	2800      	cmp	r0, #0
     816:	d001      	beq.n	81c <_Z14I2C_IRQHandlerv+0xc4>
	   {
		 I2C0CONSET = I2CONSET_STA;	/* Set Repeated-start flag */
     818:	2120      	movs	r1, #32
     81a:	e029      	b.n	870 <_Z14I2C_IRQHandlerv+0x118>
	   }
	   else
	   {
		 I2C0CONSET = I2CONSET_STO;      /* Set Stop flag */
     81c:	2110      	movs	r1, #16
     81e:	6019      	str	r1, [r3, #0]
		 I2CMasterState = I2C_OK;
     820:	210c      	movs	r1, #12
     822:	e024      	b.n	86e <_Z14I2C_IRQHandlerv+0x116>
	 }
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x30:
	 I2C0CONSET = I2CONSET_STO;      /* Set Stop flag */
     824:	2380      	movs	r3, #128	; 0x80
     826:	2110      	movs	r1, #16
     828:	05dc      	lsls	r4, r3, #23
     82a:	6021      	str	r1, [r4, #0]
	 I2CMasterState = I2C_NACK_ON_DATA;
     82c:	2109      	movs	r1, #9
     82e:	e01e      	b.n	86e <_Z14I2C_IRQHandlerv+0x116>
	 }
	 I2C0CONCLR = I2CONCLR_SIC;
	 break;

	 case 0x50:	/* Data byte has been received, regardless following ACK or NACK */
	 I2CSlaveBuffer[RdIndex++] = I2C0DAT;
     830:	4b15      	ldr	r3, [pc, #84]	; (888 <_Z14I2C_IRQHandlerv+0x130>)
     832:	4816      	ldr	r0, [pc, #88]	; (88c <_Z14I2C_IRQHandlerv+0x134>)
     834:	6819      	ldr	r1, [r3, #0]
     836:	6804      	ldr	r4, [r0, #0]
     838:	4815      	ldr	r0, [pc, #84]	; (890 <_Z14I2C_IRQHandlerv+0x138>)
     83a:	b2e4      	uxtb	r4, r4
     83c:	5444      	strb	r4, [r0, r1]
     83e:	3101      	adds	r1, #1
     840:	6019      	str	r1, [r3, #0]
	 if ( (RdIndex + 1) < I2CReadLength )
     842:	681c      	ldr	r4, [r3, #0]
     844:	4b16      	ldr	r3, [pc, #88]	; (8a0 <_Z14I2C_IRQHandlerv+0x148>)
     846:	3401      	adds	r4, #1
     848:	6819      	ldr	r1, [r3, #0]
     84a:	2004      	movs	r0, #4
     84c:	428c      	cmp	r4, r1
     84e:	d203      	bcs.n	858 <_Z14I2C_IRQHandlerv+0x100>
	 {   
	   I2C0CONSET = I2CONSET_AA;	/* assert ACK after data is received */
     850:	2480      	movs	r4, #128	; 0x80
     852:	05e3      	lsls	r3, r4, #23
     854:	6018      	str	r0, [r3, #0]
     856:	e00c      	b.n	872 <_Z14I2C_IRQHandlerv+0x11a>
	 }
	 else
	 {
	   I2C0CONCLR = I2CONCLR_AAC;	/* assert NACK on last byte */
     858:	6010      	str	r0, [r2, #0]
     85a:	e00a      	b.n	872 <_Z14I2C_IRQHandlerv+0x11a>
	 I2C0CONCLR = I2CONCLR_SIC;	/* Clear SI flag */
	 break;

	 case 0x20:		/* regardless, it's a NACK */
	 case 0x48:
	 I2C0CONSET = I2CONSET_STO;      /* Set Stop flag */
     85c:	2080      	movs	r0, #128	; 0x80
     85e:	2110      	movs	r1, #16
     860:	05c4      	lsls	r4, r0, #23
     862:	6021      	str	r1, [r4, #0]
	 I2CMasterState = I2C_NACK_ON_ADDRESS;
     864:	490b      	ldr	r1, [pc, #44]	; (894 <_Z14I2C_IRQHandlerv+0x13c>)
     866:	2308      	movs	r3, #8
     868:	600b      	str	r3, [r1, #0]
     86a:	e003      	b.n	874 <_Z14I2C_IRQHandlerv+0x11c>
	 break;

	 case 0x38:		/* Arbitration lost, in this example, we don't
					 deal with multiple master situation */
	 default:
	 I2CMasterState = I2C_ARBITRATION_LOST;
     86c:	210a      	movs	r1, #10
     86e:	4b09      	ldr	r3, [pc, #36]	; (894 <_Z14I2C_IRQHandlerv+0x13c>)
     870:	6019      	str	r1, [r3, #0]
	 I2C0CONCLR = I2CONCLR_SIC;	
     872:	2308      	movs	r3, #8
     874:	6013      	str	r3, [r2, #0]
	 break;
   }
   return;
 }
     876:	bd10      	pop	{r4, pc}
     878:	10000a64 	.word	0x10000a64
     87c:	40000004 	.word	0x40000004
     880:	40000018 	.word	0x40000018
     884:	10000a60 	.word	0x10000a60
     888:	10000a54 	.word	0x10000a54
     88c:	40000008 	.word	0x40000008
     890:	10000a68 	.word	0x10000a68
     894:	10000a5c 	.word	0x10000a5c
     898:	100009c9 	.word	0x100009c9
     89c:	10000a50 	.word	0x10000a50
     8a0:	10000a4c 	.word	0x10000a4c

000008a4 <_Z7I2CInitm>:
 **				interrupt handler was not installed correctly
 ** 
 *****************************************************************************/
 uint32_t I2CInit( uint32_t I2cMode )
 {
   PRESETCTRL |= (0x1<<1);
     8a4:	4b1d      	ldr	r3, [pc, #116]	; (91c <_Z7I2CInitm+0x78>)
     8a6:	2102      	movs	r1, #2
     8a8:	681a      	ldr	r2, [r3, #0]
 ** Returned value:		true or false, return false if the I2C
 **				interrupt handler was not installed correctly
 ** 
 *****************************************************************************/
 uint32_t I2CInit( uint32_t I2cMode )
 {
     8aa:	b530      	push	{r4, r5, lr}
   PRESETCTRL |= (0x1<<1);
     8ac:	430a      	orrs	r2, r1
   SYSAHBCLKCTRL |= (1<<5);
     8ae:	4c1c      	ldr	r4, [pc, #112]	; (920 <_Z7I2CInitm+0x7c>)
 **				interrupt handler was not installed correctly
 ** 
 *****************************************************************************/
 uint32_t I2CInit( uint32_t I2cMode )
 {
   PRESETCTRL |= (0x1<<1);
     8b0:	601a      	str	r2, [r3, #0]
   SYSAHBCLKCTRL |= (1<<5);
     8b2:	6825      	ldr	r5, [r4, #0]
     8b4:	2320      	movs	r3, #32
   IOCON_PIO0_4 &= ~0x3F;	/*  I2C I/O config */
     8b6:	4a1b      	ldr	r2, [pc, #108]	; (924 <_Z7I2CInitm+0x80>)
 ** 
 *****************************************************************************/
 uint32_t I2CInit( uint32_t I2cMode )
 {
   PRESETCTRL |= (0x1<<1);
   SYSAHBCLKCTRL |= (1<<5);
     8b8:	431d      	orrs	r5, r3
     8ba:	6025      	str	r5, [r4, #0]
   IOCON_PIO0_4 &= ~0x3F;	/*  I2C I/O config */
     8bc:	6811      	ldr	r1, [r2, #0]
     8be:	243f      	movs	r4, #63	; 0x3f
     8c0:	43a1      	bics	r1, r4
     8c2:	6011      	str	r1, [r2, #0]
   IOCON_PIO0_4 |= 0x01;		/* I2C SCL */
     8c4:	6815      	ldr	r5, [r2, #0]
     8c6:	2101      	movs	r1, #1
   IOCON_PIO0_5 &= ~0x3F;	
     8c8:	4b17      	ldr	r3, [pc, #92]	; (928 <_Z7I2CInitm+0x84>)
 uint32_t I2CInit( uint32_t I2cMode )
 {
   PRESETCTRL |= (0x1<<1);
   SYSAHBCLKCTRL |= (1<<5);
   IOCON_PIO0_4 &= ~0x3F;	/*  I2C I/O config */
   IOCON_PIO0_4 |= 0x01;		/* I2C SCL */
     8ca:	430d      	orrs	r5, r1
     8cc:	6015      	str	r5, [r2, #0]
   IOCON_PIO0_5 &= ~0x3F;	
     8ce:	681d      	ldr	r5, [r3, #0]
     8d0:	43a5      	bics	r5, r4
     8d2:	601d      	str	r5, [r3, #0]
   IOCON_PIO0_5 |= 0x01;		/* I2C SDA */
     8d4:	681d      	ldr	r5, [r3, #0]

   /*--- Clear flags ---*/
   I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
     8d6:	246c      	movs	r4, #108	; 0x6c
   PRESETCTRL |= (0x1<<1);
   SYSAHBCLKCTRL |= (1<<5);
   IOCON_PIO0_4 &= ~0x3F;	/*  I2C I/O config */
   IOCON_PIO0_4 |= 0x01;		/* I2C SCL */
   IOCON_PIO0_5 &= ~0x3F;	
   IOCON_PIO0_5 |= 0x01;		/* I2C SDA */
     8d8:	4329      	orrs	r1, r5
     8da:	6019      	str	r1, [r3, #0]

   /*--- Clear flags ---*/
   I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    
     8dc:	4913      	ldr	r1, [pc, #76]	; (92c <_Z7I2CInitm+0x88>)
     8de:	600c      	str	r4, [r1, #0]

   /*--- Reset registers ---*/
 #if FAST_MODE_PLUS
   IOCON_PIO0_4 |= (0x2<<8);
     8e0:	6815      	ldr	r5, [r2, #0]
     8e2:	2480      	movs	r4, #128	; 0x80
     8e4:	00a1      	lsls	r1, r4, #2
     8e6:	430d      	orrs	r5, r1
     8e8:	6015      	str	r5, [r2, #0]
   IOCON_PIO0_5 |= (0x2<<8);
     8ea:	681a      	ldr	r2, [r3, #0]
   I2C0SCLL   = I2SCLL_HS_SCLL;
     8ec:	4d10      	ldr	r5, [pc, #64]	; (930 <_Z7I2CInitm+0x8c>)
   I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    

   /*--- Reset registers ---*/
 #if FAST_MODE_PLUS
   IOCON_PIO0_4 |= (0x2<<8);
   IOCON_PIO0_5 |= (0x2<<8);
     8ee:	4311      	orrs	r1, r2
   I2C0SCLL   = I2SCLL_HS_SCLL;
   I2C0SCLH   = I2SCLH_HS_SCLH;
     8f0:	4c10      	ldr	r4, [pc, #64]	; (934 <_Z7I2CInitm+0x90>)
   I2C0CONCLR = I2CONCLR_AAC | I2CONCLR_SIC | I2CONCLR_STAC | I2CONCLR_I2ENC;    

   /*--- Reset registers ---*/
 #if FAST_MODE_PLUS
   IOCON_PIO0_4 |= (0x2<<8);
   IOCON_PIO0_5 |= (0x2<<8);
     8f2:	6019      	str	r1, [r3, #0]
   I2C0SCLL   = I2SCLL_HS_SCLL;
     8f4:	233c      	movs	r3, #60	; 0x3c
     8f6:	602b      	str	r3, [r5, #0]
   I2C0SCLH   = I2SCLH_HS_SCLH;
     8f8:	6023      	str	r3, [r4, #0]
 #else
   I2C0SCLL   = I2SCLL_SCLL;
   I2C0SCLH   = I2SCLH_SCLH;
 #endif

   if ( I2cMode == I2CSLAVE )
     8fa:	2802      	cmp	r0, #2
     8fc:	d102      	bne.n	904 <_Z7I2CInitm+0x60>
   {
	 I2C0ADR0 = PCF8594_ADDR;
     8fe:	490e      	ldr	r1, [pc, #56]	; (938 <_Z7I2CInitm+0x94>)
     900:	20a0      	movs	r0, #160	; 0xa0
     902:	6008      	str	r0, [r1, #0]
   }    

   /* Enable the I2C Interrupt */
   bitSet(ISER, 15);
     904:	4b0d      	ldr	r3, [pc, #52]	; (93c <_Z7I2CInitm+0x98>)
     906:	2280      	movs	r2, #128	; 0x80
     908:	681d      	ldr	r5, [r3, #0]
     90a:	0214      	lsls	r4, r2, #8
     90c:	432c      	orrs	r4, r5

   I2C0CONSET = I2CONSET_I2EN;
     90e:	2180      	movs	r1, #128	; 0x80
   {
	 I2C0ADR0 = PCF8594_ADDR;
   }    

   /* Enable the I2C Interrupt */
   bitSet(ISER, 15);
     910:	601c      	str	r4, [r3, #0]

   I2C0CONSET = I2CONSET_I2EN;
     912:	2040      	movs	r0, #64	; 0x40
     914:	05cb      	lsls	r3, r1, #23
     916:	6018      	str	r0, [r3, #0]
   return( 1 );
 }
     918:	2001      	movs	r0, #1
     91a:	bd30      	pop	{r4, r5, pc}
     91c:	40048004 	.word	0x40048004
     920:	40048080 	.word	0x40048080
     924:	40044030 	.word	0x40044030
     928:	40044034 	.word	0x40044034
     92c:	40000018 	.word	0x40000018
     930:	40000014 	.word	0x40000014
     934:	40000010 	.word	0x40000010
     938:	4000000c 	.word	0x4000000c
     93c:	e000e100 	.word	0xe000e100

00000940 <_Z9I2CEnginev>:
 **				timed out. 
 ** 
 *****************************************************************************/
 uint32_t I2CEngine( void ) 
 {
   RdIndex = 0;
     940:	4a0f      	ldr	r2, [pc, #60]	; (980 <_Z9I2CEnginev+0x40>)
   WrIndex = 0;
     942:	4810      	ldr	r0, [pc, #64]	; (984 <_Z9I2CEnginev+0x44>)
 **				timed out. 
 ** 
 *****************************************************************************/
 uint32_t I2CEngine( void ) 
 {
   RdIndex = 0;
     944:	2300      	movs	r3, #0
     946:	6013      	str	r3, [r2, #0]
   WrIndex = 0;
     948:	6003      	str	r3, [r0, #0]

   /*--- Issue a start condition ---*/
   I2C0CONSET = I2CONSET_STA;	/* Set Start flag */
     94a:	2380      	movs	r3, #128	; 0x80
     94c:	05da      	lsls	r2, r3, #23

   I2CMasterState = I2C_BUSY;	
     94e:	4b0e      	ldr	r3, [pc, #56]	; (988 <_Z9I2CEnginev+0x48>)
 {
   RdIndex = 0;
   WrIndex = 0;

   /*--- Issue a start condition ---*/
   I2C0CONSET = I2CONSET_STA;	/* Set Start flag */
     950:	2120      	movs	r1, #32

   I2CMasterState = I2C_BUSY;	
     952:	2006      	movs	r0, #6
 {
   RdIndex = 0;
   WrIndex = 0;

   /*--- Issue a start condition ---*/
   I2C0CONSET = I2CONSET_STA;	/* Set Start flag */
     954:	6011      	str	r1, [r2, #0]

   I2CMasterState = I2C_BUSY;	
     956:	6018      	str	r0, [r3, #0]

   while ( I2CMasterState == I2C_BUSY )
     958:	6819      	ldr	r1, [r3, #0]
     95a:	2906      	cmp	r1, #6
     95c:	d10b      	bne.n	976 <_Z9I2CEnginev+0x36>
   {
	 if ( timeout >= MAX_TIMEOUT )
     95e:	4a0b      	ldr	r2, [pc, #44]	; (98c <_Z9I2CEnginev+0x4c>)
     960:	490b      	ldr	r1, [pc, #44]	; (990 <_Z9I2CEnginev+0x50>)
     962:	6810      	ldr	r0, [r2, #0]
     964:	4288      	cmp	r0, r1
     966:	d902      	bls.n	96e <_Z9I2CEnginev+0x2e>
	 {
	   I2CMasterState = I2C_TIME_OUT;
     968:	220b      	movs	r2, #11
     96a:	601a      	str	r2, [r3, #0]
	   break;
     96c:	e003      	b.n	976 <_Z9I2CEnginev+0x36>
	 }
	 timeout++;
     96e:	6810      	ldr	r0, [r2, #0]
     970:	3001      	adds	r0, #1
     972:	6010      	str	r0, [r2, #0]
     974:	e7f0      	b.n	958 <_Z9I2CEnginev+0x18>
   }    
   I2C0CONCLR = I2CONCLR_STAC;
     976:	4807      	ldr	r0, [pc, #28]	; (994 <_Z9I2CEnginev+0x54>)
     978:	2120      	movs	r1, #32
     97a:	6001      	str	r1, [r0, #0]

   return ( I2CMasterState );
     97c:	6818      	ldr	r0, [r3, #0]
 }
     97e:	4770      	bx	lr
     980:	10000a54 	.word	0x10000a54
     984:	10000a60 	.word	0x10000a60
     988:	10000a5c 	.word	0x10000a5c
     98c:	10000a64 	.word	0x10000a64
     990:	00fffffe 	.word	0x00fffffe
     994:	40000018 	.word	0x40000018

00000998 <_ZN7TwoWire5beginEv>:
 }

 // Public Methods //////////////////////////////////////////////////////////////

 void TwoWire::begin(void)
 {
     998:	b508      	push	{r3, lr}
   I2CInit(I2CMASTER);
     99a:	2001      	movs	r0, #1
     99c:	f7ff ff82 	bl	8a4 <_Z7I2CInitm>
 }
     9a0:	bd08      	pop	{r3, pc}
	...

000009a4 <_ZN7TwoWire11requestFromEhhh>:

 uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
 {
   I2CReadLength = quantity;
   I2CMasterBuffer[1] = address;
     9a4:	4806      	ldr	r0, [pc, #24]	; (9c0 <_ZN7TwoWire11requestFromEhhh+0x1c>)
   I2CInit(I2CMASTER);
 }

 uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
 {
   I2CReadLength = quantity;
     9a6:	4b07      	ldr	r3, [pc, #28]	; (9c4 <_ZN7TwoWire11requestFromEhhh+0x20>)
     9a8:	601a      	str	r2, [r3, #0]
   I2CMasterBuffer[1] = address;
     9aa:	7041      	strb	r1, [r0, #1]
   I2CMasterBuffer[2] = I2CMasterBuffer[0] | RD_BIT;
     9ac:	7802      	ldrb	r2, [r0, #0]
     9ae:	2101      	movs	r1, #1
     9b0:	430a      	orrs	r2, r1
   I2CWriteLength += 1;
     9b2:	4b05      	ldr	r3, [pc, #20]	; (9c8 <_ZN7TwoWire11requestFromEhhh+0x24>)

 uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
 {
   I2CReadLength = quantity;
   I2CMasterBuffer[1] = address;
   I2CMasterBuffer[2] = I2CMasterBuffer[0] | RD_BIT;
     9b4:	7082      	strb	r2, [r0, #2]
   I2CWriteLength += 1;
     9b6:	6818      	ldr	r0, [r3, #0]
     9b8:	1842      	adds	r2, r0, r1
     9ba:	601a      	str	r2, [r3, #0]
   return 0;
 }
     9bc:	2000      	movs	r0, #0
     9be:	4770      	bx	lr
     9c0:	100009c9 	.word	0x100009c9
     9c4:	10000a4c 	.word	0x10000a4c
     9c8:	10000a50 	.word	0x10000a50

000009cc <_ZN7TwoWire11requestFromEii>:
 {
   return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 }

 uint8_t TwoWire::requestFrom(int address, int quantity)
 {
     9cc:	b508      	push	{r3, lr}
   return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
     9ce:	b2c9      	uxtb	r1, r1
     9d0:	b2d2      	uxtb	r2, r2
     9d2:	2301      	movs	r3, #1
     9d4:	f7ff ffe6 	bl	9a4 <_ZN7TwoWire11requestFromEhhh>
 }
     9d8:	bd08      	pop	{r3, pc}
	...

000009dc <_ZN7TwoWire17beginTransmissionEh>:
   return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 }

 void TwoWire::beginTransmission(uint8_t address)
 {
   I2CWriteLength = 1;
     9dc:	4b04      	ldr	r3, [pc, #16]	; (9f0 <_ZN7TwoWire17beginTransmissionEh+0x14>)
     9de:	2201      	movs	r2, #1
     9e0:	601a      	str	r2, [r3, #0]
   I2CReadLength = 0;
     9e2:	4a04      	ldr	r2, [pc, #16]	; (9f4 <_ZN7TwoWire17beginTransmissionEh+0x18>)
   I2CMasterBuffer[0] = address;
     9e4:	4b04      	ldr	r3, [pc, #16]	; (9f8 <_ZN7TwoWire17beginTransmissionEh+0x1c>)
 }

 void TwoWire::beginTransmission(uint8_t address)
 {
   I2CWriteLength = 1;
   I2CReadLength = 0;
     9e6:	2000      	movs	r0, #0
     9e8:	6010      	str	r0, [r2, #0]
   I2CMasterBuffer[0] = address;
     9ea:	7019      	strb	r1, [r3, #0]
 }
     9ec:	4770      	bx	lr
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	10000a50 	.word	0x10000a50
     9f4:	10000a4c 	.word	0x10000a4c
     9f8:	100009c9 	.word	0x100009c9

000009fc <_ZN7TwoWire15endTransmissionEv>:

//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
     9fc:	b508      	push	{r3, lr}
 //	no call to endTransmission(true) is made. Some I2C
 //	devices will behave oddly if they do not see a STOP.
 //
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  return I2CEngine();
     9fe:	f7ff ff9f 	bl	940 <_Z9I2CEnginev>
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     a02:	b2c0      	uxtb	r0, r0
}
     a04:	bd08      	pop	{r3, pc}
	...

00000a08 <_ZN7TwoWire5writeEh>:

size_t TwoWire::write(uint8_t data)
{
  I2CMasterBuffer[I2CWriteLength] = data;
     a08:	4b04      	ldr	r3, [pc, #16]	; (a1c <_ZN7TwoWire5writeEh+0x14>)
     a0a:	4805      	ldr	r0, [pc, #20]	; (a20 <_ZN7TwoWire5writeEh+0x18>)
     a0c:	681a      	ldr	r2, [r3, #0]
     a0e:	5481      	strb	r1, [r0, r2]
  I2CWriteLength++;
     a10:	6819      	ldr	r1, [r3, #0]
  return 1;
}
     a12:	2001      	movs	r0, #1
}

size_t TwoWire::write(uint8_t data)
{
  I2CMasterBuffer[I2CWriteLength] = data;
  I2CWriteLength++;
     a14:	3101      	adds	r1, #1
     a16:	6019      	str	r1, [r3, #0]
  return 1;
}
     a18:	4770      	bx	lr
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	10000a50 	.word	0x10000a50
     a20:	100009c9 	.word	0x100009c9

00000a24 <_ZN7TwoWire4readEv>:
// or after requestFrom(address, numBytes)
uint8_t TwoWire::read(void)
{
  int value = -1;
  
  value = I2CSlaveBuffer[I2CReadLength-1];
     a24:	4b04      	ldr	r3, [pc, #16]	; (a38 <_ZN7TwoWire4readEv+0x14>)
     a26:	4905      	ldr	r1, [pc, #20]	; (a3c <_ZN7TwoWire4readEv+0x18>)
     a28:	681a      	ldr	r2, [r3, #0]
     a2a:	3a01      	subs	r2, #1
     a2c:	5c88      	ldrb	r0, [r1, r2]
  I2CReadLength--;
     a2e:	681a      	ldr	r2, [r3, #0]
     a30:	3a01      	subs	r2, #1
     a32:	601a      	str	r2, [r3, #0]

  return value;
}
     a34:	4770      	bx	lr
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	10000a4c 	.word	0x10000a4c
     a3c:	10000a68 	.word	0x10000a68

00000a40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a42:	1c06      	adds	r6, r0, #0
     a44:	1c0c      	adds	r4, r1, #0
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     a46:	188f      	adds	r7, r1, r2
{
  size_t n = 0;
     a48:	2500      	movs	r5, #0
  while (size--) {
     a4a:	42bc      	cmp	r4, r7
     a4c:	d007      	beq.n	a5e <_ZN5Print5writeEPKhj+0x1e>
    n += write(*buffer++);
     a4e:	6833      	ldr	r3, [r6, #0]
     a50:	7821      	ldrb	r1, [r4, #0]
     a52:	681a      	ldr	r2, [r3, #0]
     a54:	1c30      	adds	r0, r6, #0
     a56:	4790      	blx	r2
     a58:	3401      	adds	r4, #1
     a5a:	182d      	adds	r5, r5, r0
     a5c:	e7f5      	b.n	a4a <_ZN5Print5writeEPKhj+0xa>
  }
  return n;
}
     a5e:	1c28      	adds	r0, r5, #0
     a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000a62 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     a62:	b538      	push	{r3, r4, r5, lr}
     a64:	1c05      	adds	r5, r0, #0
     a66:	1c0c      	adds	r4, r1, #0
      if (str == NULL) return 0;
     a68:	1e08      	subs	r0, r1, #0
     a6a:	d007      	beq.n	a7c <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
     a6c:	f000 fbcc 	bl	1208 <strlen>
     a70:	682b      	ldr	r3, [r5, #0]
     a72:	1c02      	adds	r2, r0, #0
     a74:	685b      	ldr	r3, [r3, #4]
     a76:	1c28      	adds	r0, r5, #0
     a78:	1c21      	adds	r1, r4, #0
     a7a:	4798      	blx	r3
    }
     a7c:	bd38      	pop	{r3, r4, r5, pc}

00000a7e <_ZN5Print5printEPKc>:
  }
  return n;
}

size_t Print::print(const char str[])
{
     a7e:	b508      	push	{r3, lr}
  return write(str);
     a80:	f7ff ffef 	bl	a62 <_ZN5Print5writeEPKc>
}
     a84:	bd08      	pop	{r3, pc}

00000a86 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
     a86:	b508      	push	{r3, lr}
  return write(c);
     a88:	6803      	ldr	r3, [r0, #0]
     a8a:	681a      	ldr	r2, [r3, #0]
     a8c:	4790      	blx	r2
}
     a8e:	bd08      	pop	{r3, pc}

00000a90 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     a90:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
     a92:	210d      	movs	r1, #13
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     a94:	1c04      	adds	r4, r0, #0
  size_t n = print('\r');
     a96:	f7ff fff6 	bl	a86 <_ZN5Print5printEc>
  n += print('\n');
     a9a:	210a      	movs	r1, #10
  return x.printTo(*this);
}

size_t Print::println(void)
{
  size_t n = print('\r');
     a9c:	1c05      	adds	r5, r0, #0
  n += print('\n');
     a9e:	1c20      	adds	r0, r4, #0
     aa0:	f7ff fff1 	bl	a86 <_ZN5Print5printEc>
     aa4:	1940      	adds	r0, r0, r5
  return n;
}
     aa6:	bd38      	pop	{r3, r4, r5, pc}

00000aa8 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     aa8:	b538      	push	{r3, r4, r5, lr}
     aaa:	1c04      	adds	r4, r0, #0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     aac:	f7ff ffd9 	bl	a62 <_ZN5Print5writeEPKc>
     ab0:	1c05      	adds	r5, r0, #0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     ab2:	1c20      	adds	r0, r4, #0
     ab4:	f7ff ffec 	bl	a90 <_ZN5Print7printlnEv>
     ab8:	1828      	adds	r0, r5, r0
  return n;
}
     aba:	bd38      	pop	{r3, r4, r5, pc}

00000abc <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
     abc:	b538      	push	{r3, r4, r5, lr}
     abe:	1c04      	adds	r4, r0, #0
  size_t n = print(c);
     ac0:	f7ff ffe1 	bl	a86 <_ZN5Print5printEc>
     ac4:	1c05      	adds	r5, r0, #0
  n += println();
     ac6:	1c20      	adds	r0, r4, #0
     ac8:	f7ff ffe2 	bl	a90 <_ZN5Print7printlnEv>
     acc:	1940      	adds	r0, r0, r5
  return n;
}
     ace:	bd38      	pop	{r3, r4, r5, pc}

00000ad0 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad2:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     ad4:	ac09      	add	r4, sp, #36	; 0x24
     ad6:	2300      	movs	r3, #0
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     ad8:	1c07      	adds	r7, r0, #0
     ada:	1c0d      	adds	r5, r1, #0
     adc:	1c16      	adds	r6, r2, #0
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     ade:	7023      	strb	r3, [r4, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     ae0:	2a01      	cmp	r2, #1
     ae2:	d800      	bhi.n	ae6 <_ZN5Print11printNumberEmh+0x16>
     ae4:	260a      	movs	r6, #10

  do {
    unsigned long m = n;
    n /= base;
     ae6:	1c28      	adds	r0, r5, #0
     ae8:	1c31      	adds	r1, r6, #0
     aea:	f000 fce5 	bl	14b8 <__aeabi_uidiv>
    char c = m - base * n;
     aee:	1c01      	adds	r1, r0, #0
     af0:	4371      	muls	r1, r6
     af2:	1a6d      	subs	r5, r5, r1
     af4:	b2ea      	uxtb	r2, r5
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     af6:	3c01      	subs	r4, #1
     af8:	2a09      	cmp	r2, #9
     afa:	d801      	bhi.n	b00 <_ZN5Print11printNumberEmh+0x30>
     afc:	3230      	adds	r2, #48	; 0x30
     afe:	e000      	b.n	b02 <_ZN5Print11printNumberEmh+0x32>
     b00:	3237      	adds	r2, #55	; 0x37
     b02:	b2d3      	uxtb	r3, r2
     b04:	7023      	strb	r3, [r4, #0]
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     b06:	1e05      	subs	r5, r0, #0
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     b08:	d1ed      	bne.n	ae6 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     b0a:	1c38      	adds	r0, r7, #0
     b0c:	1c21      	adds	r1, r4, #0
     b0e:	f7ff ffa8 	bl	a62 <_ZN5Print5writeEPKc>
}
     b12:	b00b      	add	sp, #44	; 0x2c
     b14:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000b16 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
     b16:	b508      	push	{r3, lr}
  if (base == 0) return write(n);
     b18:	2a00      	cmp	r2, #0
     b1a:	d104      	bne.n	b26 <_ZN5Print5printEmi+0x10>
     b1c:	6803      	ldr	r3, [r0, #0]
     b1e:	b2c9      	uxtb	r1, r1
     b20:	681a      	ldr	r2, [r3, #0]
     b22:	4790      	blx	r2
     b24:	e002      	b.n	b2c <_ZN5Print5printEmi+0x16>
  else return printNumber(n, base);
     b26:	b2d2      	uxtb	r2, r2
     b28:	f7ff ffd2 	bl	ad0 <_ZN5Print11printNumberEmh>
}
     b2c:	bd08      	pop	{r3, pc}

00000b2e <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     b2e:	b508      	push	{r3, lr}
  return print((unsigned long) b, base);
     b30:	f7ff fff1 	bl	b16 <_ZN5Print5printEmi>
}
     b34:	bd08      	pop	{r3, pc}

00000b36 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b38:	1c04      	adds	r4, r0, #0
     b3a:	1c0d      	adds	r5, r1, #0
     b3c:	1e16      	subs	r6, r2, #0
  if (base == 0) {
     b3e:	d104      	bne.n	b4a <_ZN5Print5printEli+0x14>
    return write(n);
     b40:	6803      	ldr	r3, [r0, #0]
     b42:	b2c9      	uxtb	r1, r1
     b44:	681a      	ldr	r2, [r3, #0]
     b46:	4790      	blx	r2
     b48:	e012      	b.n	b70 <_ZN5Print5printEli+0x3a>
  } else if (base == 10) {
     b4a:	2a0a      	cmp	r2, #10
     b4c:	d10d      	bne.n	b6a <_ZN5Print5printEli+0x34>
    if (n < 0) {
     b4e:	2900      	cmp	r1, #0
     b50:	da0a      	bge.n	b68 <_ZN5Print5printEli+0x32>
      int t = print('-');
     b52:	212d      	movs	r1, #45	; 0x2d
     b54:	f7ff ff97 	bl	a86 <_ZN5Print5printEc>
      n = -n;
     b58:	4269      	negs	r1, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
     b5a:	1c07      	adds	r7, r0, #0
      n = -n;
      return printNumber(n, 10) + t;
     b5c:	1c32      	adds	r2, r6, #0
     b5e:	1c20      	adds	r0, r4, #0
     b60:	f7ff ffb6 	bl	ad0 <_ZN5Print11printNumberEmh>
     b64:	19c0      	adds	r0, r0, r7
     b66:	e003      	b.n	b70 <_ZN5Print5printEli+0x3a>
     b68:	e000      	b.n	b6c <_ZN5Print5printEli+0x36>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     b6a:	b2d2      	uxtb	r2, r2
     b6c:	f7ff ffb0 	bl	ad0 <_ZN5Print11printNumberEmh>
  }
}
     b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000b72 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     b72:	b508      	push	{r3, lr}
  return print((long) n, base);
     b74:	f7ff ffdf 	bl	b36 <_ZN5Print5printEli>
}
     b78:	bd08      	pop	{r3, pc}

00000b7a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     b7a:	b538      	push	{r3, r4, r5, lr}
     b7c:	1c04      	adds	r4, r0, #0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     b7e:	f7ff ffda 	bl	b36 <_ZN5Print5printEli>
     b82:	1c05      	adds	r5, r0, #0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
     b84:	1c20      	adds	r0, r4, #0
     b86:	f7ff ff83 	bl	a90 <_ZN5Print7printlnEv>
     b8a:	1828      	adds	r0, r5, r0
  return n;
}
     b8c:	bd38      	pop	{r3, r4, r5, pc}
	...

00000b90 <__register_exitproc>:
     b90:	b5f0      	push	{r4, r5, r6, r7, lr}
     b92:	464f      	mov	r7, r9
     b94:	4646      	mov	r6, r8
     b96:	b4c0      	push	{r6, r7}
     b98:	4698      	mov	r8, r3
     b9a:	4b2c      	ldr	r3, [pc, #176]	; (c4c <__register_exitproc+0xbc>)
     b9c:	1c06      	adds	r6, r0, #0
     b9e:	25a4      	movs	r5, #164	; 0xa4
     ba0:	6818      	ldr	r0, [r3, #0]
     ba2:	1c0f      	adds	r7, r1, #0
     ba4:	0069      	lsls	r1, r5, #1
     ba6:	5844      	ldr	r4, [r0, r1]
     ba8:	b083      	sub	sp, #12
     baa:	4691      	mov	r9, r2
     bac:	9001      	str	r0, [sp, #4]
     bae:	2c00      	cmp	r4, #0
     bb0:	d047      	beq.n	c42 <__register_exitproc+0xb2>
     bb2:	6862      	ldr	r2, [r4, #4]
     bb4:	2a1f      	cmp	r2, #31
     bb6:	dd1a      	ble.n	bee <__register_exitproc+0x5e>
     bb8:	4c25      	ldr	r4, [pc, #148]	; (c50 <__register_exitproc+0xc0>)
     bba:	2c00      	cmp	r4, #0
     bbc:	d102      	bne.n	bc4 <__register_exitproc+0x34>
     bbe:	2701      	movs	r7, #1
     bc0:	4278      	negs	r0, r7
     bc2:	e01d      	b.n	c00 <__register_exitproc+0x70>
     bc4:	23c8      	movs	r3, #200	; 0xc8
     bc6:	0058      	lsls	r0, r3, #1
     bc8:	f000 f874 	bl	cb4 <malloc>
     bcc:	1e04      	subs	r4, r0, #0
     bce:	d0f6      	beq.n	bbe <__register_exitproc+0x2e>
     bd0:	2500      	movs	r5, #0
     bd2:	6045      	str	r5, [r0, #4]
     bd4:	9901      	ldr	r1, [sp, #4]
     bd6:	20a4      	movs	r0, #164	; 0xa4
     bd8:	0042      	lsls	r2, r0, #1
     bda:	588b      	ldr	r3, [r1, r2]
     bdc:	9801      	ldr	r0, [sp, #4]
     bde:	6023      	str	r3, [r4, #0]
     be0:	5084      	str	r4, [r0, r2]
     be2:	23c6      	movs	r3, #198	; 0xc6
     be4:	22c4      	movs	r2, #196	; 0xc4
     be6:	0051      	lsls	r1, r2, #1
     be8:	0058      	lsls	r0, r3, #1
     bea:	5065      	str	r5, [r4, r1]
     bec:	5025      	str	r5, [r4, r0]
     bee:	6865      	ldr	r5, [r4, #4]
     bf0:	2e00      	cmp	r6, #0
     bf2:	d10a      	bne.n	c0a <__register_exitproc+0x7a>
     bf4:	1ca9      	adds	r1, r5, #2
     bf6:	008e      	lsls	r6, r1, #2
     bf8:	3501      	adds	r5, #1
     bfa:	5137      	str	r7, [r6, r4]
     bfc:	6065      	str	r5, [r4, #4]
     bfe:	2000      	movs	r0, #0
     c00:	b003      	add	sp, #12
     c02:	bc0c      	pop	{r2, r3}
     c04:	4690      	mov	r8, r2
     c06:	4699      	mov	r9, r3
     c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0a:	00aa      	lsls	r2, r5, #2
     c0c:	18a0      	adds	r0, r4, r2
     c0e:	2388      	movs	r3, #136	; 0x88
     c10:	4649      	mov	r1, r9
     c12:	22c4      	movs	r2, #196	; 0xc4
     c14:	50c1      	str	r1, [r0, r3]
     c16:	0050      	lsls	r0, r2, #1
     c18:	1822      	adds	r2, r4, r0
     c1a:	6810      	ldr	r0, [r2, #0]
     c1c:	2101      	movs	r1, #1
     c1e:	40a9      	lsls	r1, r5
     c20:	4308      	orrs	r0, r1
     c22:	6010      	str	r0, [r2, #0]
     c24:	1c2a      	adds	r2, r5, #0
     c26:	3220      	adds	r2, #32
     c28:	0090      	lsls	r0, r2, #2
     c2a:	1822      	adds	r2, r4, r0
     c2c:	4640      	mov	r0, r8
     c2e:	50d0      	str	r0, [r2, r3]
     c30:	2e02      	cmp	r6, #2
     c32:	d1df      	bne.n	bf4 <__register_exitproc+0x64>
     c34:	26c6      	movs	r6, #198	; 0xc6
     c36:	0073      	lsls	r3, r6, #1
     c38:	18e2      	adds	r2, r4, r3
     c3a:	6810      	ldr	r0, [r2, #0]
     c3c:	4301      	orrs	r1, r0
     c3e:	6011      	str	r1, [r2, #0]
     c40:	e7d8      	b.n	bf4 <__register_exitproc+0x64>
     c42:	1c04      	adds	r4, r0, #0
     c44:	344d      	adds	r4, #77	; 0x4d
     c46:	34ff      	adds	r4, #255	; 0xff
     c48:	5044      	str	r4, [r0, r1]
     c4a:	e7b2      	b.n	bb2 <__register_exitproc+0x22>
     c4c:	00001674 	.word	0x00001674
     c50:	00000cb5 	.word	0x00000cb5

00000c54 <__libc_fini_array>:
     c54:	b5f0      	push	{r4, r5, r6, r7, lr}
     c56:	4b15      	ldr	r3, [pc, #84]	; (cac <__libc_fini_array+0x58>)
     c58:	4e15      	ldr	r6, [pc, #84]	; (cb0 <__libc_fini_array+0x5c>)
     c5a:	4647      	mov	r7, r8
     c5c:	1af0      	subs	r0, r6, r3
     c5e:	b480      	push	{r7}
     c60:	1086      	asrs	r6, r0, #2
     c62:	d01d      	beq.n	ca0 <__libc_fini_array+0x4c>
     c64:	1e75      	subs	r5, r6, #1
     c66:	00af      	lsls	r7, r5, #2
     c68:	18ff      	adds	r7, r7, r3
     c6a:	2101      	movs	r1, #1
     c6c:	4029      	ands	r1, r5
     c6e:	683a      	ldr	r2, [r7, #0]
     c70:	4688      	mov	r8, r1
     c72:	1f3c      	subs	r4, r7, #4
     c74:	4790      	blx	r2
     c76:	2d00      	cmp	r5, #0
     c78:	d012      	beq.n	ca0 <__libc_fini_array+0x4c>
     c7a:	4643      	mov	r3, r8
     c7c:	2b00      	cmp	r3, #0
     c7e:	d006      	beq.n	c8e <__libc_fini_array+0x3a>
     c80:	6824      	ldr	r4, [r4, #0]
     c82:	47a0      	blx	r4
     c84:	1eb5      	subs	r5, r6, #2
     c86:	1c3c      	adds	r4, r7, #0
     c88:	3c08      	subs	r4, #8
     c8a:	2d00      	cmp	r5, #0
     c8c:	d008      	beq.n	ca0 <__libc_fini_array+0x4c>
     c8e:	6820      	ldr	r0, [r4, #0]
     c90:	1f26      	subs	r6, r4, #4
     c92:	4780      	blx	r0
     c94:	3d02      	subs	r5, #2
     c96:	6837      	ldr	r7, [r6, #0]
     c98:	47b8      	blx	r7
     c9a:	3c08      	subs	r4, #8
     c9c:	2d00      	cmp	r5, #0
     c9e:	d1f6      	bne.n	c8e <__libc_fini_array+0x3a>
     ca0:	f000 fcf6 	bl	1690 <_fini>
     ca4:	bc04      	pop	{r2}
     ca6:	4690      	mov	r8, r2
     ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	0000169c 	.word	0x0000169c
     cb0:	000016a0 	.word	0x000016a0

00000cb4 <malloc>:
     cb4:	b508      	push	{r3, lr}
     cb6:	4b03      	ldr	r3, [pc, #12]	; (cc4 <malloc+0x10>)
     cb8:	1c01      	adds	r1, r0, #0
     cba:	6818      	ldr	r0, [r3, #0]
     cbc:	f000 f804 	bl	cc8 <_malloc_r>
     cc0:	bd08      	pop	{r3, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	10000428 	.word	0x10000428

00000cc8 <_malloc_r>:
     cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cca:	4656      	mov	r6, sl
     ccc:	4644      	mov	r4, r8
     cce:	465f      	mov	r7, fp
     cd0:	464d      	mov	r5, r9
     cd2:	b4f0      	push	{r4, r5, r6, r7}
     cd4:	1c0c      	adds	r4, r1, #0
     cd6:	340b      	adds	r4, #11
     cd8:	b083      	sub	sp, #12
     cda:	1c06      	adds	r6, r0, #0
     cdc:	2c16      	cmp	r4, #22
     cde:	d92a      	bls.n	d36 <_malloc_r+0x6e>
     ce0:	2307      	movs	r3, #7
     ce2:	439c      	bics	r4, r3
     ce4:	d42a      	bmi.n	d3c <_malloc_r+0x74>
     ce6:	42a1      	cmp	r1, r4
     ce8:	d828      	bhi.n	d3c <_malloc_r+0x74>
     cea:	1c30      	adds	r0, r6, #0
     cec:	f000 fa76 	bl	11dc <__malloc_lock>
     cf0:	48bc      	ldr	r0, [pc, #752]	; (fe4 <_malloc_r+0x31c>)
     cf2:	4284      	cmp	r4, r0
     cf4:	d826      	bhi.n	d44 <_malloc_r+0x7c>
     cf6:	08e0      	lsrs	r0, r4, #3
     cf8:	4dbb      	ldr	r5, [pc, #748]	; (fe8 <_malloc_r+0x320>)
     cfa:	00c3      	lsls	r3, r0, #3
     cfc:	18e9      	adds	r1, r5, r3
     cfe:	68cf      	ldr	r7, [r1, #12]
     d00:	428f      	cmp	r7, r1
     d02:	d100      	bne.n	d06 <_malloc_r+0x3e>
     d04:	e1d6      	b.n	10b4 <__ram_size+0xb4>
     d06:	6879      	ldr	r1, [r7, #4]
     d08:	2403      	movs	r4, #3
     d0a:	43a1      	bics	r1, r4
     d0c:	187c      	adds	r4, r7, r1
     d0e:	6860      	ldr	r0, [r4, #4]
     d10:	68fd      	ldr	r5, [r7, #12]
     d12:	68bb      	ldr	r3, [r7, #8]
     d14:	2201      	movs	r2, #1
     d16:	4302      	orrs	r2, r0
     d18:	60dd      	str	r5, [r3, #12]
     d1a:	1c30      	adds	r0, r6, #0
     d1c:	60ab      	str	r3, [r5, #8]
     d1e:	6062      	str	r2, [r4, #4]
     d20:	f000 fa5e 	bl	11e0 <__malloc_unlock>
     d24:	1c38      	adds	r0, r7, #0
     d26:	3008      	adds	r0, #8
     d28:	b003      	add	sp, #12
     d2a:	bc3c      	pop	{r2, r3, r4, r5}
     d2c:	4690      	mov	r8, r2
     d2e:	4699      	mov	r9, r3
     d30:	46a2      	mov	sl, r4
     d32:	46ab      	mov	fp, r5
     d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d36:	2410      	movs	r4, #16
     d38:	42a1      	cmp	r1, r4
     d3a:	d9d6      	bls.n	cea <_malloc_r+0x22>
     d3c:	270c      	movs	r7, #12
     d3e:	6037      	str	r7, [r6, #0]
     d40:	2000      	movs	r0, #0
     d42:	e7f1      	b.n	d28 <_malloc_r+0x60>
     d44:	0a61      	lsrs	r1, r4, #9
     d46:	d100      	bne.n	d4a <_malloc_r+0x82>
     d48:	e08b      	b.n	e62 <_malloc_r+0x19a>
     d4a:	2904      	cmp	r1, #4
     d4c:	d900      	bls.n	d50 <_malloc_r+0x88>
     d4e:	e13e      	b.n	fce <_malloc_r+0x306>
     d50:	09a7      	lsrs	r7, r4, #6
     d52:	3738      	adds	r7, #56	; 0x38
     d54:	46b8      	mov	r8, r7
     d56:	007b      	lsls	r3, r7, #1
     d58:	4da3      	ldr	r5, [pc, #652]	; (fe8 <_malloc_r+0x320>)
     d5a:	0098      	lsls	r0, r3, #2
     d5c:	1829      	adds	r1, r5, r0
     d5e:	68cf      	ldr	r7, [r1, #12]
     d60:	42b9      	cmp	r1, r7
     d62:	d013      	beq.n	d8c <_malloc_r+0xc4>
     d64:	687a      	ldr	r2, [r7, #4]
     d66:	2303      	movs	r3, #3
     d68:	439a      	bics	r2, r3
     d6a:	1b13      	subs	r3, r2, r4
     d6c:	2b0f      	cmp	r3, #15
     d6e:	dc7c      	bgt.n	e6a <_malloc_r+0x1a2>
     d70:	2003      	movs	r0, #3
     d72:	2b00      	cmp	r3, #0
     d74:	db07      	blt.n	d86 <_malloc_r+0xbe>
     d76:	e07c      	b.n	e72 <_malloc_r+0x1aa>
     d78:	687a      	ldr	r2, [r7, #4]
     d7a:	4382      	bics	r2, r0
     d7c:	1b13      	subs	r3, r2, r4
     d7e:	2b0f      	cmp	r3, #15
     d80:	dc73      	bgt.n	e6a <_malloc_r+0x1a2>
     d82:	2b00      	cmp	r3, #0
     d84:	da75      	bge.n	e72 <_malloc_r+0x1aa>
     d86:	68ff      	ldr	r7, [r7, #12]
     d88:	42b9      	cmp	r1, r7
     d8a:	d1f5      	bne.n	d78 <_malloc_r+0xb0>
     d8c:	2201      	movs	r2, #1
     d8e:	4490      	add	r8, r2
     d90:	1c2b      	adds	r3, r5, #0
     d92:	692f      	ldr	r7, [r5, #16]
     d94:	3308      	adds	r3, #8
     d96:	429f      	cmp	r7, r3
     d98:	d100      	bne.n	d9c <_malloc_r+0xd4>
     d9a:	e168      	b.n	106e <__ram_size+0x6e>
     d9c:	6878      	ldr	r0, [r7, #4]
     d9e:	2103      	movs	r1, #3
     da0:	4388      	bics	r0, r1
     da2:	1c02      	adds	r2, r0, #0
     da4:	1b01      	subs	r1, r0, r4
     da6:	290f      	cmp	r1, #15
     da8:	dd00      	ble.n	dac <_malloc_r+0xe4>
     daa:	e14f      	b.n	104c <__ram_size+0x4c>
     dac:	616b      	str	r3, [r5, #20]
     dae:	612b      	str	r3, [r5, #16]
     db0:	2900      	cmp	r1, #0
     db2:	da6d      	bge.n	e90 <_malloc_r+0x1c8>
     db4:	4b8d      	ldr	r3, [pc, #564]	; (fec <_malloc_r+0x324>)
     db6:	4298      	cmp	r0, r3
     db8:	d900      	bls.n	dbc <_malloc_r+0xf4>
     dba:	e127      	b.n	100c <__ram_size+0xc>
     dbc:	08c1      	lsrs	r1, r0, #3
     dbe:	108b      	asrs	r3, r1, #2
     dc0:	686a      	ldr	r2, [r5, #4]
     dc2:	2001      	movs	r0, #1
     dc4:	00c9      	lsls	r1, r1, #3
     dc6:	4098      	lsls	r0, r3
     dc8:	186b      	adds	r3, r5, r1
     dca:	4310      	orrs	r0, r2
     dcc:	689a      	ldr	r2, [r3, #8]
     dce:	60fb      	str	r3, [r7, #12]
     dd0:	60ba      	str	r2, [r7, #8]
     dd2:	6068      	str	r0, [r5, #4]
     dd4:	609f      	str	r7, [r3, #8]
     dd6:	60d7      	str	r7, [r2, #12]
     dd8:	4647      	mov	r7, r8
     dda:	10bb      	asrs	r3, r7, #2
     ddc:	2101      	movs	r1, #1
     dde:	4099      	lsls	r1, r3
     de0:	4281      	cmp	r1, r0
     de2:	d85a      	bhi.n	e9a <_malloc_r+0x1d2>
     de4:	4201      	tst	r1, r0
     de6:	d10d      	bne.n	e04 <_malloc_r+0x13c>
     de8:	4642      	mov	r2, r8
     dea:	2703      	movs	r7, #3
     dec:	43ba      	bics	r2, r7
     dee:	1c13      	adds	r3, r2, #0
     df0:	3304      	adds	r3, #4
     df2:	0049      	lsls	r1, r1, #1
     df4:	4698      	mov	r8, r3
     df6:	4201      	tst	r1, r0
     df8:	d104      	bne.n	e04 <_malloc_r+0x13c>
     dfa:	2704      	movs	r7, #4
     dfc:	0049      	lsls	r1, r1, #1
     dfe:	44b8      	add	r8, r7
     e00:	4201      	tst	r1, r0
     e02:	d0fa      	beq.n	dfa <_malloc_r+0x132>
     e04:	2003      	movs	r0, #3
     e06:	4684      	mov	ip, r0
     e08:	4642      	mov	r2, r8
     e0a:	00d3      	lsls	r3, r2, #3
     e0c:	195f      	adds	r7, r3, r5
     e0e:	46bb      	mov	fp, r7
     e10:	1c38      	adds	r0, r7, #0
     e12:	46c1      	mov	r9, r8
     e14:	68c7      	ldr	r7, [r0, #12]
     e16:	42b8      	cmp	r0, r7
     e18:	d107      	bne.n	e2a <_malloc_r+0x162>
     e1a:	e12a      	b.n	1072 <__ram_size+0x72>
     e1c:	2b00      	cmp	r3, #0
     e1e:	db00      	blt.n	e22 <_malloc_r+0x15a>
     e20:	e151      	b.n	10c6 <__ram_size+0xc6>
     e22:	68ff      	ldr	r7, [r7, #12]
     e24:	42b8      	cmp	r0, r7
     e26:	d100      	bne.n	e2a <_malloc_r+0x162>
     e28:	e123      	b.n	1072 <__ram_size+0x72>
     e2a:	687a      	ldr	r2, [r7, #4]
     e2c:	4663      	mov	r3, ip
     e2e:	439a      	bics	r2, r3
     e30:	1b13      	subs	r3, r2, r4
     e32:	2b0f      	cmp	r3, #15
     e34:	ddf2      	ble.n	e1c <_malloc_r+0x154>
     e36:	2001      	movs	r0, #1
     e38:	193a      	adds	r2, r7, r4
     e3a:	4304      	orrs	r4, r0
     e3c:	68b9      	ldr	r1, [r7, #8]
     e3e:	607c      	str	r4, [r7, #4]
     e40:	68fc      	ldr	r4, [r7, #12]
     e42:	4318      	orrs	r0, r3
     e44:	60cc      	str	r4, [r1, #12]
     e46:	60a1      	str	r1, [r4, #8]
     e48:	616a      	str	r2, [r5, #20]
     e4a:	612a      	str	r2, [r5, #16]
     e4c:	3508      	adds	r5, #8
     e4e:	6050      	str	r0, [r2, #4]
     e50:	60d5      	str	r5, [r2, #12]
     e52:	1c30      	adds	r0, r6, #0
     e54:	6095      	str	r5, [r2, #8]
     e56:	50d3      	str	r3, [r2, r3]
     e58:	f000 f9c2 	bl	11e0 <__malloc_unlock>
     e5c:	1c38      	adds	r0, r7, #0
     e5e:	3008      	adds	r0, #8
     e60:	e762      	b.n	d28 <_malloc_r+0x60>
     e62:	08e3      	lsrs	r3, r4, #3
     e64:	4698      	mov	r8, r3
     e66:	005b      	lsls	r3, r3, #1
     e68:	e776      	b.n	d58 <_malloc_r+0x90>
     e6a:	2701      	movs	r7, #1
     e6c:	4279      	negs	r1, r7
     e6e:	4488      	add	r8, r1
     e70:	e78c      	b.n	d8c <_malloc_r+0xc4>
     e72:	68bd      	ldr	r5, [r7, #8]
     e74:	68fc      	ldr	r4, [r7, #12]
     e76:	2301      	movs	r3, #1
     e78:	60ec      	str	r4, [r5, #12]
     e7a:	60a5      	str	r5, [r4, #8]
     e7c:	18bd      	adds	r5, r7, r2
     e7e:	6868      	ldr	r0, [r5, #4]
     e80:	4303      	orrs	r3, r0
     e82:	1c30      	adds	r0, r6, #0
     e84:	606b      	str	r3, [r5, #4]
     e86:	f000 f9ab 	bl	11e0 <__malloc_unlock>
     e8a:	1c38      	adds	r0, r7, #0
     e8c:	3008      	adds	r0, #8
     e8e:	e74b      	b.n	d28 <_malloc_r+0x60>
     e90:	183d      	adds	r5, r7, r0
     e92:	686a      	ldr	r2, [r5, #4]
     e94:	2301      	movs	r3, #1
     e96:	4313      	orrs	r3, r2
     e98:	e7f3      	b.n	e82 <_malloc_r+0x1ba>
     e9a:	68af      	ldr	r7, [r5, #8]
     e9c:	2103      	movs	r1, #3
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	438b      	bics	r3, r1
     ea2:	4699      	mov	r9, r3
     ea4:	42a3      	cmp	r3, r4
     ea6:	d303      	bcc.n	eb0 <_malloc_r+0x1e8>
     ea8:	1b18      	subs	r0, r3, r4
     eaa:	280f      	cmp	r0, #15
     eac:	dd00      	ble.n	eb0 <_malloc_r+0x1e8>
     eae:	e080      	b.n	fb2 <_malloc_r+0x2ea>
     eb0:	4648      	mov	r0, r9
     eb2:	183a      	adds	r2, r7, r0
     eb4:	494e      	ldr	r1, [pc, #312]	; (ff0 <_malloc_r+0x328>)
     eb6:	484f      	ldr	r0, [pc, #316]	; (ff4 <_malloc_r+0x32c>)
     eb8:	680b      	ldr	r3, [r1, #0]
     eba:	6801      	ldr	r1, [r0, #0]
     ebc:	9201      	str	r2, [sp, #4]
     ebe:	18e3      	adds	r3, r4, r3
     ec0:	4683      	mov	fp, r0
     ec2:	1c48      	adds	r0, r1, #1
     ec4:	d100      	bne.n	ec8 <_malloc_r+0x200>
     ec6:	e141      	b.n	114c <__ram_size+0x14c>
     ec8:	484b      	ldr	r0, [pc, #300]	; (ff8 <_malloc_r+0x330>)
     eca:	181b      	adds	r3, r3, r0
     ecc:	0b1a      	lsrs	r2, r3, #12
     ece:	0311      	lsls	r1, r2, #12
     ed0:	9100      	str	r1, [sp, #0]
     ed2:	1c30      	adds	r0, r6, #0
     ed4:	9900      	ldr	r1, [sp, #0]
     ed6:	f000 f985 	bl	11e4 <_sbrk_r>
     eda:	4680      	mov	r8, r0
     edc:	1c42      	adds	r2, r0, #1
     ede:	d05d      	beq.n	f9c <_malloc_r+0x2d4>
     ee0:	9b01      	ldr	r3, [sp, #4]
     ee2:	4543      	cmp	r3, r8
     ee4:	d900      	bls.n	ee8 <_malloc_r+0x220>
     ee6:	e106      	b.n	10f6 <__ram_size+0xf6>
     ee8:	4844      	ldr	r0, [pc, #272]	; (ffc <_malloc_r+0x334>)
     eea:	9900      	ldr	r1, [sp, #0]
     eec:	6803      	ldr	r3, [r0, #0]
     eee:	4682      	mov	sl, r0
     ef0:	18cb      	adds	r3, r1, r3
     ef2:	6003      	str	r3, [r0, #0]
     ef4:	9801      	ldr	r0, [sp, #4]
     ef6:	4540      	cmp	r0, r8
     ef8:	d100      	bne.n	efc <_malloc_r+0x234>
     efa:	e135      	b.n	1168 <__ram_size+0x168>
     efc:	465a      	mov	r2, fp
     efe:	6810      	ldr	r0, [r2, #0]
     f00:	1c42      	adds	r2, r0, #1
     f02:	d100      	bne.n	f06 <_malloc_r+0x23e>
     f04:	e147      	b.n	1196 <__ram_size+0x196>
     f06:	9a01      	ldr	r2, [sp, #4]
     f08:	4641      	mov	r1, r8
     f0a:	1a88      	subs	r0, r1, r2
     f0c:	181b      	adds	r3, r3, r0
     f0e:	4651      	mov	r1, sl
     f10:	600b      	str	r3, [r1, #0]
     f12:	2307      	movs	r3, #7
     f14:	4641      	mov	r1, r8
     f16:	400b      	ands	r3, r1
     f18:	d100      	bne.n	f1c <_malloc_r+0x254>
     f1a:	e0fe      	b.n	111a <__ram_size+0x11a>
     f1c:	1ac8      	subs	r0, r1, r3
     f1e:	4938      	ldr	r1, [pc, #224]	; (1000 <__ram_size>)
     f20:	3008      	adds	r0, #8
     f22:	4680      	mov	r8, r0
     f24:	1acb      	subs	r3, r1, r3
     f26:	9a00      	ldr	r2, [sp, #0]
     f28:	1c10      	adds	r0, r2, #0
     f2a:	4440      	add	r0, r8
     f2c:	0501      	lsls	r1, r0, #20
     f2e:	0d0a      	lsrs	r2, r1, #20
     f30:	1a9b      	subs	r3, r3, r2
     f32:	1c19      	adds	r1, r3, #0
     f34:	1c30      	adds	r0, r6, #0
     f36:	469b      	mov	fp, r3
     f38:	f000 f954 	bl	11e4 <_sbrk_r>
     f3c:	1c41      	adds	r1, r0, #1
     f3e:	d100      	bne.n	f42 <_malloc_r+0x27a>
     f40:	e11d      	b.n	117e <__ram_size+0x17e>
     f42:	4641      	mov	r1, r8
     f44:	1a40      	subs	r0, r0, r1
     f46:	4458      	add	r0, fp
     f48:	2201      	movs	r2, #1
     f4a:	4310      	orrs	r0, r2
     f4c:	4652      	mov	r2, sl
     f4e:	6811      	ldr	r1, [r2, #0]
     f50:	1c0b      	adds	r3, r1, #0
     f52:	445b      	add	r3, fp
     f54:	4641      	mov	r1, r8
     f56:	6013      	str	r3, [r2, #0]
     f58:	60a9      	str	r1, [r5, #8]
     f5a:	6048      	str	r0, [r1, #4]
     f5c:	42af      	cmp	r7, r5
     f5e:	d013      	beq.n	f88 <_malloc_r+0x2c0>
     f60:	4648      	mov	r0, r9
     f62:	280f      	cmp	r0, #15
     f64:	d800      	bhi.n	f68 <_malloc_r+0x2a0>
     f66:	e0e4      	b.n	1132 <__ram_size+0x132>
     f68:	464a      	mov	r2, r9
     f6a:	6878      	ldr	r0, [r7, #4]
     f6c:	2107      	movs	r1, #7
     f6e:	3a0c      	subs	r2, #12
     f70:	438a      	bics	r2, r1
     f72:	2101      	movs	r1, #1
     f74:	4001      	ands	r1, r0
     f76:	4311      	orrs	r1, r2
     f78:	6079      	str	r1, [r7, #4]
     f7a:	2005      	movs	r0, #5
     f7c:	18b9      	adds	r1, r7, r2
     f7e:	6048      	str	r0, [r1, #4]
     f80:	6088      	str	r0, [r1, #8]
     f82:	2a0f      	cmp	r2, #15
     f84:	d900      	bls.n	f88 <_malloc_r+0x2c0>
     f86:	e0fe      	b.n	1186 <__ram_size+0x186>
     f88:	4f1e      	ldr	r7, [pc, #120]	; (1004 <__ram_size+0x4>)
     f8a:	6839      	ldr	r1, [r7, #0]
     f8c:	428b      	cmp	r3, r1
     f8e:	d900      	bls.n	f92 <_malloc_r+0x2ca>
     f90:	603b      	str	r3, [r7, #0]
     f92:	481d      	ldr	r0, [pc, #116]	; (1008 <__ram_size+0x8>)
     f94:	6802      	ldr	r2, [r0, #0]
     f96:	4293      	cmp	r3, r2
     f98:	d900      	bls.n	f9c <_malloc_r+0x2d4>
     f9a:	6003      	str	r3, [r0, #0]
     f9c:	68af      	ldr	r7, [r5, #8]
     f9e:	2303      	movs	r3, #3
     fa0:	6879      	ldr	r1, [r7, #4]
     fa2:	4399      	bics	r1, r3
     fa4:	1b08      	subs	r0, r1, r4
     fa6:	42a1      	cmp	r1, r4
     fa8:	d200      	bcs.n	fac <_malloc_r+0x2e4>
     faa:	e0a8      	b.n	10fe <__ram_size+0xfe>
     fac:	280f      	cmp	r0, #15
     fae:	dc00      	bgt.n	fb2 <_malloc_r+0x2ea>
     fb0:	e0a5      	b.n	10fe <__ram_size+0xfe>
     fb2:	2201      	movs	r2, #1
     fb4:	1c23      	adds	r3, r4, #0
     fb6:	4310      	orrs	r0, r2
     fb8:	4313      	orrs	r3, r2
     fba:	193c      	adds	r4, r7, r4
     fbc:	607b      	str	r3, [r7, #4]
     fbe:	60ac      	str	r4, [r5, #8]
     fc0:	6060      	str	r0, [r4, #4]
     fc2:	1c30      	adds	r0, r6, #0
     fc4:	f000 f90c 	bl	11e0 <__malloc_unlock>
     fc8:	1c38      	adds	r0, r7, #0
     fca:	3008      	adds	r0, #8
     fcc:	e6ac      	b.n	d28 <_malloc_r+0x60>
     fce:	2914      	cmp	r1, #20
     fd0:	d800      	bhi.n	fd4 <_malloc_r+0x30c>
     fd2:	e087      	b.n	10e4 <__ram_size+0xe4>
     fd4:	2954      	cmp	r1, #84	; 0x54
     fd6:	d900      	bls.n	fda <_malloc_r+0x312>
     fd8:	e096      	b.n	1108 <__ram_size+0x108>
     fda:	0b25      	lsrs	r5, r4, #12
     fdc:	356e      	adds	r5, #110	; 0x6e
     fde:	46a8      	mov	r8, r5
     fe0:	006b      	lsls	r3, r5, #1
     fe2:	e6b9      	b.n	d58 <_malloc_r+0x90>
     fe4:	000001f7 	.word	0x000001f7
     fe8:	1000042c 	.word	0x1000042c
     fec:	000001ff 	.word	0x000001ff
     ff0:	10000af0 	.word	0x10000af0
     ff4:	10000838 	.word	0x10000838
     ff8:	0000100f 	.word	0x0000100f
     ffc:	10000af4 	.word	0x10000af4
    1000:	00001008 	.word	0x00001008
    1004:	10000aec 	.word	0x10000aec
    1008:	10000ae8 	.word	0x10000ae8
    100c:	0a40      	lsrs	r0, r0, #9
    100e:	2804      	cmp	r0, #4
    1010:	d96c      	bls.n	10ec <__ram_size+0xec>
    1012:	2814      	cmp	r0, #20
    1014:	d900      	bls.n	1018 <__ram_size+0x18>
    1016:	e09c      	b.n	1152 <__ram_size+0x152>
    1018:	305b      	adds	r0, #91	; 0x5b
    101a:	4682      	mov	sl, r0
    101c:	0040      	lsls	r0, r0, #1
    101e:	0080      	lsls	r0, r0, #2
    1020:	1943      	adds	r3, r0, r5
    1022:	4699      	mov	r9, r3
    1024:	689b      	ldr	r3, [r3, #8]
    1026:	2103      	movs	r1, #3
    1028:	468c      	mov	ip, r1
    102a:	454b      	cmp	r3, r9
    102c:	d078      	beq.n	1120 <__ram_size+0x120>
    102e:	6859      	ldr	r1, [r3, #4]
    1030:	4660      	mov	r0, ip
    1032:	4381      	bics	r1, r0
    1034:	428a      	cmp	r2, r1
    1036:	d202      	bcs.n	103e <__ram_size+0x3e>
    1038:	689b      	ldr	r3, [r3, #8]
    103a:	4599      	cmp	r9, r3
    103c:	d1f7      	bne.n	102e <__ram_size+0x2e>
    103e:	68d9      	ldr	r1, [r3, #12]
    1040:	6868      	ldr	r0, [r5, #4]
    1042:	60f9      	str	r1, [r7, #12]
    1044:	60bb      	str	r3, [r7, #8]
    1046:	60df      	str	r7, [r3, #12]
    1048:	608f      	str	r7, [r1, #8]
    104a:	e6c5      	b.n	dd8 <_malloc_r+0x110>
    104c:	2001      	movs	r0, #1
    104e:	193a      	adds	r2, r7, r4
    1050:	4304      	orrs	r4, r0
    1052:	4308      	orrs	r0, r1
    1054:	607c      	str	r4, [r7, #4]
    1056:	616a      	str	r2, [r5, #20]
    1058:	612a      	str	r2, [r5, #16]
    105a:	6050      	str	r0, [r2, #4]
    105c:	60d3      	str	r3, [r2, #12]
    105e:	1c30      	adds	r0, r6, #0
    1060:	6093      	str	r3, [r2, #8]
    1062:	5051      	str	r1, [r2, r1]
    1064:	f000 f8bc 	bl	11e0 <__malloc_unlock>
    1068:	1c38      	adds	r0, r7, #0
    106a:	3008      	adds	r0, #8
    106c:	e65c      	b.n	d28 <_malloc_r+0x60>
    106e:	6868      	ldr	r0, [r5, #4]
    1070:	e6b2      	b.n	dd8 <_malloc_r+0x110>
    1072:	2201      	movs	r2, #1
    1074:	4491      	add	r9, r2
    1076:	4663      	mov	r3, ip
    1078:	464f      	mov	r7, r9
    107a:	3008      	adds	r0, #8
    107c:	423b      	tst	r3, r7
    107e:	d000      	beq.n	1082 <__ram_size+0x82>
    1080:	e6c8      	b.n	e14 <_malloc_r+0x14c>
    1082:	465a      	mov	r2, fp
    1084:	4643      	mov	r3, r8
    1086:	4660      	mov	r0, ip
    1088:	4218      	tst	r0, r3
    108a:	d100      	bne.n	108e <__ram_size+0x8e>
    108c:	e098      	b.n	11c0 <__ram_size+0x1c0>
    108e:	1c17      	adds	r7, r2, #0
    1090:	6812      	ldr	r2, [r2, #0]
    1092:	3f08      	subs	r7, #8
    1094:	3b01      	subs	r3, #1
    1096:	42ba      	cmp	r2, r7
    1098:	d0f5      	beq.n	1086 <__ram_size+0x86>
    109a:	686f      	ldr	r7, [r5, #4]
    109c:	0049      	lsls	r1, r1, #1
    109e:	42b9      	cmp	r1, r7
    10a0:	d900      	bls.n	10a4 <__ram_size+0xa4>
    10a2:	e6fa      	b.n	e9a <_malloc_r+0x1d2>
    10a4:	2900      	cmp	r1, #0
    10a6:	d100      	bne.n	10aa <__ram_size+0xaa>
    10a8:	e6f7      	b.n	e9a <_malloc_r+0x1d2>
    10aa:	4239      	tst	r1, r7
    10ac:	d100      	bne.n	10b0 <__ram_size+0xb0>
    10ae:	e08b      	b.n	11c8 <__ram_size+0x1c8>
    10b0:	46c8      	mov	r8, r9
    10b2:	e6a9      	b.n	e08 <_malloc_r+0x140>
    10b4:	1c3a      	adds	r2, r7, #0
    10b6:	697f      	ldr	r7, [r7, #20]
    10b8:	3002      	adds	r0, #2
    10ba:	3208      	adds	r2, #8
    10bc:	4680      	mov	r8, r0
    10be:	42ba      	cmp	r2, r7
    10c0:	d100      	bne.n	10c4 <__ram_size+0xc4>
    10c2:	e665      	b.n	d90 <_malloc_r+0xc8>
    10c4:	e61f      	b.n	d06 <_malloc_r+0x3e>
    10c6:	18ba      	adds	r2, r7, r2
    10c8:	6854      	ldr	r4, [r2, #4]
    10ca:	68b8      	ldr	r0, [r7, #8]
    10cc:	68fd      	ldr	r5, [r7, #12]
    10ce:	2301      	movs	r3, #1
    10d0:	4323      	orrs	r3, r4
    10d2:	60c5      	str	r5, [r0, #12]
    10d4:	60a8      	str	r0, [r5, #8]
    10d6:	6053      	str	r3, [r2, #4]
    10d8:	1c30      	adds	r0, r6, #0
    10da:	f000 f881 	bl	11e0 <__malloc_unlock>
    10de:	1c38      	adds	r0, r7, #0
    10e0:	3008      	adds	r0, #8
    10e2:	e621      	b.n	d28 <_malloc_r+0x60>
    10e4:	315b      	adds	r1, #91	; 0x5b
    10e6:	4688      	mov	r8, r1
    10e8:	004b      	lsls	r3, r1, #1
    10ea:	e635      	b.n	d58 <_malloc_r+0x90>
    10ec:	0991      	lsrs	r1, r2, #6
    10ee:	3138      	adds	r1, #56	; 0x38
    10f0:	468a      	mov	sl, r1
    10f2:	0048      	lsls	r0, r1, #1
    10f4:	e793      	b.n	101e <__ram_size+0x1e>
    10f6:	42af      	cmp	r7, r5
    10f8:	d000      	beq.n	10fc <__ram_size+0xfc>
    10fa:	e74f      	b.n	f9c <_malloc_r+0x2d4>
    10fc:	e6f4      	b.n	ee8 <_malloc_r+0x220>
    10fe:	1c30      	adds	r0, r6, #0
    1100:	f000 f86e 	bl	11e0 <__malloc_unlock>
    1104:	2000      	movs	r0, #0
    1106:	e60f      	b.n	d28 <_malloc_r+0x60>
    1108:	22aa      	movs	r2, #170	; 0xaa
    110a:	0055      	lsls	r5, r2, #1
    110c:	42a9      	cmp	r1, r5
    110e:	d815      	bhi.n	113c <__ram_size+0x13c>
    1110:	0be2      	lsrs	r2, r4, #15
    1112:	3277      	adds	r2, #119	; 0x77
    1114:	4690      	mov	r8, r2
    1116:	0053      	lsls	r3, r2, #1
    1118:	e61e      	b.n	d58 <_malloc_r+0x90>
    111a:	2280      	movs	r2, #128	; 0x80
    111c:	0153      	lsls	r3, r2, #5
    111e:	e702      	b.n	f26 <_malloc_r+0x25e>
    1120:	4652      	mov	r2, sl
    1122:	1091      	asrs	r1, r2, #2
    1124:	2001      	movs	r0, #1
    1126:	686a      	ldr	r2, [r5, #4]
    1128:	4088      	lsls	r0, r1
    112a:	4310      	orrs	r0, r2
    112c:	6068      	str	r0, [r5, #4]
    112e:	1c19      	adds	r1, r3, #0
    1130:	e787      	b.n	1042 <__ram_size+0x42>
    1132:	2201      	movs	r2, #1
    1134:	604a      	str	r2, [r1, #4]
    1136:	4647      	mov	r7, r8
    1138:	2100      	movs	r1, #0
    113a:	e733      	b.n	fa4 <_malloc_r+0x2dc>
    113c:	4f26      	ldr	r7, [pc, #152]	; (11d8 <__ram_size+0x1d8>)
    113e:	42b9      	cmp	r1, r7
    1140:	d80e      	bhi.n	1160 <__ram_size+0x160>
    1142:	0ca1      	lsrs	r1, r4, #18
    1144:	317c      	adds	r1, #124	; 0x7c
    1146:	4688      	mov	r8, r1
    1148:	004b      	lsls	r3, r1, #1
    114a:	e605      	b.n	d58 <_malloc_r+0x90>
    114c:	3310      	adds	r3, #16
    114e:	9300      	str	r3, [sp, #0]
    1150:	e6bf      	b.n	ed2 <_malloc_r+0x20a>
    1152:	2854      	cmp	r0, #84	; 0x54
    1154:	d823      	bhi.n	119e <__ram_size+0x19e>
    1156:	0b13      	lsrs	r3, r2, #12
    1158:	336e      	adds	r3, #110	; 0x6e
    115a:	469a      	mov	sl, r3
    115c:	0058      	lsls	r0, r3, #1
    115e:	e75e      	b.n	101e <__ram_size+0x1e>
    1160:	207e      	movs	r0, #126	; 0x7e
    1162:	23fc      	movs	r3, #252	; 0xfc
    1164:	4680      	mov	r8, r0
    1166:	e5f7      	b.n	d58 <_malloc_r+0x90>
    1168:	0501      	lsls	r1, r0, #20
    116a:	d000      	beq.n	116e <__ram_size+0x16e>
    116c:	e6c6      	b.n	efc <_malloc_r+0x234>
    116e:	9900      	ldr	r1, [sp, #0]
    1170:	68af      	ldr	r7, [r5, #8]
    1172:	1c08      	adds	r0, r1, #0
    1174:	4448      	add	r0, r9
    1176:	2201      	movs	r2, #1
    1178:	4302      	orrs	r2, r0
    117a:	607a      	str	r2, [r7, #4]
    117c:	e704      	b.n	f88 <_malloc_r+0x2c0>
    117e:	2300      	movs	r3, #0
    1180:	2001      	movs	r0, #1
    1182:	469b      	mov	fp, r3
    1184:	e6e2      	b.n	f4c <_malloc_r+0x284>
    1186:	1c39      	adds	r1, r7, #0
    1188:	3108      	adds	r1, #8
    118a:	1c30      	adds	r0, r6, #0
    118c:	4657      	mov	r7, sl
    118e:	f000 f8a7 	bl	12e0 <_free_r>
    1192:	683b      	ldr	r3, [r7, #0]
    1194:	e6f8      	b.n	f88 <_malloc_r+0x2c0>
    1196:	4642      	mov	r2, r8
    1198:	4658      	mov	r0, fp
    119a:	6002      	str	r2, [r0, #0]
    119c:	e6b9      	b.n	f12 <_malloc_r+0x24a>
    119e:	21aa      	movs	r1, #170	; 0xaa
    11a0:	004b      	lsls	r3, r1, #1
    11a2:	4298      	cmp	r0, r3
    11a4:	d804      	bhi.n	11b0 <__ram_size+0x1b0>
    11a6:	0bd0      	lsrs	r0, r2, #15
    11a8:	3077      	adds	r0, #119	; 0x77
    11aa:	4682      	mov	sl, r0
    11ac:	0040      	lsls	r0, r0, #1
    11ae:	e736      	b.n	101e <__ram_size+0x1e>
    11b0:	4909      	ldr	r1, [pc, #36]	; (11d8 <__ram_size+0x1d8>)
    11b2:	4288      	cmp	r0, r1
    11b4:	d80c      	bhi.n	11d0 <__ram_size+0x1d0>
    11b6:	0c91      	lsrs	r1, r2, #18
    11b8:	317c      	adds	r1, #124	; 0x7c
    11ba:	468a      	mov	sl, r1
    11bc:	0048      	lsls	r0, r1, #1
    11be:	e72e      	b.n	101e <__ram_size+0x1e>
    11c0:	686f      	ldr	r7, [r5, #4]
    11c2:	438f      	bics	r7, r1
    11c4:	606f      	str	r7, [r5, #4]
    11c6:	e769      	b.n	109c <__ram_size+0x9c>
    11c8:	2004      	movs	r0, #4
    11ca:	4481      	add	r9, r0
    11cc:	0049      	lsls	r1, r1, #1
    11ce:	e76c      	b.n	10aa <__ram_size+0xaa>
    11d0:	237e      	movs	r3, #126	; 0x7e
    11d2:	20fc      	movs	r0, #252	; 0xfc
    11d4:	469a      	mov	sl, r3
    11d6:	e722      	b.n	101e <__ram_size+0x1e>
    11d8:	00000554 	.word	0x00000554

000011dc <__malloc_lock>:
    11dc:	4770      	bx	lr
    11de:	46c0      	nop			; (mov r8, r8)

000011e0 <__malloc_unlock>:
    11e0:	4770      	bx	lr
    11e2:	46c0      	nop			; (mov r8, r8)

000011e4 <_sbrk_r>:
    11e4:	b538      	push	{r3, r4, r5, lr}
    11e6:	4c07      	ldr	r4, [pc, #28]	; (1204 <_sbrk_r+0x20>)
    11e8:	2300      	movs	r3, #0
    11ea:	1c05      	adds	r5, r0, #0
    11ec:	1c08      	adds	r0, r1, #0
    11ee:	6023      	str	r3, [r4, #0]
    11f0:	f000 f93e 	bl	1470 <_sbrk>
    11f4:	1c43      	adds	r3, r0, #1
    11f6:	d000      	beq.n	11fa <_sbrk_r+0x16>
    11f8:	bd38      	pop	{r3, r4, r5, pc}
    11fa:	6821      	ldr	r1, [r4, #0]
    11fc:	2900      	cmp	r1, #0
    11fe:	d0fb      	beq.n	11f8 <_sbrk_r+0x14>
    1200:	6029      	str	r1, [r5, #0]
    1202:	e7f9      	b.n	11f8 <_sbrk_r+0x14>
    1204:	10000b20 	.word	0x10000b20

00001208 <strlen>:
    1208:	2300      	movs	r3, #0
    120a:	5cc2      	ldrb	r2, [r0, r3]
    120c:	3301      	adds	r3, #1
    120e:	2a00      	cmp	r2, #0
    1210:	d1fb      	bne.n	120a <strlen+0x2>
    1212:	1e58      	subs	r0, r3, #1
    1214:	4770      	bx	lr
    1216:	46c0      	nop			; (mov r8, r8)

00001218 <register_fini>:
    1218:	b508      	push	{r3, lr}
    121a:	4b03      	ldr	r3, [pc, #12]	; (1228 <register_fini+0x10>)
    121c:	2b00      	cmp	r3, #0
    121e:	d002      	beq.n	1226 <register_fini+0xe>
    1220:	4802      	ldr	r0, [pc, #8]	; (122c <register_fini+0x14>)
    1222:	f000 f805 	bl	1230 <atexit>
    1226:	bd08      	pop	{r3, pc}
    1228:	00000000 	.word	0x00000000
    122c:	00000c55 	.word	0x00000c55

00001230 <atexit>:
    1230:	b508      	push	{r3, lr}
    1232:	1c01      	adds	r1, r0, #0
    1234:	2200      	movs	r2, #0
    1236:	2000      	movs	r0, #0
    1238:	2300      	movs	r3, #0
    123a:	f7ff fca9 	bl	b90 <__register_exitproc>
    123e:	bd08      	pop	{r3, pc}

00001240 <_malloc_trim_r>:
    1240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1242:	1c0f      	adds	r7, r1, #0
    1244:	1c04      	adds	r4, r0, #0
    1246:	f7ff ffc9 	bl	11dc <__malloc_lock>
    124a:	4d20      	ldr	r5, [pc, #128]	; (12cc <_malloc_trim_r+0x8c>)
    124c:	2003      	movs	r0, #3
    124e:	68ab      	ldr	r3, [r5, #8]
    1250:	4a1f      	ldr	r2, [pc, #124]	; (12d0 <_malloc_trim_r+0x90>)
    1252:	685e      	ldr	r6, [r3, #4]
    1254:	4386      	bics	r6, r0
    1256:	18b1      	adds	r1, r6, r2
    1258:	1bcf      	subs	r7, r1, r7
    125a:	0b3b      	lsrs	r3, r7, #12
    125c:	481d      	ldr	r0, [pc, #116]	; (12d4 <_malloc_trim_r+0x94>)
    125e:	3b01      	subs	r3, #1
    1260:	031f      	lsls	r7, r3, #12
    1262:	4287      	cmp	r7, r0
    1264:	dd07      	ble.n	1276 <_malloc_trim_r+0x36>
    1266:	2100      	movs	r1, #0
    1268:	1c20      	adds	r0, r4, #0
    126a:	f7ff ffbb 	bl	11e4 <_sbrk_r>
    126e:	68aa      	ldr	r2, [r5, #8]
    1270:	1991      	adds	r1, r2, r6
    1272:	4288      	cmp	r0, r1
    1274:	d004      	beq.n	1280 <_malloc_trim_r+0x40>
    1276:	1c20      	adds	r0, r4, #0
    1278:	f7ff ffb2 	bl	11e0 <__malloc_unlock>
    127c:	2000      	movs	r0, #0
    127e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1280:	4279      	negs	r1, r7
    1282:	1c20      	adds	r0, r4, #0
    1284:	f7ff ffae 	bl	11e4 <_sbrk_r>
    1288:	3001      	adds	r0, #1
    128a:	d00d      	beq.n	12a8 <_malloc_trim_r+0x68>
    128c:	4812      	ldr	r0, [pc, #72]	; (12d8 <_malloc_trim_r+0x98>)
    128e:	68ad      	ldr	r5, [r5, #8]
    1290:	6802      	ldr	r2, [r0, #0]
    1292:	1bf6      	subs	r6, r6, r7
    1294:	2301      	movs	r3, #1
    1296:	431e      	orrs	r6, r3
    1298:	1bd7      	subs	r7, r2, r7
    129a:	6007      	str	r7, [r0, #0]
    129c:	606e      	str	r6, [r5, #4]
    129e:	1c20      	adds	r0, r4, #0
    12a0:	f7ff ff9e 	bl	11e0 <__malloc_unlock>
    12a4:	2001      	movs	r0, #1
    12a6:	e7ea      	b.n	127e <_malloc_trim_r+0x3e>
    12a8:	1c20      	adds	r0, r4, #0
    12aa:	2100      	movs	r1, #0
    12ac:	f7ff ff9a 	bl	11e4 <_sbrk_r>
    12b0:	68ad      	ldr	r5, [r5, #8]
    12b2:	1b46      	subs	r6, r0, r5
    12b4:	2e0f      	cmp	r6, #15
    12b6:	ddde      	ble.n	1276 <_malloc_trim_r+0x36>
    12b8:	4908      	ldr	r1, [pc, #32]	; (12dc <_malloc_trim_r+0x9c>)
    12ba:	4a07      	ldr	r2, [pc, #28]	; (12d8 <_malloc_trim_r+0x98>)
    12bc:	680b      	ldr	r3, [r1, #0]
    12be:	2701      	movs	r7, #1
    12c0:	1ac0      	subs	r0, r0, r3
    12c2:	433e      	orrs	r6, r7
    12c4:	6010      	str	r0, [r2, #0]
    12c6:	606e      	str	r6, [r5, #4]
    12c8:	e7d5      	b.n	1276 <_malloc_trim_r+0x36>
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	1000042c 	.word	0x1000042c
    12d0:	00000fef 	.word	0x00000fef
    12d4:	00000fff 	.word	0x00000fff
    12d8:	10000af4 	.word	0x10000af4
    12dc:	10000838 	.word	0x10000838

000012e0 <_free_r>:
    12e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12e2:	4647      	mov	r7, r8
    12e4:	b480      	push	{r7}
    12e6:	1c05      	adds	r5, r0, #0
    12e8:	1e0c      	subs	r4, r1, #0
    12ea:	d055      	beq.n	1398 <_free_r+0xb8>
    12ec:	f7ff ff76 	bl	11dc <__malloc_lock>
    12f0:	1c21      	adds	r1, r4, #0
    12f2:	3908      	subs	r1, #8
    12f4:	6848      	ldr	r0, [r1, #4]
    12f6:	2701      	movs	r7, #1
    12f8:	1c03      	adds	r3, r0, #0
    12fa:	43bb      	bics	r3, r7
    12fc:	18ca      	adds	r2, r1, r3
    12fe:	6854      	ldr	r4, [r2, #4]
    1300:	2603      	movs	r6, #3
    1302:	43b4      	bics	r4, r6
    1304:	4680      	mov	r8, r0
    1306:	1c20      	adds	r0, r4, #0
    1308:	4c53      	ldr	r4, [pc, #332]	; (1458 <_free_r+0x178>)
    130a:	68a6      	ldr	r6, [r4, #8]
    130c:	4296      	cmp	r6, r2
    130e:	d060      	beq.n	13d2 <_free_r+0xf2>
    1310:	2600      	movs	r6, #0
    1312:	46b4      	mov	ip, r6
    1314:	4646      	mov	r6, r8
    1316:	6050      	str	r0, [r2, #4]
    1318:	4237      	tst	r7, r6
    131a:	d10a      	bne.n	1332 <_free_r+0x52>
    131c:	680f      	ldr	r7, [r1, #0]
    131e:	1bc9      	subs	r1, r1, r7
    1320:	19db      	adds	r3, r3, r7
    1322:	688e      	ldr	r6, [r1, #8]
    1324:	1c27      	adds	r7, r4, #0
    1326:	3708      	adds	r7, #8
    1328:	42be      	cmp	r6, r7
    132a:	d06b      	beq.n	1404 <_free_r+0x124>
    132c:	68cf      	ldr	r7, [r1, #12]
    132e:	60f7      	str	r7, [r6, #12]
    1330:	60be      	str	r6, [r7, #8]
    1332:	1817      	adds	r7, r2, r0
    1334:	687f      	ldr	r7, [r7, #4]
    1336:	2601      	movs	r6, #1
    1338:	4237      	tst	r7, r6
    133a:	d107      	bne.n	134c <_free_r+0x6c>
    133c:	181b      	adds	r3, r3, r0
    133e:	4660      	mov	r0, ip
    1340:	2800      	cmp	r0, #0
    1342:	d02c      	beq.n	139e <_free_r+0xbe>
    1344:	6890      	ldr	r0, [r2, #8]
    1346:	68d2      	ldr	r2, [r2, #12]
    1348:	60c2      	str	r2, [r0, #12]
    134a:	6090      	str	r0, [r2, #8]
    134c:	2701      	movs	r7, #1
    134e:	1c1e      	adds	r6, r3, #0
    1350:	433e      	orrs	r6, r7
    1352:	4660      	mov	r0, ip
    1354:	604e      	str	r6, [r1, #4]
    1356:	50cb      	str	r3, [r1, r3]
    1358:	2800      	cmp	r0, #0
    135a:	d11a      	bne.n	1392 <_free_r+0xb2>
    135c:	4a3f      	ldr	r2, [pc, #252]	; (145c <_free_r+0x17c>)
    135e:	4293      	cmp	r3, r2
    1360:	d929      	bls.n	13b6 <_free_r+0xd6>
    1362:	0a5f      	lsrs	r7, r3, #9
    1364:	2f04      	cmp	r7, #4
    1366:	d850      	bhi.n	140a <_free_r+0x12a>
    1368:	099f      	lsrs	r7, r3, #6
    136a:	3738      	adds	r7, #56	; 0x38
    136c:	007e      	lsls	r6, r7, #1
    136e:	00b0      	lsls	r0, r6, #2
    1370:	1820      	adds	r0, r4, r0
    1372:	6882      	ldr	r2, [r0, #8]
    1374:	2603      	movs	r6, #3
    1376:	4282      	cmp	r2, r0
    1378:	d04c      	beq.n	1414 <_free_r+0x134>
    137a:	6854      	ldr	r4, [r2, #4]
    137c:	43b4      	bics	r4, r6
    137e:	42a3      	cmp	r3, r4
    1380:	d202      	bcs.n	1388 <_free_r+0xa8>
    1382:	6892      	ldr	r2, [r2, #8]
    1384:	4290      	cmp	r0, r2
    1386:	d1f8      	bne.n	137a <_free_r+0x9a>
    1388:	68d7      	ldr	r7, [r2, #12]
    138a:	60cf      	str	r7, [r1, #12]
    138c:	608a      	str	r2, [r1, #8]
    138e:	60d1      	str	r1, [r2, #12]
    1390:	60b9      	str	r1, [r7, #8]
    1392:	1c28      	adds	r0, r5, #0
    1394:	f7ff ff24 	bl	11e0 <__malloc_unlock>
    1398:	bc04      	pop	{r2}
    139a:	4690      	mov	r8, r2
    139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    139e:	6890      	ldr	r0, [r2, #8]
    13a0:	4f2f      	ldr	r7, [pc, #188]	; (1460 <_free_r+0x180>)
    13a2:	42b8      	cmp	r0, r7
    13a4:	d1cf      	bne.n	1346 <_free_r+0x66>
    13a6:	431e      	orrs	r6, r3
    13a8:	60c1      	str	r1, [r0, #12]
    13aa:	6081      	str	r1, [r0, #8]
    13ac:	60c8      	str	r0, [r1, #12]
    13ae:	6088      	str	r0, [r1, #8]
    13b0:	604e      	str	r6, [r1, #4]
    13b2:	50cb      	str	r3, [r1, r3]
    13b4:	e7ed      	b.n	1392 <_free_r+0xb2>
    13b6:	08da      	lsrs	r2, r3, #3
    13b8:	1090      	asrs	r0, r2, #2
    13ba:	6863      	ldr	r3, [r4, #4]
    13bc:	4087      	lsls	r7, r0
    13be:	431f      	orrs	r7, r3
    13c0:	00d6      	lsls	r6, r2, #3
    13c2:	6067      	str	r7, [r4, #4]
    13c4:	19a4      	adds	r4, r4, r6
    13c6:	68a7      	ldr	r7, [r4, #8]
    13c8:	60cc      	str	r4, [r1, #12]
    13ca:	608f      	str	r7, [r1, #8]
    13cc:	60f9      	str	r1, [r7, #12]
    13ce:	60a1      	str	r1, [r4, #8]
    13d0:	e7df      	b.n	1392 <_free_r+0xb2>
    13d2:	18c3      	adds	r3, r0, r3
    13d4:	4640      	mov	r0, r8
    13d6:	4207      	tst	r7, r0
    13d8:	d106      	bne.n	13e8 <_free_r+0x108>
    13da:	680e      	ldr	r6, [r1, #0]
    13dc:	1b89      	subs	r1, r1, r6
    13de:	68cf      	ldr	r7, [r1, #12]
    13e0:	688a      	ldr	r2, [r1, #8]
    13e2:	199b      	adds	r3, r3, r6
    13e4:	60d7      	str	r7, [r2, #12]
    13e6:	60ba      	str	r2, [r7, #8]
    13e8:	2001      	movs	r0, #1
    13ea:	4318      	orrs	r0, r3
    13ec:	60a1      	str	r1, [r4, #8]
    13ee:	6048      	str	r0, [r1, #4]
    13f0:	491c      	ldr	r1, [pc, #112]	; (1464 <_free_r+0x184>)
    13f2:	680c      	ldr	r4, [r1, #0]
    13f4:	42a3      	cmp	r3, r4
    13f6:	d3cc      	bcc.n	1392 <_free_r+0xb2>
    13f8:	4e1b      	ldr	r6, [pc, #108]	; (1468 <_free_r+0x188>)
    13fa:	1c28      	adds	r0, r5, #0
    13fc:	6831      	ldr	r1, [r6, #0]
    13fe:	f7ff ff1f 	bl	1240 <_malloc_trim_r>
    1402:	e7c6      	b.n	1392 <_free_r+0xb2>
    1404:	2601      	movs	r6, #1
    1406:	46b4      	mov	ip, r6
    1408:	e793      	b.n	1332 <_free_r+0x52>
    140a:	2f14      	cmp	r7, #20
    140c:	d80b      	bhi.n	1426 <_free_r+0x146>
    140e:	375b      	adds	r7, #91	; 0x5b
    1410:	007e      	lsls	r6, r7, #1
    1412:	e7ac      	b.n	136e <_free_r+0x8e>
    1414:	10b8      	asrs	r0, r7, #2
    1416:	2301      	movs	r3, #1
    1418:	6867      	ldr	r7, [r4, #4]
    141a:	4083      	lsls	r3, r0
    141c:	1c1e      	adds	r6, r3, #0
    141e:	433e      	orrs	r6, r7
    1420:	6066      	str	r6, [r4, #4]
    1422:	1c17      	adds	r7, r2, #0
    1424:	e7b1      	b.n	138a <_free_r+0xaa>
    1426:	2f54      	cmp	r7, #84	; 0x54
    1428:	d803      	bhi.n	1432 <_free_r+0x152>
    142a:	0b1f      	lsrs	r7, r3, #12
    142c:	376e      	adds	r7, #110	; 0x6e
    142e:	007e      	lsls	r6, r7, #1
    1430:	e79d      	b.n	136e <_free_r+0x8e>
    1432:	26aa      	movs	r6, #170	; 0xaa
    1434:	0070      	lsls	r0, r6, #1
    1436:	4287      	cmp	r7, r0
    1438:	d803      	bhi.n	1442 <_free_r+0x162>
    143a:	0bdf      	lsrs	r7, r3, #15
    143c:	3777      	adds	r7, #119	; 0x77
    143e:	007e      	lsls	r6, r7, #1
    1440:	e795      	b.n	136e <_free_r+0x8e>
    1442:	4a0a      	ldr	r2, [pc, #40]	; (146c <_free_r+0x18c>)
    1444:	4297      	cmp	r7, r2
    1446:	d803      	bhi.n	1450 <_free_r+0x170>
    1448:	0c9f      	lsrs	r7, r3, #18
    144a:	377c      	adds	r7, #124	; 0x7c
    144c:	007e      	lsls	r6, r7, #1
    144e:	e78e      	b.n	136e <_free_r+0x8e>
    1450:	26fc      	movs	r6, #252	; 0xfc
    1452:	277e      	movs	r7, #126	; 0x7e
    1454:	e78b      	b.n	136e <_free_r+0x8e>
    1456:	46c0      	nop			; (mov r8, r8)
    1458:	1000042c 	.word	0x1000042c
    145c:	000001ff 	.word	0x000001ff
    1460:	10000434 	.word	0x10000434
    1464:	10000834 	.word	0x10000834
    1468:	10000af0 	.word	0x10000af0
    146c:	00000554 	.word	0x00000554

00001470 <_sbrk>:
    1470:	4a09      	ldr	r2, [pc, #36]	; (1498 <_sbrk+0x28>)
    1472:	6813      	ldr	r3, [r2, #0]
    1474:	2b00      	cmp	r3, #0
    1476:	d00c      	beq.n	1492 <_sbrk+0x22>
    1478:	1818      	adds	r0, r3, r0
    147a:	4669      	mov	r1, sp
    147c:	4288      	cmp	r0, r1
    147e:	d802      	bhi.n	1486 <_sbrk+0x16>
    1480:	6010      	str	r0, [r2, #0]
    1482:	1c18      	adds	r0, r3, #0
    1484:	4770      	bx	lr
    1486:	4b05      	ldr	r3, [pc, #20]	; (149c <_sbrk+0x2c>)
    1488:	220c      	movs	r2, #12
    148a:	2001      	movs	r0, #1
    148c:	601a      	str	r2, [r3, #0]
    148e:	4243      	negs	r3, r0
    1490:	e7f7      	b.n	1482 <_sbrk+0x12>
    1492:	4b03      	ldr	r3, [pc, #12]	; (14a0 <_sbrk+0x30>)
    1494:	6013      	str	r3, [r2, #0]
    1496:	e7ef      	b.n	1478 <_sbrk+0x8>
    1498:	10000b1c 	.word	0x10000b1c
    149c:	10000b20 	.word	0x10000b20
    14a0:	10000b24 	.word	0x10000b24

000014a4 <__gnu_thumb1_case_uqi>:
    14a4:	b402      	push	{r1}
    14a6:	4671      	mov	r1, lr
    14a8:	0849      	lsrs	r1, r1, #1
    14aa:	0049      	lsls	r1, r1, #1
    14ac:	5c09      	ldrb	r1, [r1, r0]
    14ae:	0049      	lsls	r1, r1, #1
    14b0:	448e      	add	lr, r1
    14b2:	bc02      	pop	{r1}
    14b4:	4770      	bx	lr
    14b6:	46c0      	nop			; (mov r8, r8)

000014b8 <__aeabi_uidiv>:
    14b8:	2900      	cmp	r1, #0
    14ba:	d034      	beq.n	1526 <.udivsi3_skip_div0_test+0x6a>

000014bc <.udivsi3_skip_div0_test>:
    14bc:	2301      	movs	r3, #1
    14be:	2200      	movs	r2, #0
    14c0:	b410      	push	{r4}
    14c2:	4288      	cmp	r0, r1
    14c4:	d32c      	bcc.n	1520 <.udivsi3_skip_div0_test+0x64>
    14c6:	2401      	movs	r4, #1
    14c8:	0724      	lsls	r4, r4, #28
    14ca:	42a1      	cmp	r1, r4
    14cc:	d204      	bcs.n	14d8 <.udivsi3_skip_div0_test+0x1c>
    14ce:	4281      	cmp	r1, r0
    14d0:	d202      	bcs.n	14d8 <.udivsi3_skip_div0_test+0x1c>
    14d2:	0109      	lsls	r1, r1, #4
    14d4:	011b      	lsls	r3, r3, #4
    14d6:	e7f8      	b.n	14ca <.udivsi3_skip_div0_test+0xe>
    14d8:	00e4      	lsls	r4, r4, #3
    14da:	42a1      	cmp	r1, r4
    14dc:	d204      	bcs.n	14e8 <.udivsi3_skip_div0_test+0x2c>
    14de:	4281      	cmp	r1, r0
    14e0:	d202      	bcs.n	14e8 <.udivsi3_skip_div0_test+0x2c>
    14e2:	0049      	lsls	r1, r1, #1
    14e4:	005b      	lsls	r3, r3, #1
    14e6:	e7f8      	b.n	14da <.udivsi3_skip_div0_test+0x1e>
    14e8:	4288      	cmp	r0, r1
    14ea:	d301      	bcc.n	14f0 <.udivsi3_skip_div0_test+0x34>
    14ec:	1a40      	subs	r0, r0, r1
    14ee:	431a      	orrs	r2, r3
    14f0:	084c      	lsrs	r4, r1, #1
    14f2:	42a0      	cmp	r0, r4
    14f4:	d302      	bcc.n	14fc <.udivsi3_skip_div0_test+0x40>
    14f6:	1b00      	subs	r0, r0, r4
    14f8:	085c      	lsrs	r4, r3, #1
    14fa:	4322      	orrs	r2, r4
    14fc:	088c      	lsrs	r4, r1, #2
    14fe:	42a0      	cmp	r0, r4
    1500:	d302      	bcc.n	1508 <.udivsi3_skip_div0_test+0x4c>
    1502:	1b00      	subs	r0, r0, r4
    1504:	089c      	lsrs	r4, r3, #2
    1506:	4322      	orrs	r2, r4
    1508:	08cc      	lsrs	r4, r1, #3
    150a:	42a0      	cmp	r0, r4
    150c:	d302      	bcc.n	1514 <.udivsi3_skip_div0_test+0x58>
    150e:	1b00      	subs	r0, r0, r4
    1510:	08dc      	lsrs	r4, r3, #3
    1512:	4322      	orrs	r2, r4
    1514:	2800      	cmp	r0, #0
    1516:	d003      	beq.n	1520 <.udivsi3_skip_div0_test+0x64>
    1518:	091b      	lsrs	r3, r3, #4
    151a:	d001      	beq.n	1520 <.udivsi3_skip_div0_test+0x64>
    151c:	0909      	lsrs	r1, r1, #4
    151e:	e7e3      	b.n	14e8 <.udivsi3_skip_div0_test+0x2c>
    1520:	1c10      	adds	r0, r2, #0
    1522:	bc10      	pop	{r4}
    1524:	4770      	bx	lr
    1526:	2800      	cmp	r0, #0
    1528:	d001      	beq.n	152e <.udivsi3_skip_div0_test+0x72>
    152a:	2000      	movs	r0, #0
    152c:	43c0      	mvns	r0, r0
    152e:	b407      	push	{r0, r1, r2}
    1530:	4802      	ldr	r0, [pc, #8]	; (153c <.udivsi3_skip_div0_test+0x80>)
    1532:	a102      	add	r1, pc, #8	; (adr r1, 153c <.udivsi3_skip_div0_test+0x80>)
    1534:	1840      	adds	r0, r0, r1
    1536:	9002      	str	r0, [sp, #8]
    1538:	bd03      	pop	{r0, r1, pc}
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	00000019 	.word	0x00000019

00001540 <__aeabi_uidivmod>:
    1540:	2900      	cmp	r1, #0
    1542:	d0f0      	beq.n	1526 <.udivsi3_skip_div0_test+0x6a>
    1544:	b503      	push	{r0, r1, lr}
    1546:	f7ff ffb9 	bl	14bc <.udivsi3_skip_div0_test>
    154a:	bc0e      	pop	{r1, r2, r3}
    154c:	4342      	muls	r2, r0
    154e:	1a89      	subs	r1, r1, r2
    1550:	4718      	bx	r3
    1552:	46c0      	nop			; (mov r8, r8)

00001554 <__aeabi_idiv0>:
    1554:	4770      	bx	lr
    1556:	46c0      	nop			; (mov r8, r8)

00001558 <_ZL18port_to_output_PGM>:
    1558:	0000 0000 3ffc 5000 3ffc 5001 0000 0000     .....?.P.?.P....
    1568:	0000 0000                                   ....

0000156c <_ZL27digital_pin_to_bit_mask_PGM>:
    156c:	0040 0080 0100 0200 0002 0004 0008 0010     @...............
    157c:	0080 0100 0200 0400 0020 0040 0020 0001     ........ .@. ...
    158c:	0002 0004 0008 0010                         ........

00001594 <_ZL23digital_pin_to_port_PGM>:
    1594:	0202 0202 0101 0101 0101 0101 0101 0202     ................
    15a4:	0202 0202                                   ....

000015a8 <_ZL16port_to_mode_PGM>:
    15a8:	0000 0000 8000 5000 8000 5001 0000 0000     .......P...P....
    15b8:	0000 0000 614d 6e69 4d20 6e65 2075 202d     ....Main Menu - 
    15c8:	6552 7473 6972 7463 726f 5020 616c 6574     Restrictor Plate
    15d8:	7620 2e30 0031 2e31 2020 454c 2044 4e4f      v0.1.1.  LED ON
    15e8:	3200 202e 4c20 4445 4f20 4646 3300 202e     .2.  LED OFF.3. 
    15f8:	4d20 5550 3036 3035 5720 4f48 415f 5f4d      MPU6050 WHO_AM_
    1608:	0049 2e34 2020 6c43 6165 2072 6c73 6565     I.4.  Clear slee
    1618:	0070 2e35 2020 6552 6461 5820 3d00 3e3d     p.5.  Read X.==>
    1628:	0020 504d 3655 3530 2030 2d58 7861 7369      .MPU6050 X-axis
    1638:	4d00 5550 3036 3035 5820 6120 6978 3a73     .MPU6050 X axis:
    1648:	3020 0078 0000 0000                          0x.....

00001650 <_ZTV14HardwareSerial>:
	...
    1658:	0541 0000 0a41 0000 04d5 0000 0511 0000     A...A...........
    1668:	04ed 0000 053d 0000 0043 0000               ....=...C...

00001674 <_global_impure_ptr>:
    1674:	0000 1000                                   ....

00001678 <_init>:
    1678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    167e:	bc08      	pop	{r3}
    1680:	469e      	mov	lr, r3
    1682:	4770      	bx	lr

00001684 <__init_array_start>:
    1684:	00001219 	.word	0x00001219

00001688 <__frame_dummy_init_array_entry>:
    1688:	000000c9 00000739                       ....9...

00001690 <_fini>:
    1690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1692:	46c0      	nop			; (mov r8, r8)
    1694:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1696:	bc08      	pop	{r3}
    1698:	469e      	mov	lr, r3
    169a:	4770      	bx	lr

0000169c <__fini_array_start>:
    169c:	000000a1 	.word	0x000000a1
